# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['models', 'g', 'tags', 'mk_msg', 'mk_msgs', 'contents', 'AnthClient', 'hl_md', 'to_xml', 'xt', 'json_to_xml',
           'first_match', 'last_match']

# %% ../00_core.ipynb 5
import xml.etree.ElementTree as ET, json
try: from IPython.display import Markdown
except: Markdown=None

from anthropic import Anthropic
from fastcore.utils import *

# %% ../00_core.ipynb 6
models = 'claude-3-opus-20240229','claude-3-sonnet-20240229','claude-3-haiku-20240307'

# %% ../00_core.ipynb 9
def mk_msg(content, role='user', **kw):
    "Helper to create a `dict` appropriate for a Claude message"
    return dict(role=role, content=content, **kw)

# %% ../00_core.ipynb 10
def mk_msgs(msgs, **kw):
    "Helper to set 'assistant' role on alternate messages"
    return [mk_msg(o, ('user','assistant')[i%2], **kw) if isinstance(o,str) else o
            for i,o in enumerate(msgs)]

# %% ../00_core.ipynb 11
def contents(r):
    "Help to get the contents from Claude response `r`"
    return r.content[0].text.strip()

# %% ../00_core.ipynb 12
class AnthClient:
    def __init__(self, model, cli=None):
        "Basic Anthropic messages client"
        self.m,self.model = (cli or Anthropic()).messages,model

    def __call__(self, msgs, sp='', temp=0, maxtok=4096, stop=None):
        return self.m.create(model=self.model, messages=mk_msgs(msgs), max_tokens=maxtok,
                             system=sp, temperature=temp, stop_sequences=stop)

    def stream(self, msgs, sp='', temp=0, maxtok=4096, stop=None):
        with self.m.stream(model=self.model, messages=mk_msgs(msgs), max_tokens=maxtok,
            system=sp, temperature=temp, stop_sequences=stop) as stream:
            yield from stream.text_stream

# %% ../00_core.ipynb 14
def hl_md(s, lang='xml'):
    "Syntax highlight `s` using `lang`"
    if Markdown: return Markdown(f'```{lang}\n{s}\n```')
    else: print(s)

# %% ../00_core.ipynb 15
def to_xml(node, hl=False):
    "Convert `node` to an XML string"
    def mk_el(tag, cs, attrs):
        el = ET.Element(tag, attrib=attrs)
        if isinstance(cs, list): el.extend([mk_el(*o) for o in cs])
        elif cs is not None: el.text = str(cs)
        return el

    root = mk_el(*node)
    ET.indent(root)
    res = ET.tostring(root, encoding='unicode')
    return hl_md(res) if hl else res

# %% ../00_core.ipynb 16
def xt(tag, c=None, **kw):
    "Helper to create appropriate data structure for `to_xml`"
    kw = {k.lstrip('_'):str(v) for k,v in kw.items()}
    return tag,c,kw

# %% ../00_core.ipynb 17
g = globals()
tags = 'div','img','h1','h2','h3','h4','h5','p','hr','span','html'
for o in tags: g[o] = partial(xt, o)

# %% ../00_core.ipynb 20
def json_to_xml(d, rnm):
    root = ET.Element(rnm)
    def build_xml(data, parent):
        if isinstance(data, dict):
            for key, value in data.items(): build_xml(value, ET.SubElement(parent, key))
        elif isinstance(data, list):
            for item in data: build_xml(item, ET.SubElement(parent, 'item'))
        else: parent.text = str(data)
    build_xml(d, root)
    ET.indent(root)
    return ET.tostring(root, encoding='unicode')

# %% ../00_core.ipynb 21
def first_match(lst, f, default=None):
    "First element of `lst` matching predicate `f`, or `default` if none"
    return next((i for i,o in enumerate(lst) if f(o)), default)

#| export
def last_match(lst, f, default=None):
    "Last element of `lst` matching predicate `f`, or `default` if none"
    return next((i for i in range(len(lst)-1, -1, -1) if f(lst[i])), default)
