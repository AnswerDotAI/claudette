# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['models', 'g', 'tags', 'mk_msg', 'mk_msgs', 'contents', 'Client', 'get_schema', 'hl_md', 'to_xml', 'xt', 'json_to_xml']

# %% ../00_core.ipynb 5
import tokenize, ast, inspect, inspect, typing
import xml.etree.ElementTree as ET, json
try: from IPython.display import Markdown
except: Markdown=None

from anthropic import Anthropic
from anthropic.types import Usage
from inspect import Parameter
from io import BytesIO

from fastcore.docments import docments
from fastcore.utils import *

# %% ../00_core.ipynb 6
models = 'claude-3-opus-20240229','claude-3-sonnet-20240229','claude-3-haiku-20240307'

# %% ../00_core.ipynb 9
def mk_msg(content, role='user', **kw):
    "Helper to create a `dict` appropriate for a Claude message"
    return dict(role=role, content=content, **kw)

# %% ../00_core.ipynb 10
def mk_msgs(msgs, **kw):
    "Helper to set 'assistant' role on alternate messages"
    if isinstance(msgs,str): msgs=[msgs]
    return [mk_msg(o, ('user','assistant')[i%2], **kw) if isinstance(o,str) else o
            for i,o in enumerate(msgs)]

# %% ../00_core.ipynb 11
def contents(r):
    "Help to get the contents from Claude response `r`"
    return r.content[0].text.strip()

# %% ../00_core.ipynb 13
@patch
def __add__(self:Usage, b):
    return Usage(input_tokens=self.input_tokens+b.input_tokens, output_tokens=self.output_tokens+b.output_tokens)

@patch(as_prop=True)
def total(self:Usage): return self.input_tokens+self.output_tokens

@patch
def __repr__(self:Usage): return f'In: {self.input_tokens}; Out: {self.output_tokens}; Total: {self.total}'

# %% ../00_core.ipynb 14
class Client:
    def __init__(self, model, cli=None):
        "Basic Anthropic messages client"
        self.model,self.use = model,Usage(input_tokens=0,output_tokens=0)
        self.c = (cli or Anthropic())

    def _r(self, r):
        self.result = r
        self.use += r.usage
        return r

    def __call__(self, msgs, sp='', temp=0, maxtok=4096, stop=None, **kw):
        r = self.c.beta.tools.messages.create(
            model=self.model, messages=mk_msgs(msgs), max_tokens=maxtok, system=sp, temperature=temp, stop_sequences=stop, **kw)
        return self._r(r)

    def stream(self, msgs, sp='', temp=0, maxtok=4096, stop=None, **kw):
        msgs = mk_msgs(msgs)
        with self.c.messages.stream(model=self.model, messages=mk_msgs(msgs), max_tokens=maxtok,
                                    system=sp, temperature=temp, stop_sequences=stop, **kw) as s:
            yield from s.text_stream
            return self._r(s.get_final_message())

# %% ../00_core.ipynb 20
def get_schema(f):
    tmap = {int:"integer", float:"number", str:"string", bool:"boolean", list:"array", dict:"object"}
    paramd = dict(type="object", properties={}, required=[])
    schema = dict(name=f.__name__, description=f.__doc__, input_schema=paramd)

    def _types(anno):
        if getattr(anno, '__origin__', None) in  (list,tuple): return "array", tmap.get(anno.__args__[0], "object")
        else: return tmap.get(anno, "object"), None

    for pname, pinfo in docments(f, full=True).items():
        if pname == "return": continue
        paramt,itemt = _types(pinfo.anno)
        pschema = dict(type=paramt, description=pinfo.docment)
        if itemt: pschema["items"] = {"type": itemt}
        if pinfo.default is not Parameter.empty: pschema["default"] = pinfo.default
        else: paramd["required"].append(pname)
        paramd["properties"][pname] = pschema

    return schema

# %% ../00_core.ipynb 34
def hl_md(s, lang='xml'):
    "Syntax highlight `s` using `lang`"
    if Markdown: return Markdown(f'```{lang}\n{s}\n```')
    print(s)

# %% ../00_core.ipynb 35
def to_xml(node, hl=False):
    "Convert `node` to an XML string"
    def mk_el(tag, cs, attrs):
        el = ET.Element(tag, attrib=attrs)
        if isinstance(cs, list): el.extend([mk_el(*o) for o in cs])
        elif cs is not None: el.text = str(cs)
        return el

    root = mk_el(*node)
    ET.indent(root)
    res = ET.tostring(root, encoding='unicode')
    return hl_md(res) if hl else res

# %% ../00_core.ipynb 36
def xt(tag, c=None, **kw):
    "Helper to create appropriate data structure for `to_xml`"
    kw = {k.lstrip('_'):str(v) for k,v in kw.items()}
    return tag,c,kw

# %% ../00_core.ipynb 37
g = globals()
tags = 'div','img','h1','h2','h3','h4','h5','p','hr','span','html'
for o in tags: g[o] = partial(xt, o)

# %% ../00_core.ipynb 40
def json_to_xml(d:dict, rnm:str)->str:
    "Convert `d` to XML with root name `rnm`"
    root = ET.Element(rnm)
    def build_xml(data, parent):
        if isinstance(data, dict):
            for key, value in data.items(): build_xml(value, ET.SubElement(parent, key))
        elif isinstance(data, list):
            for item in data: build_xml(item, ET.SubElement(parent, 'item'))
        else: parent.text = str(data)
    build_xml(d, root)
    ET.indent(root)
    return ET.tostring(root, encoding='unicode')
