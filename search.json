[
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "CHANGELOG.html#section",
    "href": "CHANGELOG.html#section",
    "title": "",
    "section": "0.3.6",
    "text": "0.3.6\n\nNew Features\n\nSupport opus 4.1 (#93)"
  },
  {
    "objectID": "CHANGELOG.html#section-1",
    "href": "CHANGELOG.html#section-1",
    "title": "",
    "section": "0.3.5",
    "text": "0.3.5\n\nNew Features\n\nSupport async functions in async toolloop (#92)"
  },
  {
    "objectID": "CHANGELOG.html#section-2",
    "href": "CHANGELOG.html#section-2",
    "title": "",
    "section": "0.3.4",
    "text": "0.3.4\n\nBugs Squashed\n\nEscape Quotes in markdown footnotes (#90), thanks to @ncoop57"
  },
  {
    "objectID": "CHANGELOG.html#section-3",
    "href": "CHANGELOG.html#section-3",
    "title": "",
    "section": "0.3.2",
    "text": "0.3.2\n\nNew Features\n\nSuport for tool functions returning ToolResult image values (#88), thanks to @austinvhuang"
  },
  {
    "objectID": "CHANGELOG.html#section-4",
    "href": "CHANGELOG.html#section-4",
    "title": "",
    "section": "0.3.1",
    "text": "0.3.1\n\nNew Features\n\nUse msglm 0.0.9 (#87)"
  },
  {
    "objectID": "CHANGELOG.html#section-5",
    "href": "CHANGELOG.html#section-5",
    "title": "",
    "section": "0.3.0",
    "text": "0.3.0\n\nBreaking Changes\n\nRemove obj support (#85)"
  },
  {
    "objectID": "CHANGELOG.html#section-6",
    "href": "CHANGELOG.html#section-6",
    "title": "",
    "section": "0.2.2",
    "text": "0.2.2\n\nNew Features\n\nMake full messages available after streaming (#84)"
  },
  {
    "objectID": "CHANGELOG.html#section-7",
    "href": "CHANGELOG.html#section-7",
    "title": "",
    "section": "0.2.0",
    "text": "0.2.0\n\nBreaking Changes\n\ntoolloop now returns an iterator of every message, including each tool request and result\n\n\n\nNew Features\n\nAdd tool call results to toolloop result (#83)\nshow_thk param for contents (#82)"
  },
  {
    "objectID": "CHANGELOG.html#section-8",
    "href": "CHANGELOG.html#section-8",
    "title": "",
    "section": "0.1.11",
    "text": "0.1.11\n\nNew Features\n\nUse updated text editor tool (#80)\nSkip hidden directories in view()"
  },
  {
    "objectID": "CHANGELOG.html#section-9",
    "href": "CHANGELOG.html#section-9",
    "title": "",
    "section": "0.1.10",
    "text": "0.1.10\n\nNew Features\n\nSupport Claude 4 (#79)"
  },
  {
    "objectID": "CHANGELOG.html#section-10",
    "href": "CHANGELOG.html#section-10",
    "title": "",
    "section": "0.1.9",
    "text": "0.1.9\n\nNew Features\n\nTool loop now continues when function calls return an error (#78), thanks to @erikgaas\nfeat: add text editor tool implementation (#71), thanks to @ncoop57"
  },
  {
    "objectID": "CHANGELOG.html#section-11",
    "href": "CHANGELOG.html#section-11",
    "title": "",
    "section": "0.1.8",
    "text": "0.1.8\n\nNew Features\n\nAdd exhausted tool loop warning (#75)\nText editor tool implementation (#71), thanks to @ncoop57\nAsync tool loop (#70)\nPre-serialized funcs in tool calling (#67), thanks to @erikgaas\nExtended Thinking (#66)"
  },
  {
    "objectID": "CHANGELOG.html#section-12",
    "href": "CHANGELOG.html#section-12",
    "title": "",
    "section": "0.1.7",
    "text": "0.1.7\n\nBugs Squashed\n\nBump required msglm version"
  },
  {
    "objectID": "CHANGELOG.html#section-13",
    "href": "CHANGELOG.html#section-13",
    "title": "",
    "section": "0.1.6",
    "text": "0.1.6\n\nBugs Squashed\n\nBump required anthropic version"
  },
  {
    "objectID": "CHANGELOG.html#section-14",
    "href": "CHANGELOG.html#section-14",
    "title": "",
    "section": "0.1.5",
    "text": "0.1.5\n\nNew Features\n\nadd extended thinking (#65), thanks to @comhar\nMake Sonnet 3.7 the default sonnet model (#63)\nAdd model capabilities attributes has_streaming_models, has_temperature_models, and has_system_prompt_models (#57), thanks to @austinvhuang\n\n\n\nBugs Squashed\n\nfix bedrock usage reporting (#60), thanks to @hamelsmu"
  },
  {
    "objectID": "CHANGELOG.html#section-15",
    "href": "CHANGELOG.html#section-15",
    "title": "",
    "section": "0.1.3",
    "text": "0.1.3\n\nNew Features\n\nadd caching to async client too (#55), thanks to @bclavie"
  },
  {
    "objectID": "CHANGELOG.html#section-16",
    "href": "CHANGELOG.html#section-16",
    "title": "",
    "section": "0.1.2",
    "text": "0.1.2\n\nNew Features\n\nAdd continuously-updated cache support to Chat and Client (#54), thanks to @bclavie\nEnhance AsyncChat with improved tool support and message handling (#52), thanks to @ncoop57\nAdd support for user defined types in tool calling functions (#51), thanks to @austinvhuang\nAdd detailed cost breakdown and improve content handling (#49), thanks to @ncoop57"
  },
  {
    "objectID": "CHANGELOG.html#section-17",
    "href": "CHANGELOG.html#section-17",
    "title": "",
    "section": "0.1.1",
    "text": "0.1.1\n\nNew Features\n\nadd structured to async (#48), thanks to @hamelsmu\nadd msglm (#46), thanks to @comhar\nAdd support for new Claude 3.5 Haiku model (#44), thanks to @ncoop57\ntrace history instead of chat response in toolloop (#39), thanks to @comhar"
  },
  {
    "objectID": "CHANGELOG.html#section-18",
    "href": "CHANGELOG.html#section-18",
    "title": "",
    "section": "0.1.0",
    "text": "0.1.0\n\nBreaking Changes\n\ntool_choice is no longer a Chat instance variable; instead it is a parameter to Chat.__call__\n\n\n\nNew Features\n\nAdd temp param to Chat (#38)\n\n\n\nBugs Squashed\n\npr included but not used (#37)\nfix tool use bug (#35), thanks to @comhar"
  },
  {
    "objectID": "CHANGELOG.html#section-19",
    "href": "CHANGELOG.html#section-19",
    "title": "",
    "section": "0.0.10",
    "text": "0.0.10\n\nNew Features\n\nAdd Client.structured (#32)\nUse dict2obj (#30)\nStore tool call result without stringifying (#29)"
  },
  {
    "objectID": "CHANGELOG.html#section-20",
    "href": "CHANGELOG.html#section-20",
    "title": "",
    "section": "0.0.9",
    "text": "0.0.9\n\nNew Features\n\nAsync support (#21)"
  },
  {
    "objectID": "CHANGELOG.html#section-21",
    "href": "CHANGELOG.html#section-21",
    "title": "",
    "section": "0.0.7",
    "text": "0.0.7\n\nNew Features\n\nPrompt caching (#20)\nadd markdown to doc output (#19)\nSupport vscode details tags (#18)\nAdd a cont_pr param to Chat as a “default” prompt #15), thanks to @tom-pollak\n\n\n\nBugs Squashed\n\nExplicit tool_choice causes chat() to call tool twice. (#11)"
  },
  {
    "objectID": "CHANGELOG.html#section-22",
    "href": "CHANGELOG.html#section-22",
    "title": "",
    "section": "0.0.6",
    "text": "0.0.6\n\nNew Features\n\nDefault chat prompt & function calling refactor (#15), thanks to @tom-pollak"
  },
  {
    "objectID": "CHANGELOG.html#section-23",
    "href": "CHANGELOG.html#section-23",
    "title": "",
    "section": "0.0.5",
    "text": "0.0.5\n\nNew Features\n\nBetter support for stop sequences (#12), thanks to @xl0"
  },
  {
    "objectID": "CHANGELOG.html#section-24",
    "href": "CHANGELOG.html#section-24",
    "title": "",
    "section": "0.0.3",
    "text": "0.0.3\n\nNew Features\n\nAmazon Bedrock and Google Vertex support (#7)\n\n\n\nBug Fixes\n\nUpdate model paths for non-beta tool use (#2), thanks to @sarahpannn"
  },
  {
    "objectID": "CHANGELOG.html#section-25",
    "href": "CHANGELOG.html#section-25",
    "title": "",
    "section": "0.0.1",
    "text": "0.0.1\n\nInitial release"
  },
  {
    "objectID": "toolloop.html",
    "href": "toolloop.html",
    "title": "Tool loop",
    "section": "",
    "text": "import os\n# os.environ['ANTHROPIC_LOG'] = 'debug'\nfrom IPython.display import display, Markdown, clear_output\nfrom pprint import pprint\nmodel = models[1]\nmodel\n\n'claude-sonnet-4-20250514'",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#problem-setup",
    "href": "toolloop.html#problem-setup",
    "title": "Tool loop",
    "section": "Problem setup",
    "text": "Problem setup\nAnthropic provides an interesting example of using tools to mock up a hypothetical ordering system. We’re going to take it a step further, and show how we can dramatically simplify the process, whilst completing more complex tasks.\nWe’ll start by defining the same mock customer/order data as in Anthropic’s example, plus create a entity relationship between customers and orders:\n\ndef _get_orders_customers():\n    orders = {\n        \"O1\": dict(id=\"O1\", product=\"Widget A\", quantity=2, price=19.99, status=\"Shipped\"),\n        \"O2\": dict(id=\"O2\", product=\"Gadget B\", quantity=1, price=49.99, status=\"Processing\"),\n        \"O3\": dict(id=\"O3\", product=\"Gadget B\", quantity=2, price=49.99, status=\"Shipped\")}\n\n    customers = {\n        \"C1\": dict(name=\"John Doe\", email=\"john@example.com\", phone=\"123-456-7890\",\n                   orders=[orders['O1'], orders['O2']]),\n        \"C2\": dict(name=\"Jane Smith\", email=\"jane@example.com\", phone=\"987-654-3210\",\n                   orders=[orders['O3']])\n    }\n    return orders, customers\n\n\norders, customers = _get_orders_customers()\n\nWe can now define the same functions from the original example – but note that we don’t need to manually create the large JSON schema, since Claudette handles all that for us automatically from the functions directly. We’ll add some extra functionality to update order details when cancelling too.\n\ndef get_customer_info(\n    customer_id:str # ID of the customer\n): # Customer's name, email, phone number, and list of orders\n    \"Retrieves a customer's information and their orders based on the customer ID\"\n    print(f'- Retrieving customer {customer_id}')\n    return customers.get(customer_id, \"Customer not found\")\n\ndef get_order_details(\n    order_id:str # ID of the order\n): # Order's ID, product name, quantity, price, and order status\n    \"Retrieves the details of a specific order based on the order ID\"\n    print(f'- Retrieving order {order_id}')\n    return orders.get(order_id, \"Order not found\")\n\ndef cancel_order(\n    order_id:str # ID of the order to cancel\n)-&gt;bool: # True if the cancellation is successful\n    \"Cancels an order based on the provided order ID\"\n    print(f'- Cancelling order {order_id}')\n    if order_id not in orders: return False\n    orders[order_id]['status'] = 'Cancelled'\n    return True\n\nWe’re now ready to start our chat.",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#manual-tool-use",
    "href": "toolloop.html#manual-tool-use",
    "title": "Tool loop",
    "section": "Manual tool use",
    "text": "Manual tool use\n\ntools = [get_customer_info, get_order_details, cancel_order]\n\n\nchat = Chat(model, tools=tools)\n\nWe’ll start with the same request as Anthropic showed:\n\nr = chat('Can you tell me the email address for customer C1?')\nprint(r.stop_reason)\nr.content\n\n- Retrieving customer C1\ntool_use\n\n\n[TextBlock(citations=None, text=\"I'll retrieve the customer information for customer C1 to find their email address.\", type='text'),\n ToolUseBlock(id='toolu_01DssUaVrzak7NdUGPj6NDew', input={'customer_id': 'C1'}, name='get_customer_info', type='tool_use')]\n\n\nClaude asks us to use a tool. Claudette handles that automatically by just calling it again:\n\nr = chat()\ncontents(r)\n\n'The email address for customer C1 (John Doe) is john@example.com.'\n\n\nLet’s consider a more complex case than in the original example – what happens if a customer wants to cancel all of their orders?\n\nchat = Chat(model, tools=tools)\nr = chat('Please cancel all orders for customer C1 for me.')\nprint(r.stop_reason)\nr.content\n\n- Retrieving customer C1\ntool_use\n\n\n[TextBlock(citations=None, text=\"I'll help you cancel all orders for customer C1. First, let me retrieve the customer's information to see what orders they have.\", type='text'),\n ToolUseBlock(id='toolu_01KmVciyCHYUuc8fvta1Kodw', input={'customer_id': 'C1'}, name='get_customer_info', type='tool_use')]",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#tool-loop",
    "href": "toolloop.html#tool-loop",
    "title": "Tool loop",
    "section": "Tool loop",
    "text": "Tool loop\nThis is the start of a multi-stage tool use process. Doing it manually step by step is inconvenient, so let’s write a function to handle this for us:\n\nsource\n\nChat.toolloop\n\n Chat.toolloop (pr, max_steps=10, cont_func:&lt;built-\n                infunctioncallable&gt;=&lt;function noop&gt;, final_prompt='You\n                have no more tool uses. Please summarize your findings. If\n                you did not complete your goal please tell the user what\n                further work needs to be done so they can choose how best\n                to proceed.', temp=None, maxtok=4096, maxthinktok=0,\n                stream=False, prefill='', tool_choice:Optional[dict]=None)\n\nAdd prompt pr to dialog and get a response from Claude, automatically following up with tool_use messages\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\n\n\nPrompt to pass to Claude\n\n\nmax_steps\nint\n10\nMaximum number of tool requests to loop through\n\n\ncont_func\ncallable\nnoop\nFunction that stops loop if returns False\n\n\nfinal_prompt\nstr\nYou have no more tool uses. Please summarize your findings. If you did not complete your goal please tell the user what further work needs to be done so they can choose how best to proceed.\nPrompt to add if last message is a tool call\n\n\ntemp\nNoneType\nNone\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\n\n\n\nExported source\n_final_prompt = \"You have no more tool uses. Please summarize your findings. If you did not complete your goal please tell the user what further work needs to be done so they can choose how best to proceed.\"\n\n\n\n\nExported source\n@patch\n@delegates(Chat.__call__)\ndef toolloop(self:Chat,\n             pr, # Prompt to pass to Claude\n             max_steps=10, # Maximum number of tool requests to loop through\n             cont_func:callable=noop, # Function that stops loop if returns False\n             final_prompt=_final_prompt, # Prompt to add if last message is a tool call\n             **kwargs):\n    \"Add prompt `pr` to dialog and get a response from Claude, automatically following up with `tool_use` messages\"\n    @save_iter\n    def _f(o):\n        init_n = len(self.h)\n        r = self(pr, **kwargs)\n        yield r\n        if len(self.last)&gt;1: yield self.last[1]\n        for i in range(max_steps-1):\n            if self.c.stop_reason!='tool_use': break\n            r = self(final_prompt if i==max_steps-2 else None, **kwargs)\n            yield r\n            if len(self.last)&gt;1: yield self.last[1]\n            if not cont_func(*self.h[-3:]): break\n        o.value = self.h[init_n+1:]\n    return _f()\n\n\ntoolloop returns an iterable of assistant messages:\n\nchat = Chat(model, tools=tools)\npr = 'Can you tell me the email address for customer C1?'\nr = chat.toolloop(pr)\nfor o in r: display(o)\n\n- Retrieving customer C1\n\n\nI’ll retrieve the customer information for customer C1 to find their email address.\n\n\nid: msg_01FceFbpqXnDqVz52Fhe8q7V\ncontent: [{'citations': None, 'text': \"I'll retrieve the customer information for customer C1 to find their email address.\", 'type': 'text'}, {'id': 'toolu_01LgZAchaBD41S5cMtfyCcCK', 'input': {'customer_id': 'C1'}, 'name': 'get_customer_info', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 574, 'output_tokens': 76, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': \"{'name': 'John Doe', 'email': 'john@example.com', \"\n                            \"'phone': '123-456-7890', 'orders': [{'id': 'O1', \"\n                            \"'product': 'Widget A', 'quantity': 2, 'price': \"\n                            \"19.99, 'status': 'Shipped'}, {'id': 'O2', \"\n                            \"'product': 'Gadget B', 'quantity': 1, 'price': \"\n                            \"49.99, 'status': 'Processing'}]}\",\n                 'tool_use_id': 'toolu_01LgZAchaBD41S5cMtfyCcCK',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nThe email address for customer C1 (John Doe) is john@example.com.\n\n\nid: msg_01GUwa8tSfNXyArxyp3J1WE7\ncontent: [{'citations': None, 'text': 'The email address for customer C1 (John Doe) is john@example.com.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 787, 'output_tokens': 23, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nThe full set of tool loop messages is stored in the value attr:\n\npprint(r.value, width=120)\n\n[{'content': [{'citations': None,\n               'text': \"I'll retrieve the customer information for customer C1 to find their email address.\",\n               'type': 'text'},\n              {'id': 'toolu_01LgZAchaBD41S5cMtfyCcCK',\n               'input': {'customer_id': 'C1'},\n               'name': 'get_customer_info',\n               'type': 'tool_use'}],\n  'role': 'assistant'},\n {'content': [{'content': \"{'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'orders': \"\n                          \"[{'id': 'O1', 'product': 'Widget A', 'quantity': 2, 'price': 19.99, 'status': 'Shipped'}, \"\n                          \"{'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': \"\n                          \"'Processing'}]}\",\n               'tool_use_id': 'toolu_01LgZAchaBD41S5cMtfyCcCK',\n               'type': 'tool_result'}],\n  'role': 'user'},\n {'content': [{'citations': None,\n               'text': 'The email address for customer C1 (John Doe) is john@example.com.',\n               'type': 'text'}],\n  'role': 'assistant'}]\n\n\nLet’s see if it can handle the multi-stage process now:\n\norders, customers = _get_orders_customers()\n\n\nchat = Chat(model, tools=tools)\nr = chat.toolloop('Please cancel all orders for customer C1 for me.')\nfor o in r: display(o)\n\n- Retrieving customer C1\n\n\nI’ll help you cancel all orders for customer C1. First, let me retrieve the customer’s information to see what orders they have.\n\n\nid: msg_01BB74fAtb9WwLaugJz8vxkR\ncontent: [{'citations': None, 'text': \"I'll help you cancel all orders for customer C1. First, let me retrieve the customer's information to see what orders they have.\", 'type': 'text'}, {'id': 'toolu_01LVxXgG6L5dMagAmqaRS7Tp', 'input': {'customer_id': 'C1'}, 'name': 'get_customer_info', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 574, 'output_tokens': 87, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': \"{'name': 'John Doe', 'email': 'john@example.com', \"\n                            \"'phone': '123-456-7890', 'orders': [{'id': 'O1', \"\n                            \"'product': 'Widget A', 'quantity': 2, 'price': \"\n                            \"19.99, 'status': 'Shipped'}, {'id': 'O2', \"\n                            \"'product': 'Gadget B', 'quantity': 1, 'price': \"\n                            \"49.99, 'status': 'Processing'}]}\",\n                 'tool_use_id': 'toolu_01LVxXgG6L5dMagAmqaRS7Tp',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\n- Cancelling order O1\n- Cancelling order O2\n\n\nI can see that customer C1 (John Doe) has 2 orders: - Order O1: Widget A (Status: Shipped) - Order O2: Gadget B (Status: Processing)\nNow I’ll cancel both orders for you:\n\n\nid: msg_01LPjUKheGbdjZkDHZFdt6r9\ncontent: [{'citations': None, 'text': \"I can see that customer C1 (John Doe) has 2 orders:\\n- Order O1: Widget A (Status: Shipped)\\n- Order O2: Gadget B (Status: Processing)\\n\\nNow I'll cancel both orders for you:\", 'type': 'text'}, {'id': 'toolu_013AgYM2wjo5pYEBwGhFtF2M', 'input': {'order_id': 'O1'}, 'name': 'cancel_order', 'type': 'tool_use'}, {'id': 'toolu_01DXHrux8YresN2xGENV22jg', 'input': {'order_id': 'O2'}, 'name': 'cancel_order', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 798, 'output_tokens': 154, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': 'True',\n                 'tool_use_id': 'toolu_013AgYM2wjo5pYEBwGhFtF2M',\n                 'type': 'tool_result'},\n               { 'content': 'True',\n                 'tool_use_id': 'toolu_01DXHrux8YresN2xGENV22jg',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nPerfect! I’ve successfully canceled all orders for customer C1 (John Doe):\n✅ Order O1 (Widget A) - Canceled ✅ Order O2 (Gadget B) - Canceled\nBoth orders have been canceled successfully. The customer will likely receive confirmation of these cancellations via email at john@example.com.\n\n\nid: msg_01KJtjuMJtnPkfMmotZm3iSX\ncontent: [{'citations': None, 'text': \"Perfect! I've successfully canceled all orders for customer C1 (John Doe):\\n\\n✅ **Order O1** (Widget A) - Canceled\\n✅ **Order O2** (Gadget B) - Canceled\\n\\nBoth orders have been canceled successfully. The customer will likely receive confirmation of these cancellations via email at john@example.com.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1017, 'output_tokens': 83, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nOK Claude thinks the orders were cancelled – let’s check one:\n\nfor o in chat.toolloop('What is the status of order O2?'): display(o)\n\n- Retrieving order O2\n\n\nLet me check the current status of order O2 for you.\n\n\nid: msg_01Viv8k9VnJmQKPef8hzfrqv\ncontent: [{'citations': None, 'text': 'Let me check the current status of order O2 for you.', 'type': 'text'}, {'id': 'toolu_016fGa56xvcA9tmVZ8a9gAZP', 'input': {'order_id': 'O2'}, 'name': 'get_order_details', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1112, 'output_tokens': 73, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': \"{'id': 'O2', 'product': 'Gadget B', 'quantity': \"\n                            \"1, 'price': 49.99, 'status': 'Cancelled'}\",\n                 'tool_use_id': 'toolu_016fGa56xvcA9tmVZ8a9gAZP',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nThe status of order O2 is Cancelled.\nThis confirms that the cancellation we performed earlier was successful. The order for 1 Gadget B (priced at $49.99) has been officially cancelled in the system.\n\n\nid: msg_01EJyBiVtGjTbxyNVP7SF2Bq\ncontent: [{'citations': None, 'text': 'The status of order O2 is **Cancelled**. \\n\\nThis confirms that the cancellation we performed earlier was successful. The order for 1 Gadget B (priced at $49.99) has been officially cancelled in the system.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1241, 'output_tokens': 57, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nIf we run out of tool loops lets see what happens:\n\ndef mydiv(a:float, b:float):\n    \"Divide two numbers\"\n    return a / b\n\n\nchat = Chat(model, tools=[mydiv])\nr = chat.toolloop('Please calculate this sequence using your tools: 43/23454; 652/previous result; 6843/previous result; 321/previous result', max_steps=2)\nfor o in r: display(o)\n\nI’ll calculate this sequence step by step using the division tool.\n\n\nid: msg_01KoEBvzjwwhdoViUXq3C6h3\ncontent: [{'citations': None, 'text': \"I'll calculate this sequence step by step using the division tool.\", 'type': 'text'}, {'id': 'toolu_01LwB9cpaVED1e8JLVzt55yh', 'input': {'a': 43, 'b': 23454}, 'name': 'mydiv', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 424, 'output_tokens': 84, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': '0.001833375969983798',\n                 'tool_use_id': 'toolu_01LwB9cpaVED1e8JLVzt55yh',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nI was able to complete the first two steps of your sequence:\nCompleted calculations: 1. 43 ÷ 23454 = 0.001833375969983798 2. 652 ÷ 0.001833375969983798 = 355628.0930232558\nRemaining work needed: I was unable to complete the full sequence due to tool usage limits. To finish the calculation, you would need:\n\n6843 ÷ 355628.0930232558 (divide 6843 by the result from step 2)\n321 ÷ [result from step 3] (divide 321 by the result from step 3)\n\nYou can either ask me to continue with these remaining calculations in a new conversation, or perform these final two divisions using a calculator with the intermediate result I provided: 355628.0930232558.\n\n\nid: msg_01N6GJ4SZdCXcgG5fA1mb8Pf\ncontent: [{'citations': None, 'text': 'I was able to complete the first two steps of your sequence:\\n\\n**Completed calculations:**\\n1. 43 ÷ 23454 = 0.001833375969983798\\n2. 652 ÷ 0.001833375969983798 = 355628.0930232558\\n\\n**Remaining work needed:**\\nI was unable to complete the full sequence due to tool usage limits. To finish the calculation, you would need:\\n\\n3. 6843 ÷ 355628.0930232558 (divide 6843 by the result from step 2)\\n4. 321 ÷ [result from step 3] (divide 321 by the result from step 3)\\n\\nYou can either ask me to continue with these remaining calculations in a new conversation, or perform these final two divisions using a calculator with the intermediate result I provided: 355628.0930232558.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 681, 'output_tokens': 212, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat = Chat(model, tools=mydiv)\nr = chat.toolloop('Try dividing 1 by 0 and see what the error result is')\nfor o in r: display(o)\n\nI’ll try dividing 1 by 0 to see what error occurs:\n\n\nid: msg_011h7rWf61BEm5rgE9cUkc5P\ncontent: [{'citations': None, 'text': \"I'll try dividing 1 by 0 to see what error occurs:\", 'type': 'text'}, {'id': 'toolu_01TRpZtRfRopM86K97WdyL33', 'input': {'a': 1, 'b': 0}, 'name': 'mydiv', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 409, 'output_tokens': 88, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': 'Traceback (most recent call last):\\n'\n                            '  File '\n                            '\"/Users/jhoward/aai-ws/toolslm/toolslm/funccall.py\", '\n                            'line 203, in call_func\\n'\n                            '    try: return func(**fc_inputs)\\n'\n                            '                ^^^^^^^^^^^^^^^^^\\n'\n                            '  File '\n                            '\"/Users/jhoward/aai-ws/claudette/claudette/core.py\", '\n                            'line 403, in wrapper\\n'\n                            '    return func(*new_args, **new_kwargs)\\n'\n                            '           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n'\n                            '  File '\n                            '\"/var/folders/51/b2_szf2945n072c0vj2cyty40000gn/T/ipykernel_50014/246724137.py\", '\n                            'line 3, in mydiv\\n'\n                            '    return a / b\\n'\n                            '           ~~^~~\\n'\n                            'ZeroDivisionError: division by zero\\n',\n                 'tool_use_id': 'toolu_01TRpZtRfRopM86K97WdyL33',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nAs expected, dividing 1 by 0 resulted in a ZeroDivisionError: division by zero error. This is the standard Python error that occurs when attempting to divide any number by zero, since division by zero is mathematically undefined.\nThe error traceback shows that the error occurred in the mydiv function at the line return a / b when a=1 and b=0.\n\n\nid: msg_013MaeWRfrzKFmBktVk4Tf1Q\ncontent: [{'citations': None, 'text': 'As expected, dividing 1 by 0 resulted in aZeroDivisionError: division by zeroerror. This is the standard Python error that occurs when attempting to divide any number by zero, since division by zero is mathematically undefined.\\n\\nThe error traceback shows that the error occurred in themydivfunction at the linereturn a / bwhena=1andb=0.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 701, 'output_tokens': 96, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#streaming",
    "href": "toolloop.html#streaming",
    "title": "Tool loop",
    "section": "Streaming",
    "text": "Streaming\n\norders, customers = _get_orders_customers()\n\n\nchat = Chat(model, tools=tools)\nr = chat.toolloop('Please cancel all orders for customer C1 for me.', stream=True)\nfor o in r:\n    if isinstance(o, (dict,Message,list)): print(o)\n    else: \n        for x in o: print(x, end='')\n        display(o.value)\n\nI'll help you cancel all orders for customer C1. First, let me retrieve the customer's information to see what orders they have.- Retrieving customer C1\n\n\nI’ll help you cancel all orders for customer C1. First, let me retrieve the customer’s information to see what orders they have.\n\n\nid: msg_01Jyn1EKFLTxMDa4rCF8bu5J\ncontent: [{'citations': None, 'text': \"I'll help you cancel all orders for customer C1. First, let me retrieve the customer's information to see what orders they have.\", 'type': 'text'}, {'id': 'toolu_01E5czFAs5ZUQS3mmrfdr4rd', 'input': {'customer_id': 'C1'}, 'name': 'get_customer_info', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 574, 'output_tokens': 87, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_01E5czFAs5ZUQS3mmrfdr4rd', 'content': \"{'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'orders': [{'id': 'O1', 'product': 'Widget A', 'quantity': 2, 'price': 19.99, 'status': 'Shipped'}, {'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Processing'}]}\"}]}\nI can see that customer C1 (John Doe) has 2 orders:\n- Order O1: Widget A (Status: Shipped)\n- Order O2: Gadget B (Status: Processing)\n\nNow I'll cancel both orders for you:- Cancelling order O1\n- Cancelling order O2\n\n\nI can see that customer C1 (John Doe) has 2 orders: - Order O1: Widget A (Status: Shipped) - Order O2: Gadget B (Status: Processing)\nNow I’ll cancel both orders for you:\n\n\nid: msg_01XYHjJAXTyHGF4zvzcZqHqp\ncontent: [{'citations': None, 'text': \"I can see that customer C1 (John Doe) has 2 orders:\\n- Order O1: Widget A (Status: Shipped)\\n- Order O2: Gadget B (Status: Processing)\\n\\nNow I'll cancel both orders for you:\", 'type': 'text'}, {'id': 'toolu_01BesZhbP28GK2iQZp5fLNjj', 'input': {'order_id': 'O1'}, 'name': 'cancel_order', 'type': 'tool_use'}, {'id': 'toolu_01SLArB7rm7MLzNvrp3iDDxd', 'input': {'order_id': 'O2'}, 'name': 'cancel_order', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 798, 'output_tokens': 154, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_01BesZhbP28GK2iQZp5fLNjj', 'content': 'True'}, {'type': 'tool_result', 'tool_use_id': 'toolu_01SLArB7rm7MLzNvrp3iDDxd', 'content': 'True'}]}\nPerfect! I've successfully canceled all orders for customer C1 (John Doe):\n\n✅ **Order O1** (Widget A) - Canceled\n✅ **Order O2** (Gadget B) - Canceled\n\nBoth orders have been canceled successfully. The customer will likely receive confirmation of these cancellations via email at john@example.com.\n\n\nPerfect! I’ve successfully canceled all orders for customer C1 (John Doe):\n✅ Order O1 (Widget A) - Canceled ✅ Order O2 (Gadget B) - Canceled\nBoth orders have been canceled successfully. The customer will likely receive confirmation of these cancellations via email at john@example.com.\n\n\nid: msg_012Fh7FuLy1aQ7Aw2NZoFeh8\ncontent: [{'citations': None, 'text': \"Perfect! I've successfully canceled all orders for customer C1 (John Doe):\\n\\n✅ **Order O1** (Widget A) - Canceled\\n✅ **Order O2** (Gadget B) - Canceled\\n\\nBoth orders have been canceled successfully. The customer will likely receive confirmation of these cancellations via email at john@example.com.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1017, 'output_tokens': 83, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#async-tool-loop",
    "href": "toolloop.html#async-tool-loop",
    "title": "Tool loop",
    "section": "Async tool loop",
    "text": "Async tool loop\n\nsource\n\nAsyncChat.toolloop\n\n AsyncChat.toolloop (pr, max_steps=10, cont_func:&lt;built-\n                     infunctioncallable&gt;=&lt;function noop&gt;,\n                     final_prompt='You have no more tool uses. Please\n                     summarize your findings. If you did not complete your\n                     goal please tell the user what further work needs to\n                     be done so they can choose how best to proceed.',\n                     temp=None, maxtok=4096, maxthinktok=0, stream=False,\n                     prefill='',\n                     tool_choice:Union[str,bool,dict,NoneType]=None)\n\nAdd prompt pr to dialog and get a response from Claude, automatically following up with tool_use messages\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\n\n\nPrompt to pass to Claude\n\n\nmax_steps\nint\n10\nMaximum number of tool requests to loop through\n\n\ncont_func\ncallable\nnoop\nFunction that stops loop if returns False\n\n\nfinal_prompt\nstr\nYou have no more tool uses. Please summarize your findings. If you did not complete your goal please tell the user what further work needs to be done so they can choose how best to proceed.\nPrompt to add if last message is a tool call\n\n\ntemp\nNoneType\nNone\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\ntool_choice\nUnion\nNone\nOptionally force use of some tool\n\n\n\n\n\nExported source\n@patch\n@delegates(AsyncChat.__call__)\ndef toolloop(\n    self: AsyncChat,\n    pr, # Prompt to pass to Claude\n    max_steps=10, # Maximum number of tool requests to loop through\n    cont_func: callable = noop, # Function that stops loop if returns False\n    final_prompt = _final_prompt, # Prompt to add if last message is a tool call\n    **kwargs\n):\n    \"Add prompt `pr` to dialog and get a response from Claude, automatically following up with `tool_use` messages\"\n    @save_iter\n    async def _f(o):\n        init_n = len(self.h)\n        r = await self(pr, **kwargs)\n        yield r\n        if len(self.last)&gt;1: yield self.last[1]\n        for i in range(max_steps-1):\n            if self.c.stop_reason != 'tool_use': break\n            r = await self(final_prompt if i==max_steps-2 else None, **kwargs)\n            yield r\n            if len(self.last)&gt;1: yield self.last[1]\n            if not cont_func(*self.h[-3:]): break\n        o.value = self.h[init_n+1:]\n    return _f()\n\n\n\norders, customers = _get_orders_customers()\n\n\ntools = [get_customer_info, get_order_details, cancel_order]\nchat = AsyncChat(model, tools=tools)\nr = chat.toolloop('Can you tell me the email address for customer C1?')\nasync for o in r: print(o)\n\n- Retrieving customer C1\nMessage(id='msg_011k575B2yD12nYXtkwQ6gTg', content=[TextBlock(citations=None, text=\"I'll retrieve the customer information for customer C1 to find their email address.\", type='text'), ToolUseBlock(id='toolu_01Qh5FvPYBR2L2oQMebNH1Ey', input={'customer_id': 'C1'}, name='get_customer_info', type='tool_use')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 574; Out: 76; Cache create: 0; Cache read: 0; Total Tokens: 650; Search: 0)\n{'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_01Qh5FvPYBR2L2oQMebNH1Ey', 'content': \"{'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'orders': [{'id': 'O1', 'product': 'Widget A', 'quantity': 2, 'price': 19.99, 'status': 'Shipped'}, {'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Processing'}]}\"}]}\nMessage(id='msg_011MhL2oQ1L3nWzXDxFDJYuA', content=[TextBlock(citations=None, text='The email address for customer C1 (John Doe) is john@example.com.', type='text')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=In: 787; Out: 23; Cache create: 0; Cache read: 0; Total Tokens: 810; Search: 0)\n\n\n\npprint(r.value)\n\n[{'content': [{'citations': None,\n               'text': \"I'll retrieve the customer information for customer C1 \"\n                       'to find their email address.',\n               'type': 'text'},\n              {'id': 'toolu_01EKTxYukVVQtAExBzenW3d7',\n               'input': {'customer_id': 'C1'},\n               'name': 'get_customer_info',\n               'type': 'tool_use'}],\n  'role': 'assistant'},\n {'content': [{'content': \"{'name': 'John Doe', 'email': 'john@example.com', \"\n                          \"'phone': '123-456-7890', 'orders': [{'id': 'O1', \"\n                          \"'product': 'Widget A', 'quantity': 2, 'price': \"\n                          \"19.99, 'status': 'Shipped'}, {'id': 'O2', \"\n                          \"'product': 'Gadget B', 'quantity': 1, 'price': \"\n                          \"49.99, 'status': 'Processing'}]}\",\n               'tool_use_id': 'toolu_01EKTxYukVVQtAExBzenW3d7',\n               'type': 'tool_result'}],\n  'role': 'user'},\n {'content': [{'citations': None,\n               'text': 'The email address for customer C1 (John Doe) is '\n                       'john@example.com.',\n               'type': 'text'}],\n  'role': 'assistant'}]",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#code-interpreter",
    "href": "toolloop.html#code-interpreter",
    "title": "Tool loop",
    "section": "Code interpreter",
    "text": "Code interpreter\nHere is an example of using toolloop to implement a simple code interpreter with additional tools.\n\nfrom toolslm.shell import get_shell\nfrom fastcore.meta import delegates\nimport traceback\n\n\n@delegates()\nclass CodeChat(Chat):\n    imps = 'os, warnings, time, json, re, math, collections, itertools, functools, dateutil, datetime, string, types, copy, pprint, enum, numbers, decimal, fractions, random, operator, typing, dataclasses'\n    def __init__(self, model: Optional[str] = None, ask:bool=True, **kwargs):\n        super().__init__(model=model, **kwargs)\n        self.ask = ask\n        self.tools.append(self.run_cell)\n        self.shell = get_shell()\n        self.shell.run_cell('import '+self.imps)\n\nWe have one additional parameter to creating a CodeChat beyond what we pass to Chat, which is ask – if that’s True, we’ll prompt the user before running code.\n\n@patch\ndef run_cell(\n    self:CodeChat,\n    code:str,   # Code to execute in persistent IPython session\n)-&gt;str:\n    \"\"\"Asks user for permission, and if provided, executes python `code` using persistent IPython session.\n    Returns: Result of expression on last line (if exists); '#DECLINED#' if user declines request to execute\"\"\"\n    confirm = f'Press Enter to execute, or enter \"n\" to skip?\\n```\\n{code}\\n```\\n'\n    if self.ask and input(confirm): return '#DECLINED#'\n    try: res = self.shell.run_cell(code)\n    except Exception as e: return traceback.format_exc()\n    return res.stdout if res.result is None else res.result\n\nWe just pass along requests to run code to the shell’s implementation. Claude often prints results instead of just using the last expression, so we capture stdout in those cases.\n\nsp = f'''You are a knowledgable assistant. Do not use tools unless needed.\nDon't do complex calculations yourself -- use code for them.\nThe following modules are pre-imported for `run_cell` automatically:\n\n{CodeChat.imps}\n\nNever mention what tools you are using. Note that `run_cell` interpreter state is *persistent* across calls.\n\nIf a tool returns `#DECLINED#` report to the user that the attempt was declined and no further progress can be made.\nIn that case, do *not* attempt to run any further code -- stop execution *IMMEDIATELY* and tell the user it was declined.\n\nWhen using a tool, *ALWAYS* before every use of every tool, tell the user what you will be doing and why.'''\n\n\ndef get_user()-&gt;str:\n    \"Get the username of the user running this session\"\n    print(\"Looking up username\")\n    return 'Jeremy'\n\nIn order to test out multi-stage tool use, we create a mock function that Claude can call to get the current username.\n\nmodel = models[1]\nchat = CodeChat(model, tools=[get_user], sp=sp, ask=True, temp=0.3)\n\nProviding a callable to toolloop’s trace_func lets us print out information during the loop:\ntoolloop’s cont_func callable let’s us provide a function which, if it returns False, stops the loop:\n\ndef _cont_decline(call, resp, asst): return resp['content'][0]['content'] != '#DECLINED#'\n\nNow we can try our code interpreter. We start by asking for a function to be created, which we’ll use in the next prompt to test that the interpreter is persistent.\n\npr = '''Create a 1-line function `checksum` for a string `s`,\nthat multiplies together the ascii values of each character in `s` using `reduce`.'''\nfor o in chat.toolloop(pr, cont_func=_cont_decline): display(o)\n\nPress Enter to execute, or enter \"n\" to skip?\n```\n# Create the 1-line checksum function using reduce\nchecksum = lambda s: functools.reduce(operator.mul, (ord(c) for c in s), 1)\n\n# Test it with a few examples\nprint(\"checksum('abc'):\", checksum('abc'))\nprint(\"checksum('hello'):\", checksum('hello'))\nprint(\"checksum('A'):\", checksum('A'))\nprint(\"checksum(''):\", checksum(''))  # Empty string test\n```\n\n\n\nI’ll create a 1-line checksum function that multiplies the ASCII values of characters in a string using reduce.\n\n\nid: msg_01PWJZzxGGJJg1Ywu5jXxZXC\ncontent: [{'citations': None, 'text': \"I'll create a 1-line checksum function that multiplies the ASCII values of characters in a string usingreduce.\", 'type': 'text'}, {'id': 'toolu_01PnYwW6vG44rqUvzUU2FsQm', 'input': {'code': '# Create the 1-line checksum function using reduce\\nchecksum = lambda s: functools.reduce(operator.mul, (ord(c) for c in s), 1)\\n\\n# Test it with a few examples\\nprint(\"checksum(\\'abc\\'):\", checksum(\\'abc\\'))\\nprint(\"checksum(\\'hello\\'):\", checksum(\\'hello\\'))\\nprint(\"checksum(\\'A\\'):\", checksum(\\'A\\'))\\nprint(\"checksum(\\'\\'):\", checksum(\\'\\'))  # Empty string test'}, 'name': 'run_cell', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 744, 'output_tokens': 188, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': \"checksum('abc'): 941094\\n\"\n                            \"checksum('hello'): 13599570816\\n\"\n                            \"checksum('A'): 65\\n\"\n                            \"checksum(''): 1\\n\",\n                 'tool_use_id': 'toolu_01PnYwW6vG44rqUvzUU2FsQm',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nPerfect! Here’s the 1-line checksum function:\nchecksum = lambda s: functools.reduce(operator.mul, (ord(c) for c in s), 1)\nThis function: - Uses functools.reduce with operator.mul to multiply values together - Converts each character to its ASCII value using ord(c) - Uses a generator expression (ord(c) for c in s) to get ASCII values - Starts with an initial value of 1 (the identity for multiplication) - Returns 1 for empty strings (since there are no characters to multiply)\nThe function works by multiplying together all the ASCII values of the characters in the input string s.\n\n\nid: msg_013yM4PQWnPxso5Rt38juKXz\ncontent: [{'citations': None, 'text': \"Perfect! Here's the 1-line checksum function:\\n\\n```python\\nchecksum = lambda s: functools.reduce(operator.mul, (ord(c) for c in s), 1)\\n```\\n\\nThis function:\\n- Usesfunctools.reducewithoperator.multo multiply values together\\n- Converts each character to its ASCII value usingord(c)\\n- Uses a generator expression(ord(c) for c in s)to get ASCII values\\n- Starts with an initial value of1(the identity for multiplication)\\n- Returns1for empty strings (since there are no characters to multiply)\\n\\nThe function works by multiplying together all the ASCII values of the characters in the input strings.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 980, 'output_tokens': 169, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nBy asking for a calculation to be done on the username, we force it to use multiple steps:\n\npr = 'Use it to get the checksum of the username of this session.'\nfor o in chat.toolloop(pr): display(o)\n\nLooking up username\n\n\nI’ll first get the username of this session, then use the checksum function to calculate its checksum.\n\n\nid: msg_01J8vq1FbUEE4Wufx8eBmcRB\ncontent: [{'citations': None, 'text': \"I'll first get the username of this session, then use the checksum function to calculate its checksum.\", 'type': 'text'}, {'id': 'toolu_019D16qo7yccjKkePgMY7dGH', 'input': {}, 'name': 'get_user', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1166, 'output_tokens': 59, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': 'Jeremy',\n                 'tool_use_id': 'toolu_019D16qo7yccjKkePgMY7dGH',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nPress Enter to execute, or enter \"n\" to skip?\n```\n# Get the checksum of the username\nusername = \"Jeremy\"\nresult = checksum(username)\nprint(f\"Username: {username}\")\nprint(f\"Checksum: {result}\")\n\n# Let's also show the ASCII values being multiplied for clarity\nascii_values = [ord(c) for c in username]\nprint(f\"ASCII values: {ascii_values}\")\nprint(f\"Multiplication: {' × '.join(map(str, ascii_values))} = {result}\")\n```\n\n\n\nNow I’ll calculate the checksum of the username “Jeremy”:\n\n\nid: msg_01MrJGHxAqVtnPx1qZX8esp2\ncontent: [{'citations': None, 'text': 'Now I\\'ll calculate the checksum of the username \"Jeremy\":', 'type': 'text'}, {'id': 'toolu_01K1BquqthoQtCzN9ANc1mau', 'input': {'code': '# Get the checksum of the username\\nusername = \"Jeremy\"\\nresult = checksum(username)\\nprint(f\"Username: {username}\")\\nprint(f\"Checksum: {result}\")\\n\\n# Let\\'s also show the ASCII values being multiplied for clarity\\nascii_values = [ord(c) for c in username]\\nprint(f\"ASCII values: {ascii_values}\")\\nprint(f\"Multiplication: {\\' × \\'.join(map(str, ascii_values))} = {result}\")'}, 'name': 'run_cell', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1238, 'output_tokens': 179, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': 'Username: Jeremy\\n'\n                            'Checksum: 1134987783204\\n'\n                            'ASCII values: [74, 101, 114, 101, 109, 121]\\n'\n                            'Multiplication: 74 × 101 × 114 × 101 × 109 × 121 '\n                            '= 1134987783204\\n',\n                 'tool_use_id': 'toolu_01K1BquqthoQtCzN9ANc1mau',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nThe checksum of the username “Jeremy” is 1,134,987,783,204.\nThis is calculated by multiplying the ASCII values: 74 × 101 × 114 × 101 × 109 × 121 = 1,134,987,783,204.\n\n\nid: msg_018DaJfwK2rd3nueKVYu9m6A\ncontent: [{'citations': None, 'text': 'The checksum of the username \"Jeremy\" is **1,134,987,783,204**.\\n\\nThis is calculated by multiplying the ASCII values: 74 × 101 × 114 × 101 × 109 × 121 = 1,134,987,783,204.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1500, 'output_tokens': 70, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "text_editor.html",
    "href": "text_editor.html",
    "title": "Text Editor",
    "section": "",
    "text": "source",
    "crumbs": [
      "Text Editor"
    ]
  },
  {
    "objectID": "text_editor.html#explanation-of-your-_quarto.yml-file",
    "href": "text_editor.html#explanation-of-your-_quarto.yml-file",
    "title": "Text Editor",
    "section": "Explanation of Your _quarto.yml File",
    "text": "Explanation of Your _quarto.yml File\nYour _quarto.yml file is a configuration file for Quarto, a scientific and technical publishing system. This file is specifically set up to generate a documentation website for your claudette project. Here’s what each section does:\n\nProject Configuration\nproject:\n  type: website\n  resources: \n    - \"*.txt\"\n  preview:\n    port: 3000\n    browser: false\n\ntype: website: Tells Quarto to build a website (rather than a book, document, etc.)\nresources: Includes all .txt files in the website output\npreview: Sets up local development server on port 3000 without auto-opening browser\n\n\n\nHTML Format Settings\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    highlight-style: arrow\n\ntheme: cosmo: Uses the “Cosmo” Bootstrap theme for styling\ncss: styles.css: Applies custom CSS from your styles.css file\ntoc: true: Enables table of contents on pages\ncode-tools: true: Adds interactive code tools (copy, view source, etc.)\nCode styling: Sets background, blue left border (#31BAE9), and “arrow” syntax highlighting\n\n\n\nLayout Configuration\ngrid:\n  sidebar-width: 180px\n  body-width: 1800px\n  margin-width: 150px\n  gutter-width: 1.0rem\nkeep-md: true\n\nGrid system: Defines a wide layout (1800px body) with specific sidebar and margin widths\nkeep-md: true: Preserves intermediate Markdown files during rendering\n\n\n\nWebsite Features\nwebsite:\n  twitter-card: true\n  open-graph: true\n  repo-actions: [issue]\n  navbar:\n    background: primary\n    search: true\n  sidebar:\n    style: floating\n\nSocial media: Enables Twitter cards and Open Graph meta tags for link previews\nrepo-actions: [issue]: Adds “Report an issue” link to pages\nNavigation: Primary-colored navbar with search functionality\nsidebar: floating: Creates a floating sidebar style\n\n\n\nMetadata Integration\nmetadata-files:\n  - nbdev.yml\n  - sidebar.yml\n\nImports additional configuration from nbdev.yml (which I can see contains site title, URL, and repo info)\nReferences sidebar.yml (though this file doesn’t exist in your directory)\n\n\n\nPurpose\nThis configuration is designed for nbdev, a system that creates documentation websites from Jupyter notebooks. It’s set up to: 1. Convert your Jupyter notebooks (like 00_core.ipynb, 01_toolloop.ipynb, etc.) into web pages 2. Create a professional documentation site for the claudette library 3. Publish to https://claudette.answer.ai/ (as specified in nbdev.yml) 4. Provide a wide layout suitable for code documentation with syntax highlighting and interactive features\nThe setup suggests this is a Python library documentation site built from Jupyter notebooks using the nbdev workflow.\n\n\nid: msg_01RYHyNnmymn6hBXMHQNS1ck\ncontent: [{'citations': None, 'text': '## Explanation of Your_quarto.ymlFile\\n\\nYour_quarto.ymlfile is a configuration file for **Quarto**, a scientific and technical publishing system. This file is specifically set up to generate a documentation website for yourclaudetteproject. Here\\'s what each section does:\\n\\n### **Project Configuration**\\n```yaml\\nproject:\\n  type: website\\n  resources: \\n    - \"*.txt\"\\n  preview:\\n    port: 3000\\n    browser: false\\n```\\n- **type: website**: Tells Quarto to build a website (rather than a book, document, etc.)\\n- **resources**: Includes all.txtfiles in the website output\\n- **preview**: Sets up local development server on port 3000 without auto-opening browser\\n\\n### **HTML Format Settings**\\n```yaml\\nformat:\\n  html:\\n    theme: cosmo\\n    css: styles.css\\n    toc: true\\n    code-tools: true\\n    code-block-bg: true\\n    code-block-border-left: \"#31BAE9\"\\n    highlight-style: arrow\\n```\\n- **theme: cosmo**: Uses the \"Cosmo\" Bootstrap theme for styling\\n- **css: styles.css**: Applies custom CSS from yourstyles.cssfile\\n- **toc: true**: Enables table of contents on pages\\n- **code-tools: true**: Adds interactive code tools (copy, view source, etc.)\\n- **Code styling**: Sets background, blue left border (#31BAE9), and \"arrow\" syntax highlighting\\n\\n### **Layout Configuration**\\n```yaml\\ngrid:\\n  sidebar-width: 180px\\n  body-width: 1800px\\n  margin-width: 150px\\n  gutter-width: 1.0rem\\nkeep-md: true\\n```\\n- **Grid system**: Defines a wide layout (1800px body) with specific sidebar and margin widths\\n- **keep-md: true**: Preserves intermediate Markdown files during rendering\\n\\n### **Website Features**\\n```yaml\\nwebsite:\\n  twitter-card: true\\n  open-graph: true\\n  repo-actions: [issue]\\n  navbar:\\n    background: primary\\n    search: true\\n  sidebar:\\n    style: floating\\n```\\n- **Social media**: Enables Twitter cards and Open Graph meta tags for link previews\\n- **repo-actions: [issue]**: Adds \"Report an issue\" link to pages\\n- **Navigation**: Primary-colored navbar with search functionality\\n- **sidebar: floating**: Creates a floating sidebar style\\n\\n### **Metadata Integration**\\n```yaml\\nmetadata-files:\\n  - nbdev.yml\\n  - sidebar.yml\\n```\\n- Imports additional configuration fromnbdev.yml(which I can see contains site title, URL, and repo info)\\n- Referencessidebar.yml(though this file doesn\\'t exist in your directory)\\n\\n### **Purpose**\\nThis configuration is designed for **nbdev**, a system that creates documentation websites from Jupyter notebooks. It\\'s set up to:\\n1. Convert your Jupyter notebooks (like00_core.ipynb,01_toolloop.ipynb, etc.) into web pages\\n2. Create a professional documentation site for theclaudettelibrary\\n3. Publish tohttps://claudette.answer.ai/(as specified innbdev.yml)\\n4. Provide a wide layout suitable for code documentation with syntax highlighting and interactive features\\n\\nThe setup suggests this is a Python library documentation site built from Jupyter notebooks using the nbdev workflow.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 3525, 'output_tokens': 826, 'server_tool_use': None, 'service_tier': 'standard'}\nsteps: [{'role': 'assistant', 'content': [{'citations': None, 'text': \"I'll help you understand what your_quarto.ymlfile does. Let me first locate and examine the file.\", 'type': 'text'}, {'id': 'toolu_01WKRWYwHSGvKDcnsGViKKic', 'input': {'command': 'view', 'path': '.'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_01WKRWYwHSGvKDcnsGViKKic', 'content': 'Directory contents of /Users/jhoward/aai-ws/claudette:\\n/Users/jhoward/aai-ws/claudette/claudette\\n/Users/jhoward/aai-ws/claudette/llms.txt\\n/Users/jhoward/aai-ws/claudette/00_core.ipynb\\n/Users/jhoward/aai-ws/claudette/_quarto.yml\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info\\n/Users/jhoward/aai-ws/claudette/tools\\n/Users/jhoward/aai-ws/claudette/LICENSE\\n/Users/jhoward/aai-ws/claudette/styles.css\\n/Users/jhoward/aai-ws/claudette/CHANGELOG.md\\n/Users/jhoward/aai-ws/claudette/dist\\n/Users/jhoward/aai-ws/claudette/CNAME\\n/Users/jhoward/aai-ws/claudette/llms-ctx-full.txt\\n/Users/jhoward/aai-ws/claudette/pyproject.toml\\n/Users/jhoward/aai-ws/claudette/02_async.ipynb\\n/Users/jhoward/aai-ws/claudette/MANIFEST.in\\n/Users/jhoward/aai-ws/claudette/apilist.txt\\n/Users/jhoward/aai-ws/claudette/03_text_editor.ipynb\\n/Users/jhoward/aai-ws/claudette/README.md\\n/Users/jhoward/aai-ws/claudette/samples\\n/Users/jhoward/aai-ws/claudette/setup.py\\n/Users/jhoward/aai-ws/claudette/01_toolloop.ipynb\\n/Users/jhoward/aai-ws/claudette/nbdev.yml\\n/Users/jhoward/aai-ws/claudette/llms-ctx.txt\\n/Users/jhoward/aai-ws/claudette/README.txt\\n/Users/jhoward/aai-ws/claudette/settings.ini\\n/Users/jhoward/aai-ws/claudette/test.txt\\n/Users/jhoward/aai-ws/claudette/build\\n/Users/jhoward/aai-ws/claudette/CHANGELOG.bak\\n/Users/jhoward/aai-ws/claudette/index.ipynb\\n/Users/jhoward/aai-ws/claudette/claudette/toolloop.py\\n/Users/jhoward/aai-ws/claudette/claudette/_modidx.py\\n/Users/jhoward/aai-ws/claudette/claudette/__init__.py\\n/Users/jhoward/aai-ws/claudette/claudette/core.py\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__\\n/Users/jhoward/aai-ws/claudette/claudette/text_editor.py\\n/Users/jhoward/aai-ws/claudette/claudette/asink.py\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/PKG-INFO\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/not-zip-safe\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/SOURCES.txt\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/entry_points.txt\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/requires.txt\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/top_level.txt\\n/Users/jhoward/aai-ws/claudette/claudette.egg-info/dependency_links.txt\\n/Users/jhoward/aai-ws/claudette/tools/refresh_llm_docs.sh\\n/Users/jhoward/aai-ws/claudette/dist/claudette-0.1.10-py3-none-any.whl\\n/Users/jhoward/aai-ws/claudette/dist/claudette-0.1.10.tar.gz\\n/Users/jhoward/aai-ws/claudette/samples/puppy.jpg\\n/Users/jhoward/aai-ws/claudette/build/bdist.macosx-11.0-arm64\\n/Users/jhoward/aai-ws/claudette/build/lib\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/toolloop.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/_modidx.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/core.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/text_editor.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/asink.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/claudette/__pycache__/__init__.cpython-312.pyc\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/toolloop.py\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/_modidx.py\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/__init__.py\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/core.py\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/text_editor.py\\n/Users/jhoward/aai-ws/claudette/build/lib/claudette/asink.py'}]}, {'role': 'assistant', 'content': [{'citations': None, 'text': 'Now let me examine the_quarto.ymlfile:', 'type': 'text'}, {'id': 'toolu_014rHW8HsYQRQpgkAW3DkpEW', 'input': {'command': 'view', 'path': '/_Users/jhoward/aai-ws/claudette/_quarto.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_014rHW8HsYQRQpgkAW3DkpEW', 'content': 'Error: File not found: /_Users/jhoward/aai-ws/claudette/_quarto.yml'}]}, {'role': 'assistant', 'content': [{'id': 'toolu_012hEVqDyF9h3FRBczTz379x', 'input': {'command': 'view', 'path': '/Users/jhoward/aai-ws/claudette/_quarto.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_012hEVqDyF9h3FRBczTz379x', 'content': 'project:\\n  type: website\\n  resources: \\n    - \"*.txt\"\\n  preview:\\n    port: 3000\\n    browser: false\\n\\nformat:\\n  html:\\n    theme: cosmo\\n    css: styles.css\\n    toc: true\\n    code-tools: true\\n    code-block-bg: true\\n    code-block-border-left: \"#31BAE9\"\\n    highlight-style: arrow\\n    grid:\\n      sidebar-width: 180px\\n      body-width: 1800px\\n      margin-width: 150px\\n      gutter-width: 1.0rem\\n    keep-md: true\\n  commonmark: default\\n\\nwebsite:\\n  twitter-card: true\\n  open-graph: true\\n  repo-actions: [issue]\\n  navbar:\\n    background: primary\\n    search: true\\n  sidebar:\\n    style: floating\\n\\nmetadata-files:\\n  - nbdev.yml\\n  - sidebar.yml\\n'}]}, {'role': 'assistant', 'content': [{'citations': None, 'text': 'Now let me also check if there are any related configuration files to better understand the context:', 'type': 'text'}, {'id': 'toolu_01DfXFLrS1auNy2EyoXRCDiV', 'input': {'command': 'view', 'path': '/Users/jhoward/aai-ws/claudette/nbdev.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_01DfXFLrS1auNy2EyoXRCDiV', 'content': 'project:\\n  output-dir: _docs\\n\\nwebsite:\\n  title: \"claudette\"\\n  site-url: \"https://claudette.answer.ai/\"\\n  description: \"Claudette is Claude\\'s friend\"\\n  repo-branch: main\\n  repo-url: \"https://github.com/AnswerDotAI/claudette\"'}]}, {'role': 'assistant', 'content': [{'id': 'toolu_0171znvzm9oNw2ApYGhhFfrL', 'input': {'command': 'view', 'path': '/Users/jhoward/aai-ws/claudette/sidebar.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'tool_use_id': 'toolu_0171znvzm9oNw2ApYGhhFfrL', 'content': 'Error: File not found: /Users/jhoward/aai-ws/claudette/sidebar.yml'}]}, {'role': 'assistant', 'content': [{'citations': None, 'text': '## Explanation of Your_quarto.ymlFile\\n\\nYour_quarto.ymlfile is a configuration file for **Quarto**, a scientific and technical publishing system. This file is specifically set up to generate a documentation website for yourclaudetteproject. Here\\'s what each section does:\\n\\n### **Project Configuration**\\n```yaml\\nproject:\\n  type: website\\n  resources: \\n    - \"*.txt\"\\n  preview:\\n    port: 3000\\n    browser: false\\n```\\n- **type: website**: Tells Quarto to build a website (rather than a book, document, etc.)\\n- **resources**: Includes all.txtfiles in the website output\\n- **preview**: Sets up local development server on port 3000 without auto-opening browser\\n\\n### **HTML Format Settings**\\n```yaml\\nformat:\\n  html:\\n    theme: cosmo\\n    css: styles.css\\n    toc: true\\n    code-tools: true\\n    code-block-bg: true\\n    code-block-border-left: \"#31BAE9\"\\n    highlight-style: arrow\\n```\\n- **theme: cosmo**: Uses the \"Cosmo\" Bootstrap theme for styling\\n- **css: styles.css**: Applies custom CSS from yourstyles.cssfile\\n- **toc: true**: Enables table of contents on pages\\n- **code-tools: true**: Adds interactive code tools (copy, view source, etc.)\\n- **Code styling**: Sets background, blue left border (#31BAE9), and \"arrow\" syntax highlighting\\n\\n### **Layout Configuration**\\n```yaml\\ngrid:\\n  sidebar-width: 180px\\n  body-width: 1800px\\n  margin-width: 150px\\n  gutter-width: 1.0rem\\nkeep-md: true\\n```\\n- **Grid system**: Defines a wide layout (1800px body) with specific sidebar and margin widths\\n- **keep-md: true**: Preserves intermediate Markdown files during rendering\\n\\n### **Website Features**\\n```yaml\\nwebsite:\\n  twitter-card: true\\n  open-graph: true\\n  repo-actions: [issue]\\n  navbar:\\n    background: primary\\n    search: true\\n  sidebar:\\n    style: floating\\n```\\n- **Social media**: Enables Twitter cards and Open Graph meta tags for link previews\\n- **repo-actions: [issue]**: Adds \"Report an issue\" link to pages\\n- **Navigation**: Primary-colored navbar with search functionality\\n- **sidebar: floating**: Creates a floating sidebar style\\n\\n### **Metadata Integration**\\n```yaml\\nmetadata-files:\\n  - nbdev.yml\\n  - sidebar.yml\\n```\\n- Imports additional configuration fromnbdev.yml(which I can see contains site title, URL, and repo info)\\n- Referencessidebar.yml(though this file doesn\\'t exist in your directory)\\n\\n### **Purpose**\\nThis configuration is designed for **nbdev**, a system that creates documentation websites from Jupyter notebooks. It\\'s set up to:\\n1. Convert your Jupyter notebooks (like00_core.ipynb,01_toolloop.ipynb, etc.) into web pages\\n2. Create a professional documentation site for theclaudettelibrary\\n3. Publish tohttps://claudette.answer.ai/(as specified innbdev.yml)\\n4. Provide a wide layout suitable for code documentation with syntax highlighting and interactive features\\n\\nThe setup suggests this is a Python library documentation site built from Jupyter notebooks using the nbdev workflow.', 'type': 'text'}]}]",
    "crumbs": [
      "Text Editor"
    ]
  },
  {
    "objectID": "async.html",
    "href": "async.html",
    "title": "The async version",
    "section": "",
    "text": "from IPython.display import display,Image",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "async.html#setup",
    "href": "async.html#setup",
    "title": "The async version",
    "section": "",
    "text": "from IPython.display import display,Image",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "async.html#async-sdk",
    "href": "async.html#async-sdk",
    "title": "The async version",
    "section": "Async SDK",
    "text": "Async SDK\n\nmodel = models[1]\ncli = AsyncAnthropic()\n\n\nprompt = \"I'm Jeremy\"\nm = mk_msg(prompt)\nr = await cli.messages.create(messages=[m], model=model, max_tokens=100)\nr\n\nHi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?\n\n\nid: msg_015XNtKiFEJF4HXdSeSYPtfs\ncontent: [{'citations': None, 'text': 'Hi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 10, 'output_tokens': 26, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nmsgs = mk_msgs([prompt, r, \"I forgot my name. Can you remind me please?\"]) \nmsgs\n\n[{'role': 'user', 'content': \"I'm Jeremy\"},\n {'role': 'assistant',\n  'content': [TextBlock(citations=None, text='Hi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?', type='text')]},\n {'role': 'user', 'content': 'I forgot my name. Can you remind me please?'}]\n\n\n\nawait cli.messages.create(messages=msgs, model=model, max_tokens=200)\n\nYour name is Jeremy - you introduced yourself to me just a moment ago in your first message!\n\n\nid: msg_01Ar5E7i3k8VZCEeRyD2fiZm\ncontent: [{'citations': None, 'text': 'Your name is Jeremy - you introduced yourself to me just a moment ago in your first message!', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 50, 'output_tokens': 22, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nsource\n\nAsyncClient\n\n AsyncClient (model, cli=None, log=False, cache=False)\n\nAsync Anthropic messages client.\n\n\nExported source\nclass AsyncClient(Client):\n    def __init__(self, model, cli=None, log=False, cache=False):\n        \"Async Anthropic messages client.\"\n        super().__init__(model,cli,log,cache)\n        if not cli: self.c = AsyncAnthropic(default_headers={'anthropic-beta': 'prompt-caching-2024-07-31'})\n\n\n\nc = AsyncClient(model)\n\n\nc._r(r)\nc.use\n\nIn: 10; Out: 26; Cache create: 0; Cache read: 0; Total Tokens: 36; Search: 0\n\n\n\nsource\n\n\nAsyncClient.__call__\n\n AsyncClient.__call__ (msgs:list, sp='', temp=0, maxtok=4096,\n                       maxthinktok=0, prefill='', stream:bool=False,\n                       stop=None, tools:Optional[list]=None,\n                       tool_choice:Optional[dict]=None, cb=None, cli=None,\n                       log=False, cache=False)\n\nMake an async call to Claude.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nList of messages in the dialog\n\n\nsp\nstr\n\nThe system prompt\n\n\ntemp\nint\n0\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\nstream\nbool\nFalse\nStream response?\n\n\nstop\nNoneType\nNone\nStop sequence\n\n\ntools\nOptional\nNone\nList of tools to make available to Claude\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\ncb\nNoneType\nNone\nCallback to pass result to when complete\n\n\ncli\nNoneType\nNone\n\n\n\nlog\nbool\nFalse\n\n\n\ncache\nbool\nFalse\n\n\n\n\n\n\nExported source\n@asave_iter\nasync def _astream(o, cm, prefill, cb):\n    async with cm as s:\n        yield prefill\n        async for x in s.text_stream: yield x\n        o.value = await s.get_final_message()\n        await cb(o.value)\n\n\n\n\nExported source\n@patch\n@delegates(Client)\nasync def __call__(self:AsyncClient,\n             msgs:list, # List of messages in the dialog\n             sp='', # The system prompt\n             temp=0, # Temperature\n             maxtok=4096, # Maximum tokens\n             maxthinktok=0, # Maximum thinking tokens\n             prefill='', # Optional prefill to pass to Claude as start of its response\n             stream:bool=False, # Stream response?\n             stop=None, # Stop sequence\n             tools:Optional[list]=None, # List of tools to make available to Claude\n             tool_choice:Optional[dict]=None, # Optionally force use of some tool\n             cb=None, # Callback to pass result to when complete\n             **kwargs):\n    \"Make an async call to Claude.\"\n    msgs,kwargs = self._precall(msgs, prefill, sp, temp, maxtok, maxthinktok, stream,\n                                stop, tools, tool_choice, kwargs)\n    m = self.c.messages\n    f = m.stream if stream else m.create\n    res = f(model=self.model, messages=msgs, **kwargs)\n    async def _cb(v):\n        self._log(v, prefill=prefill, msgs=msgs, **kwargs)\n        if cb: await cb(v)\n    if stream: return _astream(res, prefill, _cb)\n    res = await res\n    try: return res\n    finally: await _cb(res)\n\n\n\nc = AsyncClient(model, log=True)\nc.use\n\nIn: 0; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 0; Search: 0\n\n\n\nc.model = models[1]\nawait c('Hi')\n\nHello! How are you doing today? Is there anything I can help you with?\n\n\nid: msg_019u8wbhEBNjkKamuAbZMp7F\ncontent: [{'citations': None, 'text': 'Hello! How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 8, 'output_tokens': 20, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nc.use\n\nIn: 8; Out: 20; Cache create: 0; Cache read: 0; Total Tokens: 28; Search: 0\n\n\n\nq = \"Very concisely, what is the meaning of life?\"\npref = 'According to Douglas Adams,'\nawait c(q, prefill=pref)\n\nAccording to Douglas Adams,42. But seriously, there’s no universal answer - it’s deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\n\n\nid: msg_0169VpQ8KfSySZzFgoHW7Vf5\ncontent: [{'citations': None, 'text': \"According to Douglas Adams,42. But seriously, there's no universal answer - it's deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 24, 'output_tokens': 46, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nc.use\n\nIn: 32; Out: 66; Cache create: 0; Cache read: 0; Total Tokens: 98; Search: 0\n\n\n\nr = await c(q, prefill=pref, stream=True)\nasync for o in r: print(o, end='')\nr.value\n\nAccording to Douglas Adams,42. But seriously, there's no universal answer - it's deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\n\n\nAccording to Douglas Adams,42. But seriously, there’s no universal answer - it’s deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\n\n\nid: msg_0157uvVorteH83HXU8mmtSUG\ncontent: [{'citations': None, 'text': \"According to Douglas Adams,42. But seriously, there's no universal answer - it's deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 24, 'output_tokens': 46, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nc.use\n\nIn: 56; Out: 112; Cache create: 0; Cache read: 0; Total Tokens: 168; Search: 0\n\n\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return a + b\n\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\nsp = \"You are a summing expert.\"\n\n\ntools=[sums]\nchoice = mk_tool_choice('sums')\nchoice\n\n{'type': 'tool', 'name': 'sums'}\n\n\n\nmsgs = mk_msgs(pr)\nr = await c(msgs, sp=sp, tools=tools, tool_choice=choice)\nr\n\nToolUseBlock(id=‘toolu_01RSf4W7bXgG3y63muRCNdph’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\nid: msg_014wPskaa9NVZDc6Sny2E4WE\ncontent: [{'id': 'toolu_01RSf4W7bXgG3y63muRCNdph', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 439, 'output_tokens': 57, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nsource\n\n\nmk_funcres_async\n\n mk_funcres_async (fc, ns)\n\nGiven tool use block fc, get tool result, and create a tool_result response.\n\nsource\n\n\nmk_toolres_async\n\n mk_toolres_async (r:collections.abc.Mapping,\n                   ns:Optional[collections.abc.Mapping]=None)\n\nCreate a tool_result message from response r.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nr\nMapping\n\nTool use request response from Claude\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\n\n\ntr = await mk_toolres_async(r, ns=globals())\ntr\n\nFinding the sum of 604542 and 6458932\n\n\n[{'role': 'assistant',\n  'content': [{'id': 'toolu_01RSf4W7bXgG3y63muRCNdph',\n    'input': {'a': 604542, 'b': 6458932},\n    'name': 'sums',\n    'type': 'tool_use'}]},\n {'role': 'user',\n  'content': [{'type': 'tool_result',\n    'tool_use_id': 'toolu_01RSf4W7bXgG3y63muRCNdph',\n    'content': '7063474'}]}]\n\n\n\nmsgs += tr\nr = contents(await c(msgs, sp=sp, tools=sums))\nr\n\n'604542 + 6458932 = 7,063,474'",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "async.html#structured-output",
    "href": "async.html#structured-output",
    "title": "The async version",
    "section": "Structured Output",
    "text": "Structured Output\n\nsource\n\nAsyncClient.structured\n\n AsyncClient.structured (msgs:list, tools:Optional[list]=None,\n                         ns:Optional[collections.abc.Mapping]=None, sp='',\n                         temp=0, maxtok=4096, maxthinktok=0, prefill='',\n                         stream:bool=False, stop=None,\n                         tool_choice:Optional[dict]=None, cb=None,\n                         metadata:MetadataParam|NotGiven=NOT_GIVEN, servic\n                         e_tier:\"Literal['auto','standard_only']|NotGiven\"\n                         =NOT_GIVEN,\n                         stop_sequences:List[str]|NotGiven=NOT_GIVEN, syst\n                         em:Union[str,Iterable[TextBlockParam]]|NotGiven=N\n                         OT_GIVEN, temperature:float|NotGiven=NOT_GIVEN,\n                         thinking:ThinkingConfigParam|NotGiven=NOT_GIVEN,\n                         top_k:int|NotGiven=NOT_GIVEN,\n                         top_p:float|NotGiven=NOT_GIVEN,\n                         extra_headers:Headers|None=None,\n                         extra_query:Query|None=None,\n                         extra_body:Body|None=None, timeout:float|httpx.Ti\n                         meout|None|NotGiven=NOT_GIVEN)\n\nReturn the value of all tool calls (generally used for structured outputs)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nList of messages in the dialog\n\n\ntools\nOptional\nNone\nList of tools to make available to Claude\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\nsp\nstr\n\nThe system prompt\n\n\ntemp\nint\n0\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\nstream\nbool\nFalse\nStream response?\n\n\nstop\nNoneType\nNone\nStop sequence\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\ncb\nNoneType\nNone\nCallback to pass result to when complete\n\n\nmetadata\nMetadataParam | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nLiteral[‘auto’, ‘standard_only’] | NotGiven\nNOT_GIVEN\n\n\n\nstop_sequences\nList[str] | NotGiven\nNOT_GIVEN\n\n\n\nsystem\nUnion[str, Iterable[TextBlockParam]] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nthinking\nThinkingConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_k\nint | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\nawait c.structured(pr, sums)\n\nFinding the sum of 604542 and 6458932\n\n\n[7063474]\n\n\n\nc\n\nToolUseBlock(id=‘toolu_014Wyt1cQPKDG2x1HuNEm6dq’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\n\nMetric\nCount\nCost (USD)\n\n\n\n\nInput tokens\n1,451\n0.004353\n\n\nOutput tokens\n245\n0.003675\n\n\nCache tokens\n0\n0.000000\n\n\nServer tool use\n0\n0.000000\n\n\nTotal\n1,696\n$0.008028",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "async.html#asyncchat",
    "href": "async.html#asyncchat",
    "title": "The async version",
    "section": "AsyncChat",
    "text": "AsyncChat\n\nsource\n\nAsyncChat\n\n AsyncChat (model:Optional[str]=None,\n            cli:Optional[claudette.core.Client]=None, sp='',\n            tools:Optional[list]=None, temp=0, cont_pr:Optional[str]=None,\n            cache:bool=False, hist:list=None,\n            ns:Optional[collections.abc.Mapping]=None)\n\nAnthropic async chat client.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nOptional\nNone\nModel to use (leave empty if passing cli)\n\n\ncli\nOptional\nNone\nClient to use (leave empty if passing model)\n\n\nsp\nstr\n\n\n\n\ntools\nOptional\nNone\n\n\n\ntemp\nint\n0\n\n\n\ncont_pr\nOptional\nNone\n\n\n\ncache\nbool\nFalse\n\n\n\nhist\nlist\nNone\n\n\n\nns\nOptional\nNone\n\n\n\n\n\n\nExported source\n@delegates()\nclass AsyncChat(Chat):\n    def __init__(self,\n                 model:Optional[str]=None, # Model to use (leave empty if passing `cli`)\n                 cli:Optional[Client]=None, # Client to use (leave empty if passing `model`)\n                 **kwargs):\n        \"Anthropic async chat client.\"\n        super().__init__(model, cli, **kwargs)\n        if not cli: self.c = AsyncClient(model)\n\n\n\nsp = \"Always use tools if available, and calculations are requested.\"\nchat = AsyncChat(model, sp=sp)\nchat.c.use, chat.h\n\n(In: 0; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 0; Search: 0, [])\n\n\n\nsource\n\n\nAsyncChat.__call__\n\n AsyncChat.__call__ (pr=None, temp=None, maxtok=4096, maxthinktok=0,\n                     stream=False, prefill='',\n                     tool_choice:Union[str,bool,dict,NoneType]=None, **kw)\n\nCall self as a function.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\nNoneType\nNone\nPrompt / message\n\n\ntemp\nNoneType\nNone\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\ntool_choice\nUnion\nNone\nOptionally force use of some tool\n\n\nkw\nVAR_KEYWORD\n\n\n\n\n\n\n\nExported source\n@patch\nasync def _append_pr(self:AsyncChat, pr=None):\n    prev_role = nested_idx(self.h, -1, 'role') if self.h else 'assistant' # First message should be 'user' if no history\n    if pr and prev_role == 'user': await self()\n    self._post_pr(pr, prev_role)\n\n\n\n\nExported source\n@patch\nasync def __call__(self:AsyncChat,\n                   pr=None,  # Prompt / message\n                   temp=None, # Temperature\n                   maxtok=4096, # Maximum tokens\n                   maxthinktok=0, # Maximum thinking tokens\n                   stream=False, # Stream response?\n                   prefill='', # Optional prefill to pass to Claude as start of its response\n                   tool_choice:Optional[Union[str,bool,dict]]=None, # Optionally force use of some tool\n                   **kw):\n    if temp is None: temp=self.temp\n    await self._append_pr(pr)\n    async def _cb(v):\n        self.last = await mk_toolres_async(v, ns=self.ns)\n        self.h += self.last\n    return await self.c(self.h, stream=stream, prefill=prefill, sp=self.sp, temp=temp, maxtok=maxtok, maxthinktok=maxthinktok, tools=self.tools, tool_choice=tool_choice, cb=_cb, **kw)\n\n\n\nawait chat(\"I'm Jeremy\")\nawait chat(\"What's my name?\")\n\nYour name is Jeremy! You introduced yourself to me at the start of our conversation.\n\n\nid: msg_01Pyu3uCBzVdC4kErLbq2peH\ncontent: [{'citations': None, 'text': 'Your name is Jeremy! You introduced yourself to me at the start of our conversation.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 55, 'output_tokens': 20, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nq = \"Very concisely, what is the meaning of life?\"\npref = 'According to Douglas Adams,'\nawait chat(q, prefill=pref)\n\nAccording to Douglas Adams,42. Philosophically, to find purpose, connect with others, and create meaning through your choices and experiences.\n\n\nid: msg_01YQvh7nxU4isTjxnGPhi77s\ncontent: [{'citations': None, 'text': 'According to Douglas Adams,42. Philosophically, to find purpose, connect with others, and create meaning through your choices and experiences.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 95, 'output_tokens': 26, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat = AsyncChat(model, sp=sp)\nr = await chat(\"I'm Jeremy\", stream=True)\nasync for o in r: print(o, end='')\nr.value\n\nHi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?\n\n\nHi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?\n\n\nid: msg_019nc6kTgNmCB5CrPksMPoqJ\ncontent: [{'citations': None, 'text': 'Hi Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 21, 'output_tokens': 26, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\npr = f\"What is {a}+{b}?\"\nchat = AsyncChat(model, sp=sp, tools=[sums])\nr = await chat(pr)\nr\n\nFinding the sum of 604542 and 6458932\n\n\nI’ll calculate 604542 + 6458932 for you using the available sum function.\n\n\nid: msg_01P4vF1nhMCocPbnMLYJQrYC\ncontent: [{'citations': None, 'text': \"I'll calculate 604542 + 6458932 for you using the available sum function.\", 'type': 'text'}, {'id': 'toolu_017kjtY3mgsbQ32Khv45PGZG', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 441, 'output_tokens': 94, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nawait chat()\n\nThe sum of 604542 + 6458932 = 7,063,474.\n\n\nid: msg_01U3weEUEBMngittChXXvEW9\ncontent: [{'citations': None, 'text': 'The sum of 604542 + 6458932 = 7,063,474.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 550, 'output_tokens': 24, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nfn = Path('samples/puppy.jpg')\nimg = fn.read_bytes()\nImage(img)\n\n\n\n\n\n\n\n\n\nq = \"In brief, what color flowers are in this image?\"\nmsg = mk_msg([img, q])\nawait c([msg])\n\nThe flowers in this image are purple.\n\n\nid: msg_01TNWd92J6RYs1QCccodCKH9\ncontent: [{'citations': None, 'text': 'The flowers in this image are purple.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 110, 'output_tokens': 11, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nAdd cache=True to automatically add to Claude’s KV cache.\n\nchat = AsyncChat(model, sp=sp, cache=True)\nawait chat(\"Lorem ipsum dolor sit amet\" * 150)\n\nI see you’ve shared a very long string of repeated “Lorem ipsum dolor sit amet” text. Lorem ipsum is commonly used as placeholder text in the printing and typesetting industry.\nIf you’d like me to help you with something specific regarding this text, I’d be happy to assist! For example, I could:\n\nCount how many times the phrase repeats\nHelp you format it differently\nReplace it with actual content\nUse it for a specific purpose you have in mind\n\nIs there something particular you’d like me to do with this Lorem ipsum text, or did you have a question or task in mind?\n\n\nid: msg_01PqiRkprKgWUzucSUUgkeSp\ncontent: [{'citations': None, 'text': 'I see you\\'ve shared a very long string of repeated \"Lorem ipsum dolor sit amet\" text. Lorem ipsum is commonly used as placeholder text in the printing and typesetting industry.\\n\\nIf you\\'d like me to help you with something specific regarding this text, I\\'d be happy to assist! For example, I could:\\n\\n- Count how many times the phrase repeats\\n- Help you format it differently\\n- Replace it with actual content\\n- Use it for a specific purpose you have in mind\\n\\nIs there something particular you\\'d like me to do with this Lorem ipsum text, or did you have a question or task in mind?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 1062, 'cache_read_input_tokens': 0, 'input_tokens': 4, 'output_tokens': 133, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 4; Out: 133; Cache create: 1062; Cache read: 0; Total Tokens: 1199; Search: 0\n\n\nIn this followup call, nearly all the tokens are cached, so the only the new additional tokens are charged at the full rate.\n\nawait chat(\"Whoops, sorry about that!\")\n\nNo worries at all! That happens to the best of us - copy/paste mishaps are pretty common.\nIs there something I can actually help you with today? I’m here and ready to assist with whatever you need!\n\n\nid: msg_01SZAUn8kxJPmCnVcqDmyfTm\ncontent: [{'citations': None, 'text': \"No worries at all! That happens to the best of us - copy/paste mishaps are pretty common. \\n\\nIs there something I can actually help you with today? I'm here and ready to assist with whatever you need!\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 144, 'cache_read_input_tokens': 1062, 'input_tokens': 4, 'output_tokens': 51, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 8; Out: 184; Cache create: 1206; Cache read: 1062; Total Tokens: 2460; Search: 0",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "async.html#extended-thinking",
    "href": "async.html#extended-thinking",
    "title": "The async version",
    "section": "Extended Thinking",
    "text": "Extended Thinking\nLet’s call the model without extended thinking enabled.\n\nchat = AsyncChat(model)\nawait chat(\"Write a sentence about Python!\")\n\nPython is a versatile, high-level programming language known for its clean syntax and readability, making it popular for everything from web development and data science to artificial intelligence and automation.\n\n\nid: msg_01KFz2yMQdpnWmgcoinnjVNS\ncontent: [{'citations': None, 'text': 'Python is a versatile, high-level programming language known for its clean syntax and readability, making it popular for everything from web development and data science to artificial intelligence and automation.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 13, 'output_tokens': 40, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nNow, let’s call the model with extended thinking enabled.\n\nr = await chat(\"Write a sentence about Python!\", maxthinktok=1024)\nr\n\nPython’s extensive ecosystem of libraries and frameworks, combined with its beginner-friendly nature, has made it one of the most widely-used programming languages in both academic research and industry applications.\n\n\nThinking\n\nThe human is asking me to write a sentence about Python again. They might want a different sentence this time, or they might have just repeated the request. I should provide a new sentence about Python that covers different aspects than my previous response.\n\n\n\nid: msg_01PxDWsEjoCqjRw7GS7AkTNe\ncontent: [{'signature': 'EqsDCkYIBhgCKkDtJkWtKAsmWFYYcawASegfy35pgXLe4sanJLF2tla/a2QG1haUvfYoesbzCeyeZ96ck0P+C+L3K9AR2Gp4WLO8EgwZ5CtwhP63ipzAEu4aDN4dhtKzKvlHhgJmmCIwGkc3T9SB143oThdCiYgM2QSrnNrEAnHBHWvoQjG/AsrBkcNuxZMFdEjZM4yIcjcAKpIChw9+pZuH7NWzqjN572BbfJ9cqrOnZ/H++lKIS6D5zgSj/xUY1RnqPOwKGNKuLlNFAPBFVr+oS/MIvSNwL378do2DVzT7NWSPWfMxZuWkoJq0yjkD9Jcwt2YS2tn11yo5a2akDNBf8X1PcykbGZ2mWwWmEEqvlPh2WUG4lEHw69BO7dwlfr8SOzcFhK4VDG9skmYMUBQ2+CzI6P9AKGx7MaHJ4toGOtTHMSE2ZiOnutnlR/tqsdw4phEJtwM7ajetraeF2eUY16O/4znytiPbJ7bIPqawGWZbF+N3pn4Ubx2767/LRYLJu3DMF4BBelxOQzAQLKbSUPqGxLvgthtvA9Rn0sya4JYYFrwKSD2bjkrw2BgB', 'thinking': 'The human is asking me to write a sentence about Python again. They might want a different sentence this time, or they might have just repeated the request. I should provide a new sentence about Python that covers different aspects than my previous response.', 'type': 'thinking'}, {'citations': None, 'text': \"Python's extensive ecosystem of libraries and frameworks, combined with its beginner-friendly nature, has made it one of the most widely-used programming languages in both academic research and industry applications.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 90, 'output_tokens': 98, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nr.content\n\n[ThinkingBlock(signature='EqsDCkYIBhgCKkDtJkWtKAsmWFYYcawASegfy35pgXLe4sanJLF2tla/a2QG1haUvfYoesbzCeyeZ96ck0P+C+L3K9AR2Gp4WLO8EgwZ5CtwhP63ipzAEu4aDN4dhtKzKvlHhgJmmCIwGkc3T9SB143oThdCiYgM2QSrnNrEAnHBHWvoQjG/AsrBkcNuxZMFdEjZM4yIcjcAKpIChw9+pZuH7NWzqjN572BbfJ9cqrOnZ/H++lKIS6D5zgSj/xUY1RnqPOwKGNKuLlNFAPBFVr+oS/MIvSNwL378do2DVzT7NWSPWfMxZuWkoJq0yjkD9Jcwt2YS2tn11yo5a2akDNBf8X1PcykbGZ2mWwWmEEqvlPh2WUG4lEHw69BO7dwlfr8SOzcFhK4VDG9skmYMUBQ2+CzI6P9AKGx7MaHJ4toGOtTHMSE2ZiOnutnlR/tqsdw4phEJtwM7ajetraeF2eUY16O/4znytiPbJ7bIPqawGWZbF+N3pn4Ubx2767/LRYLJu3DMF4BBelxOQzAQLKbSUPqGxLvgthtvA9Rn0sya4JYYFrwKSD2bjkrw2BgB', thinking='The human is asking me to write a sentence about Python again. They might want a different sentence this time, or they might have just repeated the request. I should provide a new sentence about Python that covers different aspects than my previous response.', type='thinking'),\n TextBlock(citations=None, text=\"Python's extensive ecosystem of libraries and frameworks, combined with its beginner-friendly nature, has made it one of the most widely-used programming languages in both academic research and industry applications.\", type='text')]",
    "crumbs": [
      "The async version"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "claudette",
    "section": "",
    "text": "NB: If you are reading this in GitHub’s readme, we recommend you instead read the much more nicely formatted documentation format of this tutorial.\nClaudette is a wrapper for Anthropic’s Python SDK.\nThe SDK works well, but it is quite low level – it leaves the developer to do a lot of stuff manually. That’s a lot of extra work and boilerplate! Claudette automates pretty much everything that can be automated, whilst providing full control. Amongst the features provided:\nYou’ll need to set the ANTHROPIC_API_KEY environment variable to the key provided to you by Anthropic in order to use this library.\nNote that this library is the first ever “literate nbdev” project. That means that the actual source code for the library is a rendered Jupyter Notebook which includes callout notes and tips, HTML tables and images, detailed explanations, and teaches how and why the code is written the way it is. Even if you’ve never used the Anthropic Python SDK or Claude API before, you should be able to read the source code. Click Claudette’s Source to read it, or clone the git repo and execute the notebook yourself to see every step of the creation process in action. The tutorial below includes links to API details which will take you to relevant parts of the source. The reason this project is a new kind of literal program is because we take seriously Knuth’s call to action, that we have a “moral commitment” to never write an “illiterate program” – and so we have a commitment to making literate programming an easy and pleasant experience. (For more on this, see this talk from Hamel Husain.)",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "claudette",
    "section": "Install",
    "text": "Install\npip install claudette",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "claudette",
    "section": "Getting started",
    "text": "Getting started\nAnthropic’s Python SDK will automatically be installed with Claudette, if you don’t already have it.\n\nimport os\n# os.environ['ANTHROPIC_LOG'] = 'debug'\n\nTo print every HTTP request and response in full, uncomment the above line.\n\nfrom claudette import *\n\nClaudette only exports the symbols that are needed to use the library, so you can use import * to import them. Alternatively, just use:\nimport claudette\n…and then add the prefix claudette. to any usages of the module.\nClaudette provides models, which is a list of models currently available from the SDK.\n\nmodels\n\n['claude-opus-4-20250514',\n 'claude-sonnet-4-20250514',\n 'claude-3-opus-20240229',\n 'claude-3-7-sonnet-20250219',\n 'claude-3-5-sonnet-20241022']\n\n\nFor these examples, we’ll use Sonnet 4, since it’s awesome!\n\nmodel = models[1]\nmodel\n\n'claude-sonnet-4-20250514'",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#chat",
    "href": "index.html#chat",
    "title": "claudette",
    "section": "Chat",
    "text": "Chat\nThe main interface to Claudette is the Chat class, which provides a stateful interface to Claude:\n\nchat = Chat(model, sp=\"\"\"You are a helpful and concise assistant.\"\"\")\nchat(\"I'm Jeremy\")\n\nHello Jeremy! Nice to meet you. How can I help you today?\n\n\nid: msg_01NNfbziMKnAULhH72Upzpzg\ncontent: [{'citations': None, 'text': 'Hello Jeremy! Nice to meet you. How can I help you today?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 19, 'output_tokens': 18, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nr = chat(\"What's my name?\")\nr\n\nYour name is Jeremy.\n\n\nid: msg_01HoboBZtq6dtocz2UWht9ia\ncontent: [{'citations': None, 'text': 'Your name is Jeremy.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 45, 'output_tokens': 8, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nr = chat(\"What's my name?\")\nr\n\nYour name is Jeremy.\n\n\nid: msg_01SUAYui6JS3Jf65KYfsGWhU\ncontent: [{'citations': None, 'text': 'Your name is Jeremy.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 61, 'output_tokens': 8, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nAs you see above, displaying the results of a call in a notebook shows just the message contents, with the other details hidden behind a collapsible section. Alternatively you can print the details:\n\nprint(r)\n\nMessage(id='msg_01SUAYui6JS3Jf65KYfsGWhU', content=[TextBlock(citations=None, text='Your name is Jeremy.', type='text')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=In: 61; Out: 8; Cache create: 0; Cache read: 0; Total Tokens: 69; Search: 0)\n\n\nClaude supports adding an extra assistant message at the end, which contains the prefill – i.e. the text we want Claude to assume the response starts with. Let’s try it out:\n\nchat(\"Concisely, what is the meaning of life?\",\n     prefill='According to Douglas Adams,')\n\nAccording to Douglas Adams,it’s 42. More seriously, many find meaning through relationships, personal growth, contributing to others, and pursuing what brings fulfillment.\n\n\nid: msg_01UkHn37YePdXg8NVrXk9Qu3\ncontent: [{'citations': None, 'text': \"According to Douglas Adams,it's 42. More seriously, many find meaning through relationships, personal growth, contributing to others, and pursuing what brings fulfillment.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 89, 'output_tokens': 32, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nYou can add stream=True to stream the results as soon as they arrive (although you will only see the gradual generation if you execute the notebook yourself, of course!)\n\nfor o in chat(\"Concisely, what book was that in?\", prefill='It was in', stream=True):\n    print(o, end='')\n\nIt was in \"The Hitchhiker's Guide to the Galaxy.\"\n\n\n\nAsync\nAlternatively, you can use AsyncChat (or AsyncClient) for the async versions, e.g:\n\nchat = AsyncChat(model)\nawait chat(\"I'm Jeremy\")\n\nNice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?\n\n\nid: msg_01HyDqMjwcKEc2V39xLWTwFf\ncontent: [{'citations': None, 'text': 'Nice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 10, 'output_tokens': 25, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nRemember to use async for when streaming in this case:\n\nasync for o in await chat(\"Concisely, what is the meaning of life?\",\n                          prefill='According to Douglas Adams,', stream=True):\n    print(o, end='')\n\nAccording to Douglas Adams,it's 42. But more seriously, the meaning of life is likely something you create through your relationships, contributions, growth, and what brings you fulfillment - rather than something you discover pre-made.",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#prompt-caching",
    "href": "index.html#prompt-caching",
    "title": "claudette",
    "section": "Prompt caching",
    "text": "Prompt caching\nClaude supports prompt caching, which can significantly reduce token usage costs when working with large contexts or repetitive elements. When you use mk_msg(msg, cache=True), Claudette adds the necessary cache control headers to make that message cacheable.\nPrompt caching works by marking segments of your prompt for efficient reuse. When a cached segment is encountered again, Claude reads it from the cache rather than processing the full content, resulting in a 90% reduction in token costs for those segments.\nSome key points about prompt caching: - Cache writes cost 25% more than normal input tokens - Cache reads cost 90% less than normal input tokens - Minimum cacheable length is model-dependent (1024-2048 tokens) - Cached segments must be completely identical to be reused - Works well for system prompts, tool definitions, and large context blocks\nFor instance, here we use caching when asking about Claudette’s readme file:\n\nchat = Chat(model, sp=\"\"\"You are a helpful and concise assistant.\"\"\")\n\n\nnbtxt = Path('README.txt').read_text()\nmsg = f'''&lt;README&gt;\n{nbtxt}\n&lt;/README&gt;\nIn brief, what is the purpose of this project based on the readme?'''\nr = chat(mk_msg(msg, cache=True))\nr\n\nBased on the README, Claudette is a high-level wrapper for Anthropic’s Python SDK that aims to simplify and automate working with Claude’s API. Its main purposes are:\n\nReduce boilerplate and manual work - It automates tasks that would otherwise require manual handling with the base SDK\nProvide convenient features like:\n\nStateful chat dialogs via the Chat class\nSupport for prefill (controlling Claude’s response start)\nEasy image handling\nSimplified tool use API\nPrompt caching support\n\nMaintain full control while providing automation - you get convenience without losing flexibility\nEducational value - It’s the first “literate nbdev” project, meaning the source code is written as a readable Jupyter Notebook with detailed explanations, making it both functional software and a teaching resource\n\nThe project essentially makes Claude’s API more ergonomic and user-friendly while preserving all the underlying capabilities.\n\n\nid: msg_011SNy9u95nspNq6PSnQuwBF\ncontent: [{'citations': None, 'text': 'Based on the README, Claudette is a high-level wrapper for Anthropic\\'s Python SDK that aims to simplify and automate working with Claude\\'s API. Its main purposes are:\\n\\n1. **Reduce boilerplate and manual work** - It automates tasks that would otherwise require manual handling with the base SDK\\n2. **Provide convenient features** like:\\n   - Stateful chat dialogs via the [Chat](https://claudette.answer.ai/core.html#chat) class\\n   - Support for prefill (controlling Claude\\'s response start)\\n   - Easy image handling\\n   - Simplified tool use API\\n   - Prompt caching support\\n\\n3. **Maintain full control** while providing automation - you get convenience without losing flexibility\\n\\n4. **Educational value** - It\\'s the first \"literate nbdev\" project, meaning the source code is written as a readable Jupyter Notebook with detailed explanations, making it both functional software and a teaching resource\\n\\nThe project essentially makes Claude\\'s API more ergonomic and user-friendly while preserving all the underlying capabilities.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 9287, 'input_tokens': 4, 'output_tokens': 223, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nThe response records the a cache has been created using these input tokens:\n\nprint(r.usage)\n\nUsage(cache_creation_input_tokens=0, cache_read_input_tokens=9287, input_tokens=4, output_tokens=223, server_tool_use=None, service_tier='standard')\n\n\nWe can now ask a followup question in this chat:\n\nr = chat('How does it make tool use more ergonomic?')\nr\n\nBased on the README, Claudette makes tool use more ergonomic in several key ways:\n\n1. Simplified Function Definitions\nUses docments to make Python function definitions more user-friendly - you just need type hints and comments:\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    return a + b\n\n\n2. Automatic Tool Execution\nHandles the tool calling process automatically. When Claude returns a tool_use message, you just call chat() again and Claudette: - Calls the tool with the provided parameters - Passes the result back to Claude - Returns Claude’s final response\nNo manual parameter extraction or result handling needed.\n\n\n3. Multi-step Tool Workflows\nThe toolloop method can handle multiple tool calls in sequence to solve complex problems. For example, calculating (a+b)*2 automatically uses both addition and multiplication tools in the right order.\n\n\n4. Easy Tool Integration\n\nPass tools as a simple list to the Chat constructor\nOptionally force tool usage with tool_choice parameter\nGet structured data directly with Client.structured()\n\n\n\n5. Reduced Complexity\nInstead of manually handling tool use messages, parameter parsing, function calls, and result formatting that the base SDK requires, Claudette abstracts all of this away while maintaining full functionality.\nThis makes tool use feel more like natural function calling rather than complex API orchestration.\n\n\nid: msg_01XDJNpxiTkhTY9kbu17Q73L\ncontent: [{'citations': None, 'text': 'Based on the README, Claudette makes tool use more ergonomic in several key ways:\\n\\n## 1. **Simplified Function Definitions**\\nUses docments to make Python function definitions more user-friendly - you just need type hints and comments:\\n\\n```python\\ndef sums(\\n    a:int,  # First thing to sum\\n    b:int=1 # Second thing to sum\\n) -&gt; int: # The sum of the inputs\\n    \"Adds a + b.\"\\n    return a + b\\n```\\n\\n## 2. **Automatic Tool Execution**\\nHandles the tool calling process automatically. When Claude returns atool_usemessage, you just callchat()again and Claudette:\\n- Calls the tool with the provided parameters\\n- Passes the result back to Claude\\n- Returns Claude\\'s final response\\n\\nNo manual parameter extraction or result handling needed.\\n\\n## 3. **Multi-step Tool Workflows**\\nThetoolloopmethod can handle multiple tool calls in sequence to solve complex problems. For example, calculating(a+b)*2automatically uses both addition and multiplication tools in the right order.\\n\\n## 4. **Easy Tool Integration**\\n- Pass tools as a simple list to the [Chat](https://claudette.answer.ai/core.html#chat) constructor\\n- Optionally force tool usage withtool_choiceparameter\\n- Get structured data directly with [Client.structured()](https://claudette.answer.ai/core.html#client.structured)\\n\\n## 5. **Reduced Complexity**\\nInstead of manually handling tool use messages, parameter parsing, function calls, and result formatting that the base SDK requires, Claudette abstracts all of this away while maintaining full functionality.\\n\\nThis makes tool use feel more like natural function calling rather than complex API orchestration.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 9287, 'input_tokens': 241, 'output_tokens': 374, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nWe can see that this only used ~200 regular input tokens – the 7000+ context tokens have been read from cache.\n\nprint(r.usage)\n\nUsage(cache_creation_input_tokens=0, cache_read_input_tokens=9287, input_tokens=241, output_tokens=374, server_tool_use=None, service_tier='standard')\n\n\n\nchat.use\n\nIn: 245; Out: 597; Cache create: 0; Cache read: 18574; Total Tokens: 19416; Search: 0",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#simplified-function-definitions",
    "href": "index.html#simplified-function-definitions",
    "title": "claudette",
    "section": "1. Simplified Function Definitions",
    "text": "1. Simplified Function Definitions\nUses docments to make Python function definitions more user-friendly - you just need type hints and comments:\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    return a + b",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#automatic-tool-execution",
    "href": "index.html#automatic-tool-execution",
    "title": "claudette",
    "section": "2. Automatic Tool Execution",
    "text": "2. Automatic Tool Execution\nHandles the tool calling process automatically. When Claude returns a tool_use message, you just call chat() again and Claudette: - Calls the tool with the provided parameters - Passes the result back to Claude - Returns Claude’s final response\nNo manual parameter extraction or result handling needed.",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#multi-step-tool-workflows",
    "href": "index.html#multi-step-tool-workflows",
    "title": "claudette",
    "section": "3. Multi-step Tool Workflows",
    "text": "3. Multi-step Tool Workflows\nThe toolloop method can handle multiple tool calls in sequence to solve complex problems. For example, calculating (a+b)*2 automatically uses both addition and multiplication tools in the right order.",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#easy-tool-integration",
    "href": "index.html#easy-tool-integration",
    "title": "claudette",
    "section": "4. Easy Tool Integration",
    "text": "4. Easy Tool Integration\n\nPass tools as a simple list to the Chat constructor\nOptionally force tool usage with tool_choice parameter\nGet structured data directly with Client.structured()",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#reduced-complexity",
    "href": "index.html#reduced-complexity",
    "title": "claudette",
    "section": "5. Reduced Complexity",
    "text": "5. Reduced Complexity\nInstead of manually handling tool use messages, parameter parsing, function calls, and result formatting that the base SDK requires, Claudette abstracts all of this away while maintaining full functionality.\nThis makes tool use feel more like natural function calling rather than complex API orchestration.\n\n\nid: msg_01XDJNpxiTkhTY9kbu17Q73L\ncontent: [{'citations': None, 'text': 'Based on the README, Claudette makes tool use more ergonomic in several key ways:\\n\\n## 1. **Simplified Function Definitions**\\nUses docments to make Python function definitions more user-friendly - you just need type hints and comments:\\n\\n```python\\ndef sums(\\n    a:int,  # First thing to sum\\n    b:int=1 # Second thing to sum\\n) -&gt; int: # The sum of the inputs\\n    \"Adds a + b.\"\\n    return a + b\\n```\\n\\n## 2. **Automatic Tool Execution**\\nHandles the tool calling process automatically. When Claude returns atool_usemessage, you just callchat()again and Claudette:\\n- Calls the tool with the provided parameters\\n- Passes the result back to Claude\\n- Returns Claude\\'s final response\\n\\nNo manual parameter extraction or result handling needed.\\n\\n## 3. **Multi-step Tool Workflows**\\nThetoolloopmethod can handle multiple tool calls in sequence to solve complex problems. For example, calculating(a+b)*2automatically uses both addition and multiplication tools in the right order.\\n\\n## 4. **Easy Tool Integration**\\n- Pass tools as a simple list to the [Chat](https://claudette.answer.ai/core.html#chat) constructor\\n- Optionally force tool usage withtool_choiceparameter\\n- Get structured data directly with [Client.structured()](https://claudette.answer.ai/core.html#client.structured)\\n\\n## 5. **Reduced Complexity**\\nInstead of manually handling tool use messages, parameter parsing, function calls, and result formatting that the base SDK requires, Claudette abstracts all of this away while maintaining full functionality.\\n\\nThis makes tool use feel more like natural function calling rather than complex API orchestration.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 9287, 'input_tokens': 241, 'output_tokens': 374, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#tool-use",
    "href": "index.html#tool-use",
    "title": "claudette",
    "section": "Tool use",
    "text": "Tool use\nTool use lets Claude use external tools.\nWe use docments to make defining Python functions as ergonomic as possible. Each parameter (and the return value) should have a type, and a docments comment with the description of what it is. As an example we’ll write a simple function that adds numbers together, and will tell us when it’s being called:\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return a + b\n\nSometimes Claude will try to add stuff up “in its head”, so we’ll use a system prompt to ask it not to.\n\nsp = \"Always use tools if math ops are needed.\"\n\nWe’ll get Claude to add up some long numbers:\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\npr\n\n'What is 604542+6458932?'\n\n\nTo use tools, pass a list of them to Chat:\n\nchat = Chat(model, sp=sp, tools=[sums])\n\nTo force Claude to always answer using a tool, set tool_choice to that function name. When Claude needs to use a tool, it doesn’t return the answer, but instead returns a tool_use message, which means we have to call the named tool with the provided parameters.\n\nr = chat(pr, tool_choice='sums')\nr\n\nFinding the sum of 604542 and 6458932\n\n\nToolUseBlock(id=‘toolu_01UUWNqtkMHQss345r1ir17q’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\nid: msg_0199dXeVq11rc2veGNJVWc4k\ncontent: [{'id': 'toolu_01UUWNqtkMHQss345r1ir17q', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 445, 'output_tokens': 53, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nClaudette handles all that for us – we just call it again, and it all happens automatically:\n\nchat()\n\n604542 + 6458932 = 7,063,474\n\n\nid: msg_014wmCxnwQpgvnqKKto3RrxA\ncontent: [{'citations': None, 'text': '604542 + 6458932 = 7,063,474', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 527, 'output_tokens': 19, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nYou can see how many tokens have been used at any time by checking the use property. Note that (as of May 2024) tool use in Claude uses a lot of tokens, since it automatically adds a large system prompt.\n\nchat.use\n\nIn: 972; Out: 72; Cache create: 0; Cache read: 0; Total Tokens: 1044; Search: 0\n\n\nWe can do everything needed to use tools in a single step, by using Chat.toolloop. This can even call multiple tools as needed solve a problem. For example, let’s define a tool to handle multiplication:\n\ndef mults(\n    a:int,  # First thing to multiply\n    b:int=1 # Second thing to multiply\n) -&gt; int: # The product of the inputs\n    \"Multiplies a * b.\"\n    print(f\"Finding the product of {a} and {b}\")\n    return a * b\n\nNow with a single call we can calculate (a+b)*2 – by passing show_trace we can see each response from Claude in the process:\n\nchat = Chat(model, sp=sp, tools=[sums,mults])\npr = f'Calculate ({a}+{b})*2'\npr\n\n'Calculate (604542+6458932)*2'\n\n\n\nfor o in chat.toolloop(pr): display(o)\n\nFinding the sum of 604542 and 6458932\n\n\nI’ll help you calculate (604542+6458932)*2. I need to first add the two numbers, then multiply the result by 2.\n\n\nid: msg_019DZznw7qiEM2uEEcpNTnKs\ncontent: [{'citations': None, 'text': \"I'll help you calculate (604542+6458932)*2. I need to first add the two numbers, then multiply the result by 2.\", 'type': 'text'}, {'id': 'toolu_016NZ7MtE8oWHs5BSkxMcAN7', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 539, 'output_tokens': 105, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': '7063474',\n                 'tool_use_id': 'toolu_016NZ7MtE8oWHs5BSkxMcAN7',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nFinding the product of 7063474 and 2\n\n\nNow I’ll multiply that result by 2:\n\n\nid: msg_01LmQiMRWAtTQz6sChqsbtMy\ncontent: [{'citations': None, 'text': \"Now I'll multiply that result by 2:\", 'type': 'text'}, {'id': 'toolu_019BQuhBzEkCWC1JMp6VtcfD', 'input': {'a': 7063474, 'b': 2}, 'name': 'mults', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 659, 'output_tokens': 82, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n{ 'content': [ { 'content': '14126948',\n                 'tool_use_id': 'toolu_019BQuhBzEkCWC1JMp6VtcfD',\n                 'type': 'tool_result'}],\n  'role': 'user'}\n\n\nThe answer is 14,126,948.\nTo break it down: - 604,542 + 6,458,932 = 7,063,474 - 7,063,474 × 2 = 14,126,948\n\n\nid: msg_0119DdeQ2goLFwGkXTXHFDsv\ncontent: [{'citations': None, 'text': 'The answer is **14,126,948**.\\n\\nTo break it down:\\n- 604,542 + 6,458,932 = 7,063,474\\n- 7,063,474 × 2 = 14,126,948', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 756, 'output_tokens': 61, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#structured-data",
    "href": "index.html#structured-data",
    "title": "claudette",
    "section": "Structured data",
    "text": "Structured data\nIf you just want the immediate result from a single tool, use Client.structured.\n\ncli = Client(model)\n\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return a + b\n\n\ncli.structured(\"What is 604542+6458932\", sums)\n\nFinding the sum of 604542 and 6458932\n\n\n[7063474]\n\n\nThis is particularly useful for getting back structured information, e.g:\n\nclass President:\n    \"Information about a president of the United States\"\n    def __init__(self, \n                first:str, # first name\n                last:str, # last name\n                spouse:str, # name of spouse\n                years_in_office:str, # format: \"{start_year}-{end_year}\"\n                birthplace:str, # name of city\n                birth_year:int # year of birth, `0` if unknown\n        ):\n        assert re.match(r'\\d{4}-\\d{4}', years_in_office), \"Invalid format: `years_in_office`\"\n        store_attr()\n\n    __repr__ = basic_repr('first, last, spouse, years_in_office, birthplace, birth_year')\n\n\ncli.structured(\"Provide key information about the 3rd President of the United States\", President)\n\n[President(first='Thomas', last='Jefferson', spouse='Martha Wayles Skelton Jefferson', years_in_office='1801-1809', birthplace='Shadwell, Virginia', birth_year=1743)]",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#images",
    "href": "index.html#images",
    "title": "claudette",
    "section": "Images",
    "text": "Images\nClaude can handle image data as well. As everyone knows, when testing image APIs you have to use a cute puppy.\n\nfn = Path('samples/puppy.jpg')\nImage(filename=fn, width=200)\n\n\n\n\n\n\n\n\nWe create a Chat object as before:\n\nchat = Chat(model)\n\nClaudette expects images as a list of bytes, so we read in the file:\n\nimg = fn.read_bytes()\n\nPrompts to Claudette can be lists, containing text, images, or both, eg:\n\nchat([img, \"In brief, what color flowers are in this image?\"])\n\nThe flowers in this image are purple.\n\n\nid: msg_01N2NCd5JW3gNsGysgmyMx9F\ncontent: [{'citations': None, 'text': 'The flowers in this image are purple.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 110, 'output_tokens': 11, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nThe image is included as input tokens.\n\nchat.use\n\nIn: 110; Out: 11; Cache create: 0; Cache read: 0; Total Tokens: 121; Search: 0\n\n\nAlternatively, Claudette supports creating a multi-stage chat with separate image and text prompts. For instance, you can pass just the image as the initial prompt (in which case Claude will make some general comments about what it sees), and then follow up with questions in additional prompts:\n\nchat = Chat(model)\nchat(img)\n\nWhat an adorable puppy! This looks like a Cavalier King Charles Spaniel puppy with the classic Blenheim coloring (chestnut and white markings). The puppy has those characteristic sweet, gentle eyes and silky coat that the breed is known for. The setting with the purple flowers in the background makes for a lovely portrait - it really highlights the puppy’s beautiful coloring and sweet expression. Cavalier King Charles Spaniels are known for being friendly, affectionate companions. Is this your puppy?\n\n\nid: msg_01Jat1obwo79eEz5JMFAF4Mh\ncontent: [{'citations': None, 'text': \"What an adorable puppy! This looks like a Cavalier King Charles Spaniel puppy with the classic Blenheim coloring (chestnut and white markings). The puppy has those characteristic sweet, gentle eyes and silky coat that the breed is known for. The setting with the purple flowers in the background makes for a lovely portrait - it really highlights the puppy's beautiful coloring and sweet expression. Cavalier King Charles Spaniels are known for being friendly, affectionate companions. Is this your puppy?\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 98, 'output_tokens': 118, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat('What direction is the puppy facing?')\n\nThe puppy is facing toward the camera/viewer. You can see the puppy’s face straight-on, with both eyes visible and looking directly at the camera. The puppy appears to be lying down with its head up and oriented forward, giving us a clear frontal view of its sweet face.\n\n\nid: msg_018EqaD7EFveLCzSPbQmMMuE\ncontent: [{'citations': None, 'text': \"The puppy is facing toward the camera/viewer. You can see the puppy's face straight-on, with both eyes visible and looking directly at the camera. The puppy appears to be lying down with its head up and oriented forward, giving us a clear frontal view of its sweet face.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 227, 'output_tokens': 65, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat('What color is it?')\n\nThe puppy has a chestnut (reddish-brown) and white coat. The ears and patches around the eyes are a rich chestnut or reddish-brown color, while the face has a white blaze down the center and the chest/front appears to be white as well. This is the classic “Blenheim” color pattern that’s common in Cavalier King Charles Spaniels - the combination of chestnut and white markings.\n\n\nid: msg_01HzUTvRziMrSfdEjbo1kHnh\ncontent: [{'citations': None, 'text': 'The puppy has a chestnut (reddish-brown) and white coat. The ears and patches around the eyes are a rich chestnut or reddish-brown color, while the face has a white blaze down the center and the chest/front appears to be white as well. This is the classic \"Blenheim\" color pattern that\\'s common in Cavalier King Charles Spaniels - the combination of chestnut and white markings.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 300, 'output_tokens': 103, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nNote that the image is passed in again for every input in the dialog, so that number of input tokens increases quickly with this kind of chat. (For large images, using prompt caching might be a good idea.)\n\nchat.use\n\nIn: 625; Out: 286; Cache create: 0; Cache read: 0; Total Tokens: 911; Search: 0",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#extended-thinking",
    "href": "index.html#extended-thinking",
    "title": "claudette",
    "section": "Extended Thinking",
    "text": "Extended Thinking\nClaude &gt;=3.7 Sonnet and Opus have enhanced reasoning capabilities through extended thinking. This feature allows Claude to think through complex problems step-by-step, making its reasoning process transparent and its final answers more reliable.\nTo enable extended thinking, simply specify the number of thinking tokens using the maxthinktok parameter when making a call to Chat. The thinking process will appear in a collapsible section in the response.\nSome important notes about extended thinking:\n\nOnly available with select models\nAutomatically sets temperature=1 when enabled (required for thinking to work)\nCannot be used with prefill (these features are incompatible)\nThinking is presented in a separate collapsible block in the response\nThe thinking tokens count toward your usage but help with complex reasoning\n\nTo access models that support extended thinking, you can use has_extended_thinking_models.\n\nhas_extended_thinking_models\n\n{'claude-3-7-sonnet-20250219',\n 'claude-opus-4-20250514',\n 'claude-sonnet-4-20250514'}\n\n\n\nchat = Chat(model)\n\n\nchat('Write a sentence about Python!', maxthinktok=1024)\n\nPython is a versatile, high-level programming language known for its readable syntax and extensive libraries, making it popular for everything from web development to data science and machine learning.\n\n\nThinking\n\nThe user is asking for a sentence about Python. Since they didn’t specify, this could refer to either: 1. Python the programming language 2. Python the snake\nGiven the context and common usage, they’re most likely referring to the programming language Python. I’ll write a sentence about Python the programming language that’s informative and concise.\n\n\n\nid: msg_017EgYhUjsQxWkXN1zrRjFxK\ncontent: [{'signature': 'EokECkYIBBgCKkDNuftW7kYi6z6RSuzj4DNdtNRxcj486/U8U2NJHg51M+vGmQ1eN7ypz+w4/tpZCFHgWR9KFPXElnHrp3SkoWJrEgzJthIeSKqmoUbrP5YaDKGgUdib0TYhZriKcCIwDrQ2GTZ3D7zE0RVouKJLbzyRl+sQ6FQ+NwNQb5qrHw5Ylmzqxxk4Sa4GuzOEY8zVKvAC+7LfNqCd7jBjPVqaoSRmCubkKuWWeg60G39UCYm/W9VUsrDT1IHLTvOuK3KOYTQL1zqWt1XlBFj52haZIWRmjVU1w2S8EyKIJIThNRYFfT9CDuAeCYwUae8BFL4wm/MEUw+2tDNH3ei7JUvb4sk17cTrePvzpiQNtmHN8TctDBP2RgD7PpTUbjNUsvoRJFBSLLfNsd8wlvAkcph96fDV5dUJ/W3mkluG4XbTTY3ns/rlikAFLTphaoXeqM6buvm889Sep8BQdHuujHcuKWD3auTusayXE5O/9yYcWrU9qPxZ2bxF72tZ1Y65bTBYzhm9ohtB1LTy0x0XvOS76gfGZ8XaJ4vj3OMz1Cn5GSTCNbELTHHVBh5azPSCI9Qu44/ZBE2ZsFA0mtPCiP8cyhZmzAaHFnz2QaKwuTlfz5VnDPmNSNy8rqHywWlkMMA4g9+0SDZSxYJkCYBO+OUs1gNqlwwJQUyYOc1SEmpBkVQee2kYAQ==', 'thinking': \"The user is asking for a sentence about Python. Since they didn't specify, this could refer to either:\\n1. Python the programming language\\n2. Python the snake\\n\\nGiven the context and common usage, they're most likely referring to the programming language Python. I'll write a sentence about Python the programming language that's informative and concise.\", 'type': 'thinking'}, {'citations': None, 'text': 'Python is a versatile, high-level programming language known for its readable syntax and extensive libraries, making it popular for everything from web development to data science and machine learning.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 41, 'output_tokens': 119, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#web-search-and-server-tools",
    "href": "index.html#web-search-and-server-tools",
    "title": "claudette",
    "section": "Web Search and Server Tools",
    "text": "Web Search and Server Tools\nClaude supports server-side tools that run on Anthropic’s infrastructure. The flagship example is the web search tool, which allows Claude to search the web for up-to-date information to answer questions.\nUnlike client-side tools (where you provide functionality), server-side tools are managed by Anthropic. Claudette makes these easy to use with helper functions like search_conf().\n\nchat = Chat(model, sp='Be concise in your responses.', tools=[search_conf()])\npr = 'What is the current weather in San Diego?'\nr = chat(pr)\nr\n\nBased on the search results, here’s the current weather information for San Diego:\nToday (Saturday, June 21st) has a high of 67°F 1 2 with cloudy conditions early with partial sunshine expected later 3. Winds are from the SSW at 10 to 15 mph 4.\nTonight’s low will be around 62°F with overcast conditions and SSW winds at 10 to 15 mph 5.\nTemperatures are running about 4-7 degrees below normal for most areas 6, making it a cooler day than typical for this time of year in San Diego.\nAir quality is currently at an unhealthy level for sensitive groups, so those with breathing sensitivities should reduce outdoor time if experiencing symptoms 7.\n\n\nid: msg_01Kg3aNFF7ibUcWZxPpFNmu8\ncontent: [{'id': 'srvtoolu_01YazfLE5GfK4ET2Z4rsfcuz', 'input': {'query': 'San Diego weather today'}, 'name': 'web_search', 'type': 'server_tool_use'}, {'content': [{'encrypted_content': 'EqcCCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDF5HWNC1GnRw10SRnBoMsafoy8BqdMy4chO3IjALzgdeA/d4dT1Qx7JKFu6XeXmrHYIe2lxVFl7TqZkRDnKmPpA6mnvpkwGh9eW8RJgqqgGtR4kEv8KoMeWf9VHjh1oYyscLkN5LJq00R4X3C/Cfw9oLLdIAiN9tvq9g2Rzm0Qb/IP5GcdVfiwx7w5dRfL67oaWQ5IFIXSvv9ByLW/ERFI30UKhhKFYumApVuZEIge6CL0j56OQFXAkPVENWIlSnro+9BIKgf866WWvRo0kx2d+SiX9p3ainG+Zqbl55Bq+mvyOUgVabtSEfr+oY6FQPJYYT9ad0QxYUOxgD', 'page_age': '3 days ago', 'title': '10-Day Weather Forecast for San Diego, CA - The Weather Channel | weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/weather/tenday/l/San+Diego+CA?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'EroMCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDKBkST0tPvpOGw/SWxoMgJ/iK5dTJy/vMfmsIjAfH72hWmf/naqyXr46jfw0V/iSDaZJPzeQlCOJvENkQwXPp1sup75iYszy/zgR/YMqvQuXXkSUyo9y/bG3wdm4EkiaXeXkz5QSx0o2/SrZPqhOL9EXrQZAdEPo6KZZQeQdLKkwuEeoNj7vHE55EFXmwTLkN+QTPBsZ4mJ9gC/+3SGgbAMGdubcNnzUIlty+u0wAGTLDaJGeKlkIreF1znKqB9RefmQrpaErVDj7za3noPpsqUFRfDzTPfDUzOsRBKo3DNA2f86rYA1V6ot9qpSNOi1WFTnne5tMl68x/QTEXdgVpxolLK243bkcW1lBdAhwHdik+B/z1RHIXpyJWOLZgUwUtlGYm7jqacVVVF7rut/OlppO7+RA5mgpVjx47J40MUq7rmrcn+e9dXSUWduDPgsSCGtyM5jn0WgUgYyNRccdRPhLAeYcqa4xFYUmpbkGn5o7JrtkiU/OzS1pCeKfFRcjEtdCYeOHkj1FXsAJj31/qAlTZcWE3x4DuQbVt+yqpK4BXkpqTqd6ML3SaMm3/ac9TIaAz6Ob/ThK+A5qypeCB4YW9fyL5xG0oyHEKTefh+5If1nF23IW9Kbze5wZVTMobdolFr3uhS547DV2lngv0wEoTpOyADO6bz3qj0w2pB5DAxLPaW+4YPPRz8bKJEwMgLuDH+EP4wiUKpVrSjmBspXwM1WUSxD4X2lh7r6S4Jo7HUHTravhHuzuODKQ9fLCz2xnwto0fGs2uYQ9sQjIXOAYCBRpFfdYVYE68Br+7Ply0pD6J+Xix2NGHSYHpjMUbtCaYqvqwDO8UmlYA7YNyLs9Q/oFAcRXDqtUEZYD0d0h0mOS3zFYMySD9SfYNVx4SX1g3i6f+xCKfgdDMQ5B+jERSzkcHgR4jRifKE89qxfUCd4j72LhmJp8FJYxe993mqa7TXgm/SHe8AJrnG0EIo2dbWrTzn9SeQmZQzCvl0dpE79Qkgfb8j9BXQvmSfF2f8UOcymWo6vjPBCuPc1lvpvISLjcVIY06pAvh9zp3KUMxhc+K9qmyDTlglwj6feZZw/uyNux21y6CpSSITbEv+KuEJd5WaWphw5bqel0B/u/bwV/G2jkgbcwrb75HPGeJt+eNjyClvvJSsu6IgtkchIabdxo2zedcrilzAU9arLRJlcFNANSB0WilNrmmbc3jk+7RUmnc782nB1fz92JI6Cb7dvbncG1m4HHJy3Mh60ednlMO5GXTTnvIjAF2FaQp+MivMCin2YVwOn3N0GyKhVrbcD7EDrsXWA6yFls+AWAubYMJUS9ll/HeJhfSqD1zHyYQZ4Twic+W5kj4QCWYa0EWtnYs6NO76aRHOPSwbF8+/9XQmCUb4rHTXuPjxEL/uXktDE7K52sEq9v81wKz54urHiSGV1/TmARD6KSLhEejlrS5ydv4Du3YOdEXE5G2e4xPDQ1C1pwTEYKyLf/yrdeeKST9TiOxoj+bMIpwfyEq86+C4eajyNWZYnpx8IZviEo3jWOdiXFb53zyl7fIOeWBhWbrWmPjCazjSGofKGbFOz8jGTUOFqIpf94sqT1ent5X+nQTJ5rlrQPLXDfZbTrgP9pTZtZLlvezsYlIuqIFVWnnBOd0Y4IUqOw8e/3WYThftfGW5OkEp4sLMFd/4QnmoXqBtjf87fZLLkLV6ZZv26catrYFdv68doNSO6oTr7Gb1TtgrCJAgRhRarm/4MI3NpYD7D6oxspLjwPp85mND2g9jVtilz51L7NXpbGKcCc5o+e1MbpzZbKvzF6xSAtk2qKZ/i6P9p2tW/BMYG9O7wRDwRENWOwqA41BNdQpJ18a+emVgn5795o1AfLQVlm99so8izdz0sA8+fp1OjT9ziuRgsk9bOH1QhPYovNql0nQwulZJwYfQLz9okhXtM36aC2SGtNrE8IMbPdCIUdMQ0PznqgI17UPXjILvfdXBXCmbRT+CVbOHeeAx1juxSMwML9pWcymLRsAKowOPMj4meHF4relkA72QKR1uGEVIB/Wvl66WBDAcQyRgD', 'page_age': '3 days ago', 'title': 'San Diego, CA Weather Forecast | AccuWeather', 'type': 'web_search_result', 'url': 'https://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628'}, {'encrypted_content': 'Er0ECioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDBGutrl0Yo/Ph3ytgxoMmv0PMZzhuX1bUMAaIjB8A47OiTekaB3+wTaHtqniXxv1Syc6JTwDJgaWgpy/MxfY+iOIS58xXsHOd7d/vrUqwAOQc9TMOqSb0LGZCGaGxIwiXICeBOu9KYGmqzNtUJm31yQlCGwdOFeznCgec0B2/jhLUZMpoDuoL3ayVUeBYC7IlyW4Lrh7DR8+MUOf27YxozzhkdWKDDDqCf0hN40Qn69bGemDOFejCWrTyCj8ffYa29MAKRcAvQv0TQUehsNOy0xKYzeBA2z9zjzZp9GOesvqBv5/2AxQrVwygU31bLYEeiqHqLrfeQ798HK9oDFlAiHaS/gWmpK1+0d3UA+Y5KCKipBmUxy15LkEmoG0MoG3/OEDZ7mOGuuY5RqCW4hkdT4dzm6OsKfmiLoDG/XI2HNkpcTnCd3tO0yUZdwY3lX4vSjAS2wvFxNsl7b8YbaKM/U8H3JaTVntwyh7GHWYezHYaYXNiMK05KcQMKJlP/bZx82sQkq83jl15k55Nf5NR/R/1PHi/fqzLDwPOSug5RJ8dwdduWd1SF4qcfStBaOZ4fRdTwbxJgiAC6gmxWMAGfXg29iVSNsTBYVaGk+GPrUSIFxU0x36xejO0Vaz7wHL6XPwjvXMhVrWbuf5xMXKRNW3XG3X0AEB7h40x+0MN23BmmJ9G6+JQ5Ngog6z2An4GAM=', 'page_age': '3 days ago', 'title': 'San Diego weather forecast – NBC 7 San Diego', 'type': 'web_search_result', 'url': 'https://www.nbcsandiego.com/weather/'}, {'encrypted_content': 'EpcCCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDGlljWS7qosG4mSt3BoM6gy+Gh0f2zdXJ8kAIjAL5PfnNZR7Vex2zcFoqLody/xA+Yyoob62LVGMQ4+EhXd4CKgvxQEfpQLQgVvIH3UqmgGByQGU45dvgEJrKexyCEvra2CIAoYOTUiKNt6p7dVfp8++dfq28UU2mt5h10bL8ul8y0xeBu6new/tfwFJ6+GS/Bh6p+M+p87Jy65QQ/dgMhV+M7q3EAQUZjh642YMayI4nimm2yIwbLzNRXEszsp2kdmKKhxDpO3C5wp8fWLy5UpWvimjh5WSMnAzEpMoVDqD99FavgHvaPF7GAM=', 'page_age': '3 days ago', 'title': 'Weather Forecast and Conditions for San Diego, CA - The Weather Channel | Weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/weather/today/l/San+Diego+CA?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'ErEDCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDKDodoc/BpOij6btVBoMdtlDIIQ1rjzAl3XyIjAUXhC+GWPaQwx74WpJR7Xo+cVP0RjwhWd5LPSL+skOIE8sHVqz0Ry9jmq5jGri3wcqtAJrH5qNCAGieGFHQijAS1lfA2rn0EDH/tLBmC4nKW0MGQz/NLn49FuAcJuEZrw2149zcJ88XQ18hVEhWTkZ/BNEBujb9+M+QthIUUOPf6RplEX+DThq1KIuqbR0XBh71qThLM5ZfBjcvYS4429hpEP5DJo2FP0nqr9Ps8GX/hvIik33EXc4X3x16d649qqcRFwByb1DhE+NZVTiuu4WfljWXWBs+17ezkxxWazj3E9GtLBIL98fnMoOf4p9oTI8EgWe4RjcGqEaI6DWqlGquNgkc4IeqlzVkjWP4v90HoI7oegcDKtK/n+8pNaGqyBQizgf1NglM2gRBj3cZ9kt7cDX8p1KpmXrGsOSEK3mn6RAnjlsFQ2x7UjM7l980KCVKnqeguR0ZkCsvB+KM0AputjxlU+KrBgD', 'page_age': '3 days ago', 'title': 'San Diego, CA', 'type': 'web_search_result', 'url': 'https://www.weather.gov/sgx/'}, {'encrypted_content': 'EpkCCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDLXJ+1Ii8XIJ7AwW/xoMMbTKEdT8hw2J9bdSIjBYWJur7pQQqNijCyZjeN+VSYcaZe7xE/09hGS23TOjFLdvrOhGAMVSd3e2IDGUHCEqnAG6GJZO/sDcDEeEn/sobNJbNjM9VfNoJZEg+f/lZ+KXtMJELQ2Q14ot0iqQ0qKEjDxz3OMLkAYJg3uqeVMOq5QLgz6MNANEoCU+koTqIiYGZ++8Y0tKdtVD/Xrm0QW0fFkdJcN1PVt+6fN8aDJ5+95phOw5vEmRS9FRWg6aLDIwpxaNJ6z+Wbpff8zoSGUcPZFaFIUjAAU6qnx8kRoYAw==', 'page_age': None, 'title': 'San Diego, CA Weather Forecast | KGTV | kgtv.com', 'type': 'web_search_result', 'url': 'https://www.10news.com/weather'}, {'encrypted_content': 'EpQCCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDHL0i7qnzUCM4zRRAhoMAv3yQhl4BrqFyb0nIjBsyvNyrS90lUKCO/9admV9eU8x96+nDdrodoVAe9lpT2fNstMu4pS2Aer192MKKnwqlwGnu1DfFtpu/sSeugS3SUtYxT+ulZYw+ZQwhqLMOf+UadP2PrCAEDh5CM2pF4fMHRdt9GBYTgOA/3ug6W2Ci30q5QXwdiNC/7X2KQV6QrU83m//vy92K8PO9dwqv4B0T8uCSY18O+BtHHlZrzmzPgIWm4OTP2+Blh+f3X+yRubR9JiBehxtgS/IGmdWhzv6QjIbcFy5bhNDGAM=', 'page_age': '1 week ago', 'title': 'Hourly Weather Forecast for San Diego, CA - The Weather Channel | Weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/weather/hourbyhour/l/San+Diego+CA?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'Ev0LCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDEYX+2bALYXzQ6feEhoMZaW1cXK7efdUNoDNIjBW2ZS4AEu//SwypPKF8m5uvw2Ats1bCxXnLXTD3v2d/bwrwTPMRx5SPoC7QDtYQRgqgAu0Z3nSWGW4pXnpMfjQUN05yjt++RoCW35vjAN1oiSW4U+P+03Gsf+4z+zKLRKkuPCj4CQmd0X0Z7rqi3uW8+8KMBw5yl90QrjDjivFDwxAkyCTGImrhyWEX+/JT9sJ3bSqevgnd9GrILv0lrqdfgkoIgdEuEMuIIJpVxPDqDoeYDgDGF3FRs7iultqHndd68JhMXVShxi+lQaINVYRtLfX1HWrKlb2M1PySslVAdUWbQqeyvRsRYJotIIN5uAg3EoYcGQBwFA0ifvG70jlcOWDR5Kx5w2A4mISadBHz9mDhaDxJeOCssJdSo465wYGSRzXiyIFO7OOViZSIoHNcPEmuHgqXSzrF4NN+u5PbLaS1fmuUesVPOwvKi1g3MJN/LNvB9MWzpMNcnP0BpDSD/hKGDpPKnxAWYVz1v3Nqwi/IuEmtpa4qWlWA+7t47NfFyxF3l89uaMk81qFoUn6L/P2q6w7VeEAnXRxNkRyKqeQ1FOC5CfgBdvhYxGqxlQ6Z4zwZvJUQ4DUxqjOYroV/WV65cbJ0ZtRT0z/S9OzK9k7xL///oNTIcnAPw9FfXnEiG3Rz8kX06gcgdjDLRkwDy+tYO+VUCmSlZpu8XBszZ7dOGBWbXPjDjYg4t5eqIcLF+uw1hZYoo8xNTGnsk2d/2DpXd8seY5sa4gAUzCwfXwy4MiMmmEonIG6Ki3jNMQ22tjPJMKqgQGy1EdsEqcUephoIq0etHo/J2HsyDvoLxJLbhtm6FsgqrQ4ITzHEt6wDWHOh7+iQSObM674FaPyvzvSEomriGPV7aYynVUAum3MVl9eoeP2W2Xm0qxTnuT3gKnlz766nI3ghO7RHpXAZYpo1gzeq1ZrxMYO0kI9iTGYKf+z+WyO9s9FFKAR4OxS/2fI9W3VHiGSqDpqI87Ez3A3o3uqKqOhvQI0qG+QfZFI1+ll0Wr1CbrGos9dgezqJ9/7GFCNP+cCfV3Y27GsWBots76htL6GD1PE7RsyelyQ9TDXblEQLLDKkH1jnngYq+2RfNrZhKFvll+L2+oDVbk4n+Rb0+fLti1JQi91O8BqMSb7pD3Oa2sdMlSq0qoIFl0T6wanLUNgoIg5GE8R2QBukwWa9oW8jmaJDrKlqe79vWvCDjisPCdfo+X+h7YkRlMW/FoiDJ5X189IxckvoOlY7r6BVEdERcquxbsp0J0uB0JNuWdsa/XGlG1uecYGKmw8pGVwIkYTP2U+Bgfn0XuXKSLHxOAxbCWovcDrbjOA3yCyKQlCt3uyE7zpVlBGAMcUcSy+QbPYx5xdkz2mx/qkmUkjCvp70EbyjPeZehlcTlsqJ7ZIRi+rcH+b4fWoCUr90rUAqbcJMDM4tSLtqvVq4TXbj0pBseXFi9d5bnqByC5By6I3PiuQtkT+bxGYGFvhuEJhoC+CgCOobUIIcOPhZH5lIZTYMQcf3l3gfXhUbuu5WOglaOp66rjxNsaOZmsMfquyX1n+65uJSRpixbPiDDXv/Myig7vn2KdZtyoqz/E7tjcSFD0Vyvc6jKL73H3vs9nOWGDf0w6AJUoLXrhUW921N0+0A5bD4qUxLKZgBkFl33R+dKmKgtMs4iO4C81RPaQdLVSA/wm9jkSAOj6GKk1IZGFKOgiqMXMtItnmKktBbYSD+gJosUyeIAIgsUiP/r9uZA8AsKEMQ+qzQqIS3zSltWnMfN79ehN9MtGDnZc9pjMdXktpqKenYuF/QDttqgLfEVSJaQtXgiXPJtgXJtmxXuXWRLAaqsid07QEvP1N8DqeFIMKHOG33NDJigjxPFnUxbS7elt8ECcbRYn+gewDwydAb0jUCyL8nuE5ySll51eTQqFyfP3xnT092PTB5HRyFBUlD3mw5W168u2HGAM=', 'page_age': None, 'title': 'San Diego, CA 10-Day Weather Forecast | Weather Underground', 'type': 'web_search_result', 'url': 'https://www.wunderground.com/forecast/us/ca/san-diego'}, {'encrypted_content': 'Ev0ECioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDFqrWvXcDBaRhAEIERoMEMwkIlYRNrbpob8qIjAGpulVwN56DZ4z4+PuEB3gdYm6QZ5Qvq+6RFvOLnEGDg+mpsIvb2TL4iauDizcEsUqgAT3/Sza241GQ6OmRz38xfUdXYqE5zatMSVDZ8Pzsd11fgBJg8voUcxKfPRPQWlA8FYW8+K4vDvv5cahR9rbVN829R/VQxq7YdcMsD9D5pbk9WButOmQLwI5/MsvnKo0MJ2e6kVcI1DVTwwHxoF0AJdkXUm/9x5danZ35QmA3FIR+7AOBCgtlOmwwIO1nTB+x6+8gf8DB0Jsgv6scqI/PqYxTYH8pZUEs3sA0pXQWJIcbtbWPRqxvfr6KYTtBAKJcr4XmsOMdi4OhVxzXhed1OjB1Jvebhi7Z+CbOOEZBuL2T7inzxoNlHvd3rhuZoDzpb9IWEMx/29fjwWhy+ztWi4Fdl25QgpWokl9cjDtq+6DEkf97+5ks6oVZU1dKoKq2y6S7cT3SL30IOzpdNox9Nh9FrOZeui/aT2zD7imuB+dyx9ffHi07Ulje7R9UWwBvDzRPMP4Ilwe4nrcQWWloso80KTfIixUTmel1bPKxVdrag/2+4kD6ahHpm2cLazWqTc+GvVY5+IRb2C5Y6pve4tWPVZC584151GHbdDZB2FamZJsdBlVL5VAF7Cz2U2mukxcuFF7Vwh3lpvpuqkldp4yWf2UJVpGMOOgDMgRi9qn+fAqE9jEIKoqXRhrVnKlgAlMGpnFfxu1IvxOLQQRqCNRltm5whIy5YhZa+7bllx+NRgD', 'page_age': '3 days ago', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}, {'encrypted_content': 'Ev8CCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDOOoeUPUoDED8O83ZhoM30uUue3UQ1WQ6At6IjD+k7S7lYoiPFc5urIX1kWyFxcLj14bmNmI9YackQTQAU27o6IGbFdwaU+40URG2xQqggLYvUzF4uC9bk9e+C5CbKLU1WAsE7Nsb3YpFYsFiwMKqPamqEVSZE/xxUGQZ9w5tbtftdchhIs0bupnPj+G3BgO+ivdO9VcHBrqJwOk+hQ+XhQp3kLRubgZ9ozPpTZDK0xhpuFh18mFwsHgi/dIH478C1yYA50B0d/qL5C4V6NdYfDYsOXL0Ce1y4L8JxlUi//BPq23m1FfJeVo0vPYKTWm0D2TGTEnLygV9ZI9/wUF5H+gDYimj/QJZW1MWWf7bUQl85I1AyroDE2h8pae6FT0VTVWWIUJiBOWr48xbjieS+LHRxP7/XhpZpI2x0zz3WLi1BYdxHH04yxnjxLcQILrOuoYAw==', 'page_age': '5 days ago', 'title': 'National Weather Service', 'type': 'web_search_result', 'url': 'https://forecast.weather.gov/zipcity.php?inputstring=San+Diego,CA/'}], 'tool_use_id': 'srvtoolu_01YazfLE5GfK4ET2Z4rsfcuz', 'type': 'web_search_tool_result'}, {'citations': None, 'text': \"Based on the search results, here's the current weather information for San Diego:\\n\\n\", 'type': 'text'}, {'citations': [{'cited_text': 'TomorrowSat 06/21 High · 67 °F · 14% Precip. ', 'encrypted_index': 'Eo8BCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDKwATF21Da6JaeprrRoMR4n2dYDzq6Grz6kOIjDubzeZ5yWRJE4JTY/En0I9Ue7hW3xNHVY1Nb651cmT84e3E/CK5IihYjOjT0ri+bMqEzkJobhLc+mcf18NFKDVD/eXWJkYBA==', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}, {'cited_text': 'High 67F. ', 'encrypted_index': 'Eo8BCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDBZRJenhcEsF45RP3hoM9byW9q+/yaWr+G32IjAOpd1oMmv1j3abI8JHjvI1b5ZvEPvFR0RzxtY1jsxEyRv9IJkysuqnmbSwH3g32TgqE+VO+8ZZPNjG9foScv6WV79YDUAYBA==', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}], 'text': 'Today (Saturday, June 21st) has a high of 67°F', 'type': 'text'}, {'citations': None, 'text': ' with ', 'type': 'text'}, {'citations': [{'cited_text': '/ 0.00 °in Cloudy early with partial sunshine expected late. ', 'encrypted_index': 'Eo8BCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDB4nMEZc/F7OchMulRoMGN8vERmCYSPIeM52IjBEWjKA8pyazlviIcAv3VdKXXstJzWI89Lth9GVQTgJe+aHBo6Z9RixGwe9H65I4iEqE6r+cdWvSki3A5y7liT1a2+EuPgYBA==', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}], 'text': 'cloudy conditions early with partial sunshine expected later', 'type': 'text'}, {'citations': None, 'text': '. ', 'type': 'text'}, {'citations': [{'cited_text': 'Winds SSW at 10 to 15 mph. ', 'encrypted_index': 'Eo8BCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDB45Fg4fI2lZagCjPRoM44KF0iEojWBopwrHIjBhn7dgVM1Ff/cqtJ/lTjfQ/jwVGUPTMJqvlWxrNi2vlcn6nHSZw+cUefs/Ruz/GNgqE6jMHyEpfOkI5cEy1xxL1qwAZvIYBA==', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}], 'text': 'Winds are from the SSW at 10 to 15 mph', 'type': 'text'}, {'citations': None, 'text': '.\\n\\n', 'type': 'text'}, {'citations': [{'cited_text': 'Low 62F. Winds SSW at 10 to 15 mph. ', 'encrypted_index': 'EpEBCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDGs1z0BKFApU+3H2sxoMHemxpcDkrIGd4oSRIjAWWpByOKdjFHplptGY/sqWHuZVPAxLushiCw0j+aLQ3+bpwzSikTDw6Eb075la0fYqFeOQNDFP6pV830agKs390gtIQ9hn2RgE', 'title': 'San Diego, CA Weather Conditions | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/weather/us/ca/san-diego'}], 'text': \"Tonight's low will be around 62°F with overcast conditions and SSW winds at 10 to 15 mph\", 'type': 'text'}, {'citations': None, 'text': '.\\n\\n', 'type': 'text'}, {'citations': [{'cited_text': 'Cooler today with highs around 4-7 degrees below normal for most areas, still slightly above normal in the lower deserts. ', 'encrypted_index': 'Eo8BCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDKmS4xmv51SRhiupjBoM1jB2H6k2FU08pQ3GIjAV+DJ6rRuV2b6Q7ignq8PgwpnBySIrcI0FjJyUkxWXMUqYQYSPaTtiNLaSUJi1kh4qE+SXxbI2WryAsUjDE9uQS3F/91QYBA==', 'title': 'San Diego, CA', 'type': 'web_search_result_location', 'url': 'https://www.weather.gov/sgx/'}], 'text': 'Temperatures are running about 4-7 degrees below normal for most areas', 'type': 'text'}, {'citations': None, 'text': ', making it a cooler day than typical for this time of year in San Diego.\\n\\n', 'type': 'text'}, {'citations': [{'cited_text': 'The air has reached a high level of pollution and is unhealthy for sensitive groups. Reduce time spent outside if you are feeling symptoms such as dif...', 'encrypted_index': 'EpEBCioIBBgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDK8D4vc8KfCrlx9emxoMMLnROCL/VkErH3i/IjA/9/wpz9prNlBSXXcsTY2S+xdsPRDTNhPl7sYwMQoZ1OAvK8zbv5m0QT4Z0rVOkO8qFX/4Kq1l4tkCVlYlPmm9TE6ED9r0ABgE', 'title': 'San Diego, CA Weather Forecast | AccuWeather', 'type': 'web_search_result_location', 'url': 'https://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628'}], 'text': 'Air quality is currently at an unhealthy level for sensitive groups, so those with breathing sensitivities should reduce outdoor time if experiencing symptoms', 'type': 'text'}, {'citations': None, 'text': '.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 7302, 'output_tokens': 325, 'server_tool_use': {'web_search_requests': 1}, 'service_tier': 'standard'}\n\n\n\n\nThe search_conf() function creates the necessary configuration for the web search tool. You can customize it with several parameters:\nsearch_conf(\n    max_uses=None,               # Maximum number of searches Claude can perform\n    allowed_domains=None,        # List of domains to search within (e.g., ['wikipedia.org'])\n    blocked_domains=None,        # List of domains to exclude (e.g., ['twitter.com'])\n    user_location=None           # Location context for search\n)\nWhen Claude uses the web search tool, the response includes citations linking to the source information. Claudette automatically formats these citations and provides them as footnotes in the response.\nWeb search usage is tracked separately from normal token usage in the usage statistics:\n\nchat.use\n\nIn: 7302; Out: 325; Cache create: 0; Cache read: 0; Total Tokens: 7627; Search: 1\n\n\nWeb search requests have their own pricing. As of May 2024, web searches cost $10 per 1,000 requests.",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#text-editor-tool",
    "href": "index.html#text-editor-tool",
    "title": "claudette",
    "section": "Text Editor Tool",
    "text": "Text Editor Tool\nClaudette provides support for Anthropic’s special Text Editor Tool, which allows Claude to view and modify files directly. Unlike regular function-calling tools, the text editor tool uses a predefined schema built into Claude’s model.\nImportant notes about the text editor tool:\n\nIt’s schema-less - you provide a configuration but not a schema\nIt uses type identifiers like “text_editor_20250124” specific to Claude models\nYou must implement a dispatcher function (in Claudette, it’s str_replace_based_edit_tool)\nDifferent commands route through this single dispatcher function\n\nThe text editor tool allows Claude to:\n\nView file or directory contents\nCreate new files\nInsert text at specific line numbers\nReplace text within files\n\n\nfrom claudette.text_editor import text_editor_conf, str_replace_based_edit_tool\nfrom toolslm.funccall import mk_ns\n\n# Create a chat with the text editor tool\nchat = Chat(model, sp='Be concise in your responses.',\n            tools=[text_editor_conf['sonnet']], ns=mk_ns(str_replace_based_edit_tool))\n\n# Now Claude can explore files\nfor o in chat.toolloop('Please explain concisely what my _quarto.yml does. Use your tools, and explain before each usage what you are doing.'):\n    if not isinstance(o,dict): display(o)\n\nI’ll examine your _quarto.yml file to explain what it does. Let me start by looking at the current directory to locate the file.\n\n\nid: msg_01S59jijaZGLN9jq525KoDRu\ncontent: [{'citations': None, 'text': \"I'll examine your _quarto.yml file to explain what it does. Let me start by looking at the current directory to locate the file.\", 'type': 'text'}, {'id': 'toolu_01NxKxWNHFroLYxTULzFnBAp', 'input': {'command': 'view', 'path': '.'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1120, 'output_tokens': 106, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nNow I can see the _quarto.yml file exists. Let me examine its contents to understand what it configures.\n\n\nid: msg_015w8s5yw4RBs4dXgfLx2CDS\ncontent: [{'citations': None, 'text': 'Now I can see the _quarto.yml file exists. Let me examine its contents to understand what it configures.', 'type': 'text'}, {'id': 'toolu_01ToUv8CSQH69Kx2ahBSwcGf', 'input': {'command': 'view', 'path': '/_Users/jhoward/aai-ws/claudette/_quarto.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 2738, 'output_tokens': 120, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nLet me use the correct path:\n\n\nid: msg_01Baaa1otgra5CHimvP9Ja5s\ncontent: [{'citations': None, 'text': 'Let me use the correct path:', 'type': 'text'}, {'id': 'toolu_01FTCbeJLRdAyfqqnq3pAQFa', 'input': {'command': 'view', 'path': '/Users/jhoward/aai-ws/claudette/_quarto.yml'}, 'name': 'str_replace_based_edit_tool', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 2896, 'output_tokens': 102, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nYour _quarto.yml file configures a Quarto website project with the following key settings:\nProject Configuration: - Sets up a website project type - Includes all .txt files as resources - Configures preview server on port 3000 without auto-opening browser\nHTML Formatting: - Uses the “cosmo” theme with custom CSS from styles.css - Enables table of contents, code tools, and syntax highlighting - Sets a custom layout with wider body (1800px) and narrower sidebar (180px) - Uses “arrow” highlight style with custom code block styling - Keeps markdown files during rendering\nWebsite Features: - Enables social media cards (Twitter and Open Graph) - Adds a search-enabled navbar with primary background - Uses a floating sidebar style - Links to GitHub issues via repo-actions\nMetadata Sources: - Pulls additional configuration from nbdev.yml and sidebar.yml files\nThis appears to be set up for a documentation website, likely for a Python package using nbdev (given the nbdev.yml reference), with a focus on displaying code and technical content with good readability and navigation.\n\n\nid: msg_01Ba23FNyw6xy7KdtTVnBdk6\ncontent: [{'citations': None, 'text': 'Your_quarto.ymlfile configures a Quarto website project with the following key settings:\\n\\n**Project Configuration:**\\n- Sets up a website project type\\n- Includes all.txtfiles as resources\\n- Configures preview server on port 3000 without auto-opening browser\\n\\n**HTML Formatting:**\\n- Uses the \"cosmo\" theme with custom CSS fromstyles.css\\n- Enables table of contents, code tools, and syntax highlighting\\n- Sets a custom layout with wider body (1800px) and narrower sidebar (180px)\\n- Uses \"arrow\" highlight style with custom code block styling\\n- Keeps markdown files during rendering\\n\\n**Website Features:**\\n- Enables social media cards (Twitter and Open Graph)\\n- Adds a search-enabled navbar with primary background\\n- Uses a floating sidebar style\\n- Links to GitHub issues via repo-actions\\n\\n**Metadata Sources:**\\n- Pulls additional configuration fromnbdev.ymlandsidebar.ymlfiles\\n\\nThis appears to be set up for a documentation website, likely for a Python package using nbdev (given the nbdev.yml reference), with a focus on displaying code and technical content with good readability and navigation.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 3235, 'output_tokens': 267, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 9989; Out: 595; Cache create: 0; Cache read: 0; Total Tokens: 10584; Search: 0",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#other-model-providers",
    "href": "index.html#other-model-providers",
    "title": "claudette",
    "section": "Other model providers",
    "text": "Other model providers\nYou can also use 3rd party providers of Anthropic models, as shown here.\n\nAmazon Bedrock\nThese are the models available through Bedrock:\n\nmodels_aws\n\n['anthropic.claude-sonnet-4-20250514-v1:0',\n 'claude-3-5-haiku-20241022',\n 'claude-3-7-sonnet-20250219',\n 'anthropic.claude-3-opus-20240229-v1:0',\n 'anthropic.claude-3-5-sonnet-20241022-v2:0']\n\n\nTo use them, call AnthropicBedrock with your access details, and pass that to Client:\n\nfrom anthropic import AnthropicBedrock\n\n\nab = AnthropicBedrock(\n    aws_access_key=os.environ['AWS_ACCESS_KEY'],\n    aws_secret_key=os.environ['AWS_SECRET_KEY'],\n)\nclient = Client(models_aws[-1], ab)\n\nNow create your Chat object passing this client to the cli parameter – and from then on, everything is identical to the previous examples.\n\nchat = Chat(cli=client)\nchat(\"I'm Jeremy\")\n\n\n\nGoogle Vertex\nThese are the models available through Vertex:\n\nmodels_goog\n\nTo use them, call AnthropicVertex with your access details, and pass that to Client:\n\nfrom anthropic import AnthropicVertex\nimport google.auth\n\n\n# project_id = google.auth.default()[1]\n# gv = AnthropicVertex(project_id=project_id, region=\"us-east5\")\n# client = Client(models_goog[-1], gv)\n\n\nchat = Chat(cli=client)\nchat(\"I'm Jeremy\")",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#extensions",
    "href": "index.html#extensions",
    "title": "claudette",
    "section": "Extensions",
    "text": "Extensions\n\nPydantic Structured Ouput",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "claudette",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.wunderground.com/weather/us/ca/san-diego “TomorrowSat 06/21 High · 67 °F · 14% Precip.”↩︎\nhttps://www.wunderground.com/weather/us/ca/san-diego “High 67F.”↩︎\nhttps://www.wunderground.com/weather/us/ca/san-diego “/ 0.00 °in Cloudy early with partial sunshine expected late.”↩︎\nhttps://www.wunderground.com/weather/us/ca/san-diego “Winds SSW at 10 to 15 mph.”↩︎\nhttps://www.wunderground.com/weather/us/ca/san-diego “Low 62F. Winds SSW at 10 to 15 mph.”↩︎\nhttps://www.weather.gov/sgx/ “Cooler today with highs around 4-7 degrees below normal for most areas, still slightly above normal in the lower deserts.”↩︎\nhttps://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628 “The air has reached a high level of pollution and is unhealthy for sensitive groups. Reduce time spent outside if you are feeling symptoms such as dif…”↩︎",
    "crumbs": [
      "claudette"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Claudette’s source",
    "section": "",
    "text": "This is the ‘literate’ source code for Claudette. You can view the fully rendered version of the notebook here, or you can clone the git repo and run the interactive notebook in Jupyter. The notebook is converted the Python module claudette/core.py using nbdev. The goal of this source code is to both create the Python module, and also to teach the reader how it is created, without assuming much existing knowledge about Claude’s API.\nMost of the time you’ll see that we write some source code first, and then a description or discussion of it afterwards.",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#setup",
    "href": "core.html#setup",
    "title": "Claudette’s source",
    "section": "Setup",
    "text": "Setup\n\nimport os\n# os.environ['ANTHROPIC_LOG'] = 'debug'\n\nTo print every HTTP request and response in full, uncomment the above line. This functionality is provided by Anthropic’s SDK.\n\nfrom anthropic.types import Model\nfrom claudette.text_editor import *\nfrom typing import get_args\nfrom datetime import datetime\nfrom pprint import pprint\nfrom IPython.display import Image\n\nimport warnings\n\n\nwarnings.filterwarnings(\"ignore\", message=\"Pydantic serializer warnings\")\n\n\n\n\n\n\n\nTip\n\n\n\nIf you’re reading the rendered version of this notebook, you’ll see an “Exported source” collapsible widget below. If you’re reading the source notebook directly, you’ll see #| exports at the top of the cell. These show that this piece of code will be exported into the python module that this notebook creates. No other code will be included – any other code in this notebook is just for demonstration, documentation, and testing.\nYou can toggle expanding/collapsing the source code of all exported sections by using the &lt;/&gt; Code menu in the top right of the rendered notebook page.\n\n\n\n\nExported source\nmodel_types = {\n    # Anthropic\n    'claude-opus-4-1-20250805': 'opus',\n    'claude-sonnet-4-20250514': 'sonnet',\n    'claude-opus-4-20250514': 'opus-4',\n    'claude-3-opus-20240229': 'opus-3',\n    'claude-3-7-sonnet-20250219': 'sonnet-3-7',\n    'claude-3-5-sonnet-20241022': 'sonnet-3-5',\n    'claude-3-haiku-20240307': 'haiku-3',\n    'claude-3-5-haiku-20241022': 'haiku-3-5',\n    # AWS\n    'anthropic.claude-opus-4-1-20250805-v1:0': 'opus',\n    'anthropic.claude-3-5-sonnet-20241022-v2:0': 'sonnet',\n    'anthropic.claude-3-opus-20240229-v1:0': 'opus-3',\n    'anthropic.claude-3-sonnet-20240229-v1:0': 'sonnet',\n    'anthropic.claude-3-haiku-20240307-v1:0': 'haiku',\n    # Google\n    'claude-opus-4-1@20250805': 'opus',\n    'claude-3-5-sonnet-v2@20241022': 'sonnet',\n    'claude-3-opus@20240229': 'opus-3',\n    'claude-3-sonnet@20240229': 'sonnet',\n    'claude-3-haiku@20240307': 'haiku',\n}\n\nall_models = list(model_types)\n\n\n\nmodels\n\n['claude-opus-4-1-20250805',\n 'claude-sonnet-4-20250514',\n 'claude-opus-4-20250514',\n 'claude-3-opus-20240229',\n 'claude-3-7-sonnet-20250219',\n 'claude-3-5-sonnet-20241022',\n 'claude-3-haiku-20240307',\n 'claude-3-5-haiku-20241022']\n\n\n\n\nExported source\ntext_only_models = ('claude-3-5-haiku-20241022',)\n\n\n\n\nExported source\nhas_streaming_models = set(all_models)\nhas_system_prompt_models = set(all_models)\nhas_temperature_models = set(all_models)\nhas_extended_thinking_models = {\n    'claude-opus-4-1-20250805', 'claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219'\n}\n\n\n\nhas_extended_thinking_models\n\n{'claude-3-7-sonnet-20250219',\n 'claude-opus-4-1-20250805',\n 'claude-opus-4-20250514',\n 'claude-sonnet-4-20250514'}\n\n\n\nsource\n\ncan_use_extended_thinking\n\n can_use_extended_thinking (m)\n\n\n\nExported source\ndef can_stream(m): return m in has_streaming_models\ndef can_set_system_prompt(m): return m in has_system_prompt_models\ndef can_set_temperature(m): return m in has_temperature_models\ndef can_use_extended_thinking(m): return m in has_extended_thinking_models\n\n\n\nsource\n\n\ncan_set_temperature\n\n can_set_temperature (m)\n\n\nsource\n\n\ncan_set_system_prompt\n\n can_set_system_prompt (m)\n\n\nsource\n\n\ncan_stream\n\n can_stream (m)\n\nWe include these functions to provide a uniform library interface with cosette since openai models such as o1 do not have many of these capabilities.\n\nassert can_stream('claude-3-5-sonnet-20241022') and can_set_system_prompt('claude-3-5-sonnet-20241022') and can_set_temperature('claude-3-5-sonnet-20241022')\n\nThese are the current versions and prices of Anthropic’s models at the time of writing.\n\nmodel = models[1]; model\n\n'claude-sonnet-4-20250514'\n\n\nFor examples, we’ll use the latest Sonnet, since it’s awesome.",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#antropic-sdk",
    "href": "core.html#antropic-sdk",
    "title": "Claudette’s source",
    "section": "Antropic SDK",
    "text": "Antropic SDK\n\ncli = Anthropic()\n\nThis is what Anthropic’s SDK provides for interacting with Python. To use it, pass it a list of messages, with content and a role. The roles should alternate between user and assistant.\n\n\n\n\n\n\nTip\n\n\n\nAfter the code below you’ll see an indented section with an orange vertical line on the left. This is used to show the result of running the code above. Because the code is running in a Jupyter Notebook, we don’t have to use print to display results, we can just type the expression directly, as we do with r here.\n\n\n\nm = {'role': 'user', 'content': \"I'm Jeremy\"}\nr = cli.messages.create(messages=[m], model=model, max_tokens=100)\nr\n\nNice to meet you, Jeremy! How are you doing today?\n\n\nid: msg_01WJzE6MFdW7s3Tqq3VW5uzF\ncontent: [{'citations': None, 'text': 'Nice to meet you, Jeremy! How are you doing today?', 'type': 'text'}]\nmodel: claude-opus-4-1-20250805\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 10, 'output_tokens': 16, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nFormatting output\nThat output is pretty long and hard to read, so let’s clean it up. We’ll start by pulling out the Content part of the message. To do that, we’re going to write our first function which will be included to the claudette/core.py module.\n\n\n\n\n\n\nTip\n\n\n\nThis is the first exported public function or class we’re creating (the previous export was of a variable). In the rendered version of the notebook for these you’ll see 4 things, in this order (unless the symbol starts with a single _, which indicates it’s private):\n\nThe signature (with the symbol name as a heading, with a horizontal rule above)\nA table of paramater docs (if provided)\nThe doc string (in italics).\nThe source code (in a collapsible “Exported source” block)\n\nAfter that, we generally provide a bit more detail on what we’ve created, and why, along with a sample usage.\n\n\n\nsource\n\n\nfind_block\n\n find_block (r:collections.abc.Mapping, blk_type:type|str=&lt;class\n             'anthropic.types.text_block.TextBlock'&gt;)\n\nFind the first block of type blk_type in r.content.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nr\nMapping\n\nThe message to look in\n\n\nblk_type\ntype | str\nTextBlock\nThe type of block to find\n\n\n\n\n\nExported source\ndef _type(x):\n    try: return x.type\n    except AttributeError: return x.get('type')\n\ndef find_block(r:abc.Mapping, # The message to look in\n               blk_type:type|str=TextBlock  # The type of block to find\n              ):\n    \"Find the first block of type `blk_type` in `r.content`.\"\n    f = (lambda x:_type(x)==blk_type) if isinstance(blk_type,str) else (lambda x:isinstance(x,blk_type))\n    return first(o for o in r.content if f(o))\n\n\nThis makes it easier to grab the needed parts of Claude’s responses, which can include multiple pieces of content. By default, we look for the first text block. That will generally have the content we want to display.\n\nfind_block(r)\n\nTextBlock(citations=None, text='Nice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?', type='text')\n\n\n\ndef contents(r):\n    \"Helper to get the contents from Claude response `r`.\"\n    blk = find_block(r)\n    if not blk and r.content: blk = r.content[0]\n    return blk.text.strip() if hasattr(blk,'text') else str(blk)\n\nFor display purposes, we often just want to show the text itself.\n\ncontents(r)\n\n'Nice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?'\n\n\n\n\nExported source\n@patch\ndef _repr_markdown_(self:(Message)):\n    det = '\\n- '.join(f'{k}: `{v}`' for k,v in self.model_dump().items())\n    cts = re.sub(r'\\$', '&#36;', contents(self))  # escape `$` for jupyter latex\n    return f\"\"\"{cts}\n\n&lt;details&gt;\n\n- {det}\n\n&lt;/details&gt;\"\"\"\n\n\nJupyter looks for a _repr_markdown_ method in displayed objects; we add this in order to display just the content text, and collapse full details into a hideable section. Note that patch is from fastcore, and is used to add (or replace) functionality in an existing class. We pass the class(es) that we want to patch as type annotations to self. In this case, _repr_markdown_ is being added to Anthropic’s Message class, so when we display the message now we just see the contents, and the details are hidden away in a collapsible details block.\n\nr\n\nNice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?\n\n\nid: msg_01J8ZkXuLCPbVVrnJHLkPE61\ncontent: [{'citations': None, 'text': 'Nice to meet you, Jeremy! How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 10, 'output_tokens': 25, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nOne key part of the response is the usage key, which tells us how many tokens we used by returning a Usage object.\nWe’ll add some helpers to make things a bit cleaner for creating and formatting these objects.\n\nr.usage\n\nIn: 10; Out: 25; Cache create: 0; Cache read: 0; Total Tokens: 35; Search: 0\n\n\n\nsource\n\n\nserver_tool_usage\n\n server_tool_usage (web_search_requests=0)\n\nLittle helper to create a server tool usage object\n\n\nExported source\ndef server_tool_usage(web_search_requests=0):\n    'Little helper to create a server tool usage object'\n    return ServerToolUsage(web_search_requests=web_search_requests)\n\n\n\nsource\n\n\nusage\n\n usage (inp=0, out=0, cache_create=0, cache_read=0,\n        server_tool_use=ServerToolUsage(web_search_requests=0))\n\nSlightly more concise version of Usage.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninp\nint\n0\ninput tokens\n\n\nout\nint\n0\nOutput tokens\n\n\ncache_create\nint\n0\nCache creation tokens\n\n\ncache_read\nint\n0\nCache read tokens\n\n\nserver_tool_use\nServerToolUsage\nServerToolUsage(web_search_requests=0)\nserver tool use\n\n\n\n\n\nExported source\ndef usage(inp=0, # input tokens\n          out=0,  # Output tokens\n          cache_create=0, # Cache creation tokens\n          cache_read=0, # Cache read tokens\n          server_tool_use=server_tool_usage() # server tool use\n         ):\n    'Slightly more concise version of `Usage`.'\n    return Usage(input_tokens=inp, output_tokens=out, cache_creation_input_tokens=cache_create,\n                 cache_read_input_tokens=cache_read, server_tool_use=server_tool_use)\n\n\nThe constructor provided by Anthropic is rather verbose, so we clean it up a bit, using a lowercase version of the name.\n\nusage(5)\n\nIn: 5; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 5; Search: 0\n\n\n\nsource\n\n\nUsage.total\n\n Usage.total ()\n\n\n\nExported source\ndef _dgetattr(o,s,d): \n    \"Like getattr, but returns the default if the result is None\"\n    return getattr(o,s,d) or d\n\n@patch(as_prop=True)\ndef total(self:Usage): return self.input_tokens+self.output_tokens+_dgetattr(self, \"cache_creation_input_tokens\",0)+_dgetattr(self, \"cache_read_input_tokens\",0)\n\n\nAdding a total property to Usage makes it easier to see how many tokens we’ve used up altogether.\n\nusage(5,1).total\n\n6\n\n\n\nsource\n\n\nUsage.__repr__\n\n Usage.__repr__ ()\n\nReturn repr(self).\n\n\nExported source\n@patch\ndef __repr__(self:Usage):\n    io_toks = f'In: {self.input_tokens}; Out: {self.output_tokens}'\n    cache_toks = f'Cache create: {_dgetattr(self, \"cache_creation_input_tokens\",0)}; Cache read: {_dgetattr(self, \"cache_read_input_tokens\",0)}'\n    server_tool_use = _dgetattr(self, \"server_tool_use\",server_tool_usage())\n    server_tool_use_str = f'Search: {server_tool_use.web_search_requests}'\n    total_tok = f'Total Tokens: {self.total}'\n    return f'{io_toks}; {cache_toks}; {total_tok}; {server_tool_use_str}'\n\n\nIn python, patching __repr__ lets us change how an object is displayed. (More generally, methods starting and ending in __ in Python are called dunder methods, and have some magic behavior – such as, in this case, changing how an object is displayed.) We won’t be directly displaying ServerToolUsage’s, so we can handle its display behavior in the same Usage __repr__\n\nusage(5)\n\nIn: 5; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 5; Search: 0\n\n\n\nsource\n\n\nServerToolUsage.__add__\n\n ServerToolUsage.__add__ (b)\n\nAdd together each of the server tool use counts\n\n\nExported source\n@patch\ndef __add__(self:ServerToolUsage, b):\n    \"Add together each of the server tool use counts\"\n    return ServerToolUsage(web_search_requests=self.web_search_requests+b.web_search_requests)\n\n\nAnd, patching __add__ lets + work on a ServerToolUsage as well as a Usage object.\n\nserver_tool_usage(1) + server_tool_usage(2)\n\nServerToolUsage(web_search_requests=3)\n\n\n\nsource\n\n\nUsage.__add__\n\n Usage.__add__ (b)\n\nAdd together each of input_tokens and output_tokens\n\n\nExported source\n@patch\ndef __add__(self:Usage, b):\n    \"Add together each of `input_tokens` and `output_tokens`\"\n    return usage(self.input_tokens+b.input_tokens, self.output_tokens+b.output_tokens,\n                 _dgetattr(self,'cache_creation_input_tokens',0)+_dgetattr(b,'cache_creation_input_tokens',0),\n                 _dgetattr(self,'cache_read_input_tokens',0)+_dgetattr(b,'cache_read_input_tokens',0),\n                 _dgetattr(self,'server_tool_use',server_tool_usage())+_dgetattr(b,'server_tool_use',server_tool_usage()))\n\n\n\nr.usage+r.usage + usage(server_tool_use=server_tool_usage(1))\n\nIn: 20; Out: 50; Cache create: 0; Cache read: 0; Total Tokens: 70; Search: 1\n\n\n\n\nCreating messages\nCreating correctly formatted dicts from scratch every time isn’t very handy, so we’ll import a couple of helper functions from the msglm library.\nLet’s use mk_msg to recreate our msg {'role': 'user', 'content': \"I'm Jeremy\"} from earlier.\n\nprompt = \"I'm Jeremy\"\nm = mk_msg(prompt)\nr = cli.messages.create(messages=[m], model=model, max_tokens=100)\nr\n\nHello Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with or would you like to chat about something in particular?\n\n\nid: msg_01LURaS5AXkvEg257K5vZCEm\ncontent: [{'citations': None, 'text': 'Hello Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with or would you like to chat about something in particular?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 10, 'output_tokens': 36, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nWe can pass more than just text messages to Claude. As we’ll see later we can also pass images, SDK objects, etc. To handle these different data types we need to pass the type along with our content to Claude.\nHere’s an example of a multimodal message containing text and images.\n{\n    'role': 'user', \n    'content': [\n        {'type':'text', 'text':'What is in the image?'},\n        {\n            'type':'image', \n            'source': {\n                'type':'base64', 'media_type':'media_type', 'data': 'data'\n            }\n        }\n    ]\n}\nmk_msg infers the type automatically and creates the appropriate data structure.\nLLMs, don’t actually have state, but instead dialogs are created by passing back all previous prompts and responses every time. With Claude, they always alternate user and assistant. We’ll use mk_msgs from msglm to make it easier to build up these dialog lists.\n\nmsgs = mk_msgs([prompt, r, \"I forgot my name. Can you remind me please?\"]) \nmsgs\n\n[{'role': 'user', 'content': \"I'm Jeremy\"},\n {'role': 'assistant',\n  'content': [TextBlock(citations=None, text='Hello Jeremy! Nice to meet you. How are you doing today? Is there anything I can help you with or would you like to chat about something in particular?', type='text')]},\n {'role': 'user', 'content': 'I forgot my name. Can you remind me please?'}]\n\n\n\ncli.messages.create(messages=msgs, model=model, max_tokens=200)\n\nYour name is Jeremy - you introduced yourself to me just a moment ago in your first message.\n\n\nid: msg_01SVb9E1RtGWG9GZHpKUfUqg\ncontent: [{'citations': None, 'text': 'Your name is Jeremy - you introduced yourself to me just a moment ago in your first message.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 60, 'output_tokens': 22, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#client",
    "href": "core.html#client",
    "title": "Claudette’s source",
    "section": "Client",
    "text": "Client\n\nsource\n\nClient\n\n Client (model, cli=None, log=False, cache=False)\n\nBasic Anthropic messages client.\n\n\nExported source\nclass Client:\n    def __init__(self, model, cli=None, log=False, cache=False):\n        \"Basic Anthropic messages client.\"\n        self.model,self.use = model,usage()\n        self.text_only = model in text_only_models\n        self.log = [] if log else None\n        self.c = (cli or Anthropic(default_headers={'anthropic-beta': 'prompt-caching-2024-07-31'}))\n        self.cache = cache\n\n\nWe’ll create a simple Client for Anthropic which tracks usage stores the model to use. We don’t add any methods right away – instead we’ll use patch for that so we can add and document them incrementally.\n\nc = Client(model)\nc.use\n\nIn: 0; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 0; Search: 0\n\n\n\n\nExported source\n@patch\ndef _r(self:Client, r:Message, prefill=''):\n    \"Store the result of the message and accrue total usage.\"\n    if prefill:\n        blk = find_block(r)\n        if blk: blk.text = prefill + (blk.text or '')\n    self.result = r\n    self.use += r.usage\n    self.stop_reason = r.stop_reason\n    self.stop_sequence = r.stop_sequence\n    return r\n\n\nWe use a _ prefix on private methods, but we document them here in the interests of literate source code.\n_r will be used each time we get a new result, to track usage and also to keep the result available for later.\n\nc._r(r)\nc.use\n\nIn: 10; Out: 36; Cache create: 0; Cache read: 0; Total Tokens: 46; Search: 0\n\n\nWhereas OpenAI’s models use a stream parameter for streaming, Anthropic’s use a separate method. We implement Anthropic’s approach in a private method, and then use a stream parameter in __call__ for consistency:\n\n\nExported source\n@patch\ndef _log(self:Client, final, prefill, msgs, **kwargs):\n    self._r(final, prefill)\n    if self.log is not None: self.log.append({\n        \"msgs\": msgs, **kwargs,\n        \"result\": self.result, \"use\": self.use, \"stop_reason\": self.stop_reason, \"stop_sequence\": self.stop_sequence\n    })\n    return self.result\n\n\nOnce streaming is complete, we need to store the final message and call any completion callback that’s needed.\n\nsource\n\n\nget_types\n\n get_types (msgs)\n\n\n\nExported source\n@save_iter\ndef _stream(o, cm, prefill, cb):\n    with cm as s:\n        yield prefill\n        yield from s.text_stream\n        o.value = s.get_final_message()\n        cb(o.value)\n\n\n\nget_types(msgs)\n\n['text', 'text', 'text']\n\n\n\nsource\n\n\nmk_tool_choice\n\n mk_tool_choice (choose:Union[str,bool,NoneType])\n\nCreate a tool_choice dict that’s ‘auto’ if choose is None, ‘any’ if it is True, or ‘tool’ otherwise\n\nprint(mk_tool_choice('sums'))\nprint(mk_tool_choice(True))\nprint(mk_tool_choice(None))\n\n{'type': 'tool', 'name': 'sums'}\n{'type': 'any'}\n{'type': 'auto'}\n\n\nClaude can be forced to use a particular tool, or select from a specific list of tools, or decide for itself when to use a tool. If you want to force a tool (or force choosing from a list), include a tool_choice param with a dict from mk_tool_choice.\nClaude supports adding an extra assistant message at the end, which contains the prefill – i.e. the text we want Claude to assume the response starts with. However Claude doesn’t actually repeat that in the response, so for convenience we add it.\n\nsource\n\n\nClient.__call__\n\n Client.__call__ (msgs:list, sp='', temp=0, maxtok=4096, maxthinktok=0,\n                  prefill='', stream:bool=False, stop=None,\n                  tools:Optional[list]=None,\n                  tool_choice:Optional[dict]=None, cb=None,\n                  metadata:MetadataParam|NotGiven=NOT_GIVEN, service_tier:\n                  \"Literal['auto','standard_only']|NotGiven\"=NOT_GIVEN,\n                  stop_sequences:List[str]|NotGiven=NOT_GIVEN, system:Unio\n                  n[str,Iterable[TextBlockParam]]|NotGiven=NOT_GIVEN,\n                  temperature:float|NotGiven=NOT_GIVEN,\n                  thinking:ThinkingConfigParam|NotGiven=NOT_GIVEN,\n                  top_k:int|NotGiven=NOT_GIVEN,\n                  top_p:float|NotGiven=NOT_GIVEN,\n                  extra_headers:Headers|None=None,\n                  extra_query:Query|None=None, extra_body:Body|None=None,\n                  timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nMake a call to Claude.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nList of messages in the dialog\n\n\nsp\nstr\n\nThe system prompt\n\n\ntemp\nint\n0\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\nstream\nbool\nFalse\nStream response?\n\n\nstop\nNoneType\nNone\nStop sequence\n\n\ntools\nOptional\nNone\nList of tools to make available to Claude\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\ncb\nNoneType\nNone\nCallback to pass result to when complete\n\n\nmetadata\nMetadataParam | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nLiteral[‘auto’, ‘standard_only’] | NotGiven\nNOT_GIVEN\n\n\n\nstop_sequences\nList[str] | NotGiven\nNOT_GIVEN\n\n\n\nsystem\nUnion[str, Iterable[TextBlockParam]] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nthinking\nThinkingConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_k\nint | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n@patch\ndef _precall(self:Client, msgs, prefill, sp, temp, maxtok, maxthinktok, stream,\n             stop, tools, tool_choice, kwargs):\n    if tools: kwargs['tools'] = [get_schema(o) if callable(o) else o for o in listify(tools)]\n    if tool_choice: kwargs['tool_choice'] = mk_tool_choice(tool_choice)\n    if maxthinktok: \n        kwargs['thinking'] = {'type':'enabled', 'budget_tokens':maxthinktok} \n        temp,prefill = 1,''\n    pref = [prefill.strip()] if prefill else []\n    if not isinstance(msgs,list): msgs = [msgs]\n    if stop is not None:\n        if not isinstance(stop, (list)): stop = [stop]\n        kwargs[\"stop_sequences\"] = stop\n    msgs = mk_msgs(msgs+pref, cache=self.cache, cache_last_ckpt_only=self.cache)\n    assert not ('image' in get_types(msgs) and self.text_only), f\"Images not supported by: {self.model}\"\n    kwargs |= dict(max_tokens=maxtok, system=sp, temperature=temp)\n    return msgs, kwargs\n\n\n\n\nExported source\n@patch\n@delegates(messages.Messages.create)\ndef __call__(self:Client,\n             msgs:list, # List of messages in the dialog\n             sp='', # The system prompt\n             temp=0, # Temperature\n             maxtok=4096, # Maximum tokens\n             maxthinktok=0, # Maximum thinking tokens\n             prefill='', # Optional prefill to pass to Claude as start of its response\n             stream:bool=False, # Stream response?\n             stop=None, # Stop sequence\n             tools:Optional[list]=None, # List of tools to make available to Claude\n             tool_choice:Optional[dict]=None, # Optionally force use of some tool\n             cb=None, # Callback to pass result to when complete\n             **kwargs):\n    \"Make a call to Claude.\"\n    msgs,kwargs = self._precall(msgs, prefill, sp, temp, maxtok, maxthinktok, stream,\n                                stop, tools, tool_choice, kwargs)\n    m = self.c.messages\n    f = m.stream if stream else m.create\n    res = f(model=self.model, messages=msgs, **kwargs)\n    def _cb(v):\n        self._log(v, prefill=prefill, msgs=msgs, **kwargs)\n        if cb: cb(v)\n    if stream: return _stream(res, prefill, _cb)\n    try: return res\n    finally: _cb(res)\n\n\nDefining __call__ let’s us use an object like a function (i.e it’s callable). We use it as a small wrapper over messages.create.\n\nc = Client(model, log=True)\nc.use\n\nIn: 0; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 0; Search: 0\n\n\n\nc('Hi')\n\nHello! How are you doing today? Is there anything I can help you with?\n\n\nid: msg_01QnW4AmQNCU7xQoiqaNdnYx\ncontent: [{'citations': None, 'text': 'Hello! How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 8, 'output_tokens': 20, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nUsage details are automatically updated after each call:\n\nc.use\n\nIn: 8; Out: 20; Cache create: 0; Cache read: 0; Total Tokens: 28; Search: 0\n\n\nA log of all messages is kept if log=True is passed:\n\npprint(c.log)\n\n[{'max_tokens': 4096,\n  'msgs': [{'content': 'Hi', 'role': 'user'}],\n  'result': Message(id='msg_01QnW4AmQNCU7xQoiqaNdnYx', content=[TextBlock(citations=None, text='Hello! How are you doing today? Is there anything I can help you with?', type='text')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=In: 8; Out: 20; Cache create: 0; Cache read: 0; Total Tokens: 28; Search: 0),\n  'stop_reason': 'end_turn',\n  'stop_sequence': None,\n  'system': '',\n  'temperature': 0,\n  'use': In: 8; Out: 20; Cache create: 0; Cache read: 0; Total Tokens: 28; Search: 0}]\n\n\nLet’s try out prefill:\n\nq = \"Very concisely, what is the meaning of life?\"\npref = 'According to Douglas Adams, '\n\n\nc(q, prefill=pref)\n\nAccording to Douglas Adams, 42. But seriously, there’s no universal answer - it’s deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\n\n\nid: msg_01UwGPGcytqGDLPkwwkKcmtk\ncontent: [{'citations': None, 'text': \"According to Douglas Adams, 42. But seriously, there's no universal answer - it's deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 24, 'output_tokens': 46, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nc.use\n\nIn: 32; Out: 66; Cache create: 0; Cache read: 0; Total Tokens: 98; Search: 0\n\n\nWe can pass stream=True to stream the response back incrementally:\n\nr = c('Hi', stream=True)\nfor o in r: print(o, end='')\n\nHello! How are you doing today? Is there anything I can help you with?\n\n\n\nc.use\n\nIn: 40; Out: 86; Cache create: 0; Cache read: 0; Total Tokens: 126; Search: 0\n\n\nThe full final message after completion of streaming is in the value attr of the response:\n\nr.value\n\nHello! How are you doing today? Is there anything I can help you with?\n\n\nid: msg_01QNiqERauivLSSrWPuU3HK6\ncontent: [{'citations': None, 'text': 'Hello! How are you doing today? Is there anything I can help you with?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 8, 'output_tokens': 20, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nfor o in c(q, prefill=pref, stream=True): print(o, end='')\n\nAccording to Douglas Adams, 42. But seriously, there's no universal answer - it's deeply personal. Many find meaning through relationships, purpose, growth, helping others, or spiritual beliefs. The search itself might be part of the point.\n\n\n\nc.use\n\nIn: 64; Out: 132; Cache create: 0; Cache read: 0; Total Tokens: 196; Search: 0\n\n\nPass a stop sequence if you want claude to stop generating text when it encounters it.\n\nc(\"Count from 1 to 10\", stop=\"5\")\n\n1, 2, 3, 4,\n\n\nid: msg_01DuSUcJsaVBiLc7MpoDkFtH\ncontent: [{'citations': None, 'text': '1, 2, 3, 4, ', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: stop_sequence\nstop_sequence: 5\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 15, 'output_tokens': 14, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nThis also works with streaming, and you can pass more than one stop sequence:\n\nfor o in c(\"Count from 1 to 10\", stop=[\"3\", \"yellow\"], stream=True): print(o, end='')\nprint()\nprint(c.stop_reason, c.stop_sequence)\n\n1, 2, \nstop_sequence 3\n\n\nWe’ve shown the token usage but we really care about is pricing. Let’s extract the latest pricing from Anthropic into a pricing dict.\n\nsource\n\n\nget_pricing\n\n get_pricing (m, u)\n\n\n\nExported source\ndef get_pricing(m, u):\n    return pricing[m][:3] if u.prompt_token_count &lt; 128_000 else pricing[m][3:]\n\n\nSimilarly, let’s get the pricing for the latest server tools:\nWe’ll patch Usage to enable it compute the cost given pricing.\n\nsource\n\n\nUsage.cost\n\n Usage.cost (costs:tuple)\n\n\n\nExported source\n@patch\ndef cost(self:Usage, costs:tuple) -&gt; float:\n    cache_w, cache_r = _dgetattr(self, \"cache_creation_input_tokens\",0), _dgetattr(self, \"cache_read_input_tokens\",0)\n    tok_cost = sum([self.input_tokens * costs[0] +  self.output_tokens * costs[1] +  cache_w * costs[2] + cache_r * costs[3]]) / 1e6\n    server_tool_use = _dgetattr(self, \"server_tool_use\",server_tool_usage())\n    server_tool_cost = server_tool_use.web_search_requests * server_tool_pricing['web_search_requests'] / 1e3\n    return tok_cost + server_tool_cost\n\n\n\nsource\n\n\nClient.cost\n\n Client.cost ()\n\n\n\nExported source\n@patch(as_prop=True)\ndef cost(self: Client) -&gt; float: return self.use.cost(pricing[model_types[self.model]])\n\n\n\nsource\n\n\nget_costs\n\n get_costs (c)\n\n\n\nExported source\ndef get_costs(c):\n    costs = pricing[model_types[c.model]]\n    \n    inp_cost = c.use.input_tokens * costs[0] / 1e6\n    out_cost = c.use.output_tokens * costs[1] / 1e6\n\n    cache_w = c.use.cache_creation_input_tokens   \n    cache_r = c.use.cache_read_input_tokens\n    cache_cost = (cache_w * costs[2] + cache_r * costs[3]) / 1e6\n\n    server_tool_use = c.use.server_tool_use\n    server_tool_cost = server_tool_use.web_search_requests * server_tool_pricing['web_search_requests'] / 1e3\n    return inp_cost, out_cost, cache_cost, cache_w + cache_r, server_tool_cost\n\n\nThe markdown repr of the client itself will show the latest result, along with the usage so far.\n\n\nExported source\n@patch\ndef _repr_markdown_(self:Client):\n    if not hasattr(self,'result'): return 'No results yet'\n    msg = contents(self.result)\n    inp_cost, out_cost, cache_cost, cached_toks, server_tool_cost = get_costs(self)\n    return f\"\"\"{msg}\n\n| Metric | Count | Cost (USD) |\n|--------|------:|-----:|\n| Input tokens | {self.use.input_tokens:,} | {inp_cost:.6f} |\n| Output tokens | {self.use.output_tokens:,} | {out_cost:.6f} |\n| Cache tokens | {cached_toks:,} | {cache_cost:.6f} |\n| Server tool use | {self.use.server_tool_use.web_search_requests:,} | {server_tool_cost:.6f} |\n| **Total** | **{self.use.total:,}** | **${self.cost:.6f}** |\"\"\"\n\n\n\nc\n\n1, 2,\n\n\n\nMetric\nCount\nCost (USD)\n\n\n\n\nInput tokens\n94\n0.000282\n\n\nOutput tokens\n154\n0.002310\n\n\nCache tokens\n0\n0.000000\n\n\nServer tool use\n0\n0.000000\n\n\nTotal\n248\n$0.002592\n\n\n\n\n\nPass a list of alternating user/assistant messages to give Claude a “dialog”.\n\nc([\"My name is Jeremy\", \"Hi Jeremy!\", \"Can you remind me what my name is?\"])\n\nYour name is Jeremy.\n\n\nid: msg_0127tN29JdZJj3tW9GVtrgbr\ncontent: [{'citations': None, 'text': 'Your name is Jeremy.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 29, 'output_tokens': 8, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#tool-use",
    "href": "core.html#tool-use",
    "title": "Claudette’s source",
    "section": "Tool use",
    "text": "Tool use\nLet’s now look more at tool use (aka function calling).\nFor testing, we need a function that Claude can call; we’ll write a simple function that adds numbers together, and will tell us when it’s being called:\n\n@dataclass\nclass MySum: val:int\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return MySum(a + b)\n\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\nsp = \"Always use tools when calculations are required.\"\n\nClaudette can autogenerate a schema thanks to the toolslm library. We’ll force the use of the tool using the function we created earlier.\n\ntools=[get_schema(sums)]\nchoice = mk_tool_choice('sums')\n\nWe’ll start a dialog with Claude now. We’ll store the messages of our dialog in msgs. The first message will be our prompt pr, and we’ll pass our tools schema.\n\nmsgs = mk_msgs(pr)\nr = c(msgs, sp=sp, tools=tools, tool_choice=choice)\nr\n\nToolUseBlock(id=‘toolu_01GeiA75mdKZUu4cy3tv277z’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\nid: msg_01L9NLcLdEJRCW9Yewm27mFy\ncontent: [{'id': 'toolu_01GeiA75mdKZUu4cy3tv277z', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 440, 'output_tokens': 57, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nWhen Claude decides that it should use a tool, it passes back a ToolUseBlock with the name of the tool to call, and the params to use.\nWe don’t want to allow it to call just any possible function (that would be a security disaster!) so we create a namespace – that is, a dictionary of allowable function names to call.\n\nns = mk_ns(sums)\nns\n\n{'sums': &lt;function __main__.sums(a: int, b: int = 1) -&gt; int&gt;}\n\n\nToolResult is used for two special cases:\n\nWhen tool calls are RPCs with claudette running on an application server and code execution happening elsewhere, wrapping with a result_type field is used as a type descriptor for the claudette client.\nDifferent types are handled in message history with specific format, so mk_funcres branches the Anthropic representation (see depending on the result_type.\n\nCurrently images are the only supported tool result type - see https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/implement-tool-use#example-of-tool-result-with-images for the format implemented in mk_funcres.\n\nsource\n\nToolResult\n\n ToolResult (result_type:str, data)\n\nBase class for objects needing a basic __repr__\n\nsource\n\n\nmk_funcres\n\n mk_funcres (fc, ns)\n\nGiven tool use block ‘fc’, get tool result, and create a tool_result response.\nWe can now use the function requested by Claude. We look it up in ns, and pass in the provided parameters.\n\nfcs = [o for o in r.content if isinstance(o,ToolUseBlock)]\nfcs\n\n[ToolUseBlock(id='toolu_01GeiA75mdKZUu4cy3tv277z', input={'a': 604542, 'b': 6458932}, name='sums', type='tool_use')]\n\n\n\nres = [mk_funcres(fc, ns=ns) for fc in fcs]\nres\n\nFinding the sum of 604542 and 6458932\n\n\n[{'type': 'tool_result',\n  'tool_use_id': 'toolu_01GeiA75mdKZUu4cy3tv277z',\n  'content': 'MySum(val=7063474)'}]\n\n\n\ndef contents(r):\n    \"Helper to get the contents from Claude response `r`.\"\n    blk = find_block(r)\n    if not blk and r.content: blk = r.content[0]\n    if hasattr(blk,'text'): return blk.text.strip()\n    elif hasattr(blk,'content'): return blk.content.strip()\n    return str(blk)\n\n\nsource\n\n\nmk_toolres\n\n mk_toolres (r:collections.abc.Mapping,\n             ns:Optional[collections.abc.Mapping]=None)\n\nCreate a tool_result message from response r.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nr\nMapping\n\nTool use request response from Claude\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\n\n\n\nExported source\ndef mk_toolres(\n    r:abc.Mapping, # Tool use request response from Claude\n    ns:Optional[abc.Mapping]=None # Namespace to search for tools\n    ):\n    \"Create a `tool_result` message from response `r`.\"\n    cts = getattr(r, 'content', [])\n    res = [mk_msg(r.model_dump(), role='assistant')]\n    if ns is None: ns=globals()\n    tcs = [mk_funcres(o, ns) for o in cts if isinstance(o,ToolUseBlock)]\n    if tcs: res.append(mk_msg(tcs))\n    return res\n\n\n\nfoo = []\nfoo.append({})\nfoo.append({})\nfoo\n\n[{}, {}]\n\n\nIn order to tell Claude the result of the tool call, we pass back the tool use assistant request and the tool_result response.\n\ntr = mk_toolres(r, ns=ns)\ntr\n\nFinding the sum of 604542 and 6458932\n\n\n[{'role': 'assistant',\n  'content': [{'id': 'toolu_01GeiA75mdKZUu4cy3tv277z',\n    'input': {'a': 604542, 'b': 6458932},\n    'name': 'sums',\n    'type': 'tool_use'}]},\n {'role': 'user',\n  'content': [{'type': 'tool_result',\n    'tool_use_id': 'toolu_01GeiA75mdKZUu4cy3tv277z',\n    'content': 'MySum(val=7063474)'}]}]\n\n\n\nmsgs\n\n[{'role': 'user', 'content': 'What is 604542+6458932?'}]\n\n\nWe add this to our dialog, and now Claude has all the information it needs to answer our question.\n\nmsgs += tr\ncontents(c(msgs, sp=sp, tools=tools))\n\n'The sum of 604542 + 6458932 is 7,063,474.'\n\n\n\ncontents(msgs[-1])\n\n'MySum(val=7063474)'\n\n\n\nmsgs\n\n[{'role': 'user', 'content': 'What is 604542+6458932?'},\n {'role': 'assistant',\n  'content': [{'id': 'toolu_01GeiA75mdKZUu4cy3tv277z',\n    'input': {'a': 604542, 'b': 6458932},\n    'name': 'sums',\n    'type': 'tool_use'}]},\n {'role': 'user',\n  'content': [{'type': 'tool_result',\n    'tool_use_id': 'toolu_01GeiA75mdKZUu4cy3tv277z',\n    'content': 'MySum(val=7063474)'}]}]\n\n\n\n\nText editing\nAnthropic also has a special tool type specific to text editing.\n\ntools = [text_editor_conf['sonnet']]\ntools\n\n[{'type': 'text_editor_20250429', 'name': 'str_replace_based_edit_tool'}]\n\n\n\npr = 'Could you please explain my _quarto.yml file?'\nmsgs = [mk_msg(pr)]\nr = c(msgs, sp=sp, tools=tools)\nfind_block(r, ToolUseBlock)\n\nToolUseBlock(id='toolu_01LgRJaJMnTkQZs1rcNbgsta', input={'command': 'view', 'path': '_quarto.yml'}, name='str_replace_based_edit_tool', type='tool_use')\n\n\nWe’ve gone ahead and create a reference implementation that you can directly use from our text_editor module. Or use as reference for creating your own.\n\nns = mk_ns(str_replace_based_edit_tool)\ntr = mk_toolres(r, ns=ns)\nmsgs += tr\nprint(contents(c(msgs, sp=sp, tools=tools))[:128])\n\nGreat! Let me explain your `_quarto.yml` configuration file section by section:\n\n## Project Configuration\n```yaml\nproject:\n  typ",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#structured-data",
    "href": "core.html#structured-data",
    "title": "Claudette’s source",
    "section": "Structured data",
    "text": "Structured data\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\nsp = \"Always use your tools for calculations.\"\n\n\nfor tools in [sums, [get_schema(sums)]]:\n    r = c(pr, tools=tools, tool_choice='sums')\n    print(r)\n\nMessage(id='msg_01UdVJDcaiEcxXpTtgzVgsRi', content=[ToolUseBlock(id='toolu_01EZvdY4nL7g8LD7xtPF6ztF', input={'a': 604542, 'b': 6458932}, name='sums', type='tool_use')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 435; Out: 53; Cache create: 0; Cache read: 0; Total Tokens: 488; Search: 0)\nMessage(id='msg_01Er899Zkp5SorPMNVsQwoy8', content=[ToolUseBlock(id='toolu_019Ni4Pxcm3r7YRY36544kcP', input={'a': 604542, 'b': 6458932}, name='sums', type='tool_use')], model='claude-sonnet-4-20250514', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 435; Out: 53; Cache create: 0; Cache read: 0; Total Tokens: 488; Search: 0)\n\n\n\nns = mk_ns(sums)\ntr = mk_toolres(r, ns=ns)\n\nFinding the sum of 604542 and 6458932\n\n\n\nsource\n\nClient.structured\n\n Client.structured (msgs:list, tools:Optional[list]=None,\n                    ns:Optional[collections.abc.Mapping]=None, sp='',\n                    temp=0, maxtok=4096, maxthinktok=0, prefill='',\n                    stream:bool=False, stop=None,\n                    tool_choice:Optional[dict]=None, cb=None,\n                    metadata:MetadataParam|NotGiven=NOT_GIVEN, service_tie\n                    r:\"Literal['auto','standard_only']|NotGiven\"=NOT_GIVEN\n                    , stop_sequences:List[str]|NotGiven=NOT_GIVEN, system:\n                    Union[str,Iterable[TextBlockParam]]|NotGiven=NOT_GIVEN\n                    , temperature:float|NotGiven=NOT_GIVEN,\n                    thinking:ThinkingConfigParam|NotGiven=NOT_GIVEN,\n                    top_k:int|NotGiven=NOT_GIVEN,\n                    top_p:float|NotGiven=NOT_GIVEN,\n                    extra_headers:Headers|None=None,\n                    extra_query:Query|None=None,\n                    extra_body:Body|None=None,\n                    timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nReturn the value of all tool calls (generally used for structured outputs)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nList of messages in the dialog\n\n\ntools\nOptional\nNone\nList of tools to make available to Claude\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\nsp\nstr\n\nThe system prompt\n\n\ntemp\nint\n0\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\nstream\nbool\nFalse\nStream response?\n\n\nstop\nNoneType\nNone\nStop sequence\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\ncb\nNoneType\nNone\nCallback to pass result to when complete\n\n\nmetadata\nMetadataParam | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nLiteral[‘auto’, ‘standard_only’] | NotGiven\nNOT_GIVEN\n\n\n\nstop_sequences\nList[str] | NotGiven\nNOT_GIVEN\n\n\n\nsystem\nUnion[str, Iterable[TextBlockParam]] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nthinking\nThinkingConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_k\nint | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nfloat | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n@patch\n@delegates(Client.__call__)\ndef structured(self:Client,\n               msgs:list, # List of messages in the dialog\n               tools:Optional[list]=None, # List of tools to make available to Claude\n               ns:Optional[abc.Mapping]=None, # Namespace to search for tools\n               **kwargs):\n    \"Return the value of all tool calls (generally used for structured outputs)\"\n    tools = listify(tools)\n    res = self(msgs, tools=tools, tool_choice=tools, **kwargs)\n    if ns is None: ns=mk_ns(*tools)\n    cts = getattr(res, 'content', [])\n    tcs = [call_func(o.name, o.input, ns=ns) for o in cts if isinstance(o,ToolUseBlock)]\n    return tcs\n\n\nAnthropic’s API does not support response formats directly, so instead we provide a structured method to use tool calling to achieve the same result. The result of the tool is not passed back to Claude in this case, but instead is returned directly to the user.\n\nc.structured(pr, tools=[sums])\n\nFinding the sum of 604542 and 6458932\n\n\n[MySum(val=7063474)]\n\n\n\nc\n\nToolUseBlock(id=‘toolu_01LhB3XbAjBB7Awm2fjyYdMN’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\n\nMetric\nCount\nCost (USD)\n\n\n\n\nInput tokens\n4,955\n0.014865\n\n\nOutput tokens\n1,240\n0.018600\n\n\nCache tokens\n0\n0.000000\n\n\nServer tool use\n0\n0.000000\n\n\nTotal\n6,195\n$0.033465",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#custom-types-with-tools-use",
    "href": "core.html#custom-types-with-tools-use",
    "title": "Claudette’s source",
    "section": "Custom Types with Tools Use",
    "text": "Custom Types with Tools Use\nWe need to add tool support for custom types too. Let’s test out custom types using a minimal example.\n\nclass Book(BasicRepr):\n    def __init__(self, title: str, pages: int): store_attr()\n    def __repr__(self):\n        return f\"Book Title : {self.title}\\nNumber of Pages : {self.pages}\"\n\n\nBook(\"War and Peace\", 950)\n\nBook Title : War and Peace\nNumber of Pages : 950\n\n\n\ndef find_page(book: Book, # The book to find the halfway point of\n              percent: int, # Percent of a book to read to, e.g. halfway == 50, \n) -&gt; int:\n    \"The page number corresponding to `percent` completion of a book\"\n    return round(book.pages * (percent / 100.0))\n\n\nget_schema(find_page)\n\n{'name': 'find_page',\n 'description': 'The page number corresponding to `percent` completion of a book\\n\\nReturns:\\n- type: integer',\n 'input_schema': {'type': 'object',\n  'properties': {'book': {'type': 'object',\n    'description': 'The book to find the halfway point of',\n    '$ref': '#/$defs/Book'},\n   'percent': {'type': 'integer',\n    'description': 'Percent of a book to read to, e.g. halfway == 50,'}},\n  'required': ['book', 'percent'],\n  '$defs': {'Book': {'type': 'object',\n    'properties': {'title': {'type': 'string', 'description': ''},\n     'pages': {'type': 'integer', 'description': ''}},\n    'title': 'Book',\n    'required': ['title', 'pages']}}}}\n\n\n\nchoice = mk_tool_choice('find_page')\nchoice\n\n{'type': 'tool', 'name': 'find_page'}\n\n\nClaudette will pack objects as dict, so we’ll transform tool functions with user-defined types into tool functions that accept a dict in lieu of the user-defined type.\nFirst let’s convert a single argument:\n_is_builtin decides whether to pass an argument through as-is. Let’s check the argument conversion:\n\n(_is_builtin(int), _is_builtin(Book), _is_builtin(List))\n\n(True, False, True)\n\n\n\n(_convert(555, int),\n _convert({\"title\": \"War and Peace\", \"pages\": 923}, Book),\n _convert([1, 2, 3, 4], List))\n\n(555,\n Book Title : War and Peace\n Number of Pages : 923,\n [1, 2, 3, 4])\n\n\nTo apply tool() to a function is to return a new function where the user-defined types are replaced with dictionary inputs.\n\nsource\n\ntool\n\n tool (func)\n\nA function is transformed into a function with dict arguments substituted for user-defined types. Built-in types such as percent here are left untouched.\n\nfind_page(book=Book(\"War and Peace\", 950), percent=50)\n\n475\n\n\n\ntool(find_page)({\"title\": \"War and Peace\", \"pages\": 950}, percent=50)\n\n475\n\n\nBy passing tools wrapped by tool(), user-defined types now work completes without failing in tool calls.\n\npr = \"How many pages do I have to read to get halfway through my 950 page copy of War and Peace\"\ntools = tool(find_page)\ntools\n\n&lt;function __main__.find_page(book: __main__.Book, percent: int) -&gt; int&gt;\n\n\n\nr = c(pr, tools=[tools])\nfind_block(r, ToolUseBlock)\n\nToolUseBlock(id='toolu_01RKkSknteqc681fzhD9P55L', input={'book': {'title': 'War and Peace', 'pages': 950}, 'percent': 50}, name='find_page', type='tool_use')\n\n\n\ntr = mk_toolres(r, ns=[tools])\ntr\n\n[{'role': 'assistant',\n  'content': [{'citations': None,\n    'text': \"I'll help you find the halfway point of your copy of War and Peace.\",\n    'type': 'text'},\n   {'id': 'toolu_01RKkSknteqc681fzhD9P55L',\n    'input': {'book': {'title': 'War and Peace', 'pages': 950}, 'percent': 50},\n    'name': 'find_page',\n    'type': 'tool_use'}]},\n {'role': 'user',\n  'content': [{'type': 'tool_result',\n    'tool_use_id': 'toolu_01RKkSknteqc681fzhD9P55L',\n    'content': '475'}]}]\n\n\n\nmsgs = [pr]+tr\ncontents(c(msgs, sp=sp, tools=[tools]))\n\n\"To get halfway through your 950-page copy of War and Peace, you need to read to page 475. That means you'll have read 475 pages when you reach the halfway point of the book.\"",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#chat",
    "href": "core.html#chat",
    "title": "Claudette’s source",
    "section": "Chat",
    "text": "Chat\nRather than manually adding the responses to a dialog, we’ll create a simple Chat class to do that for us, each time we make a request. We’ll also store the system prompt and tools here, to avoid passing them every time.\n\nsource\n\nChat\n\n Chat (model:Optional[str]=None, cli:Optional[__main__.Client]=None,\n       sp='', tools:Optional[list]=None, temp=0,\n       cont_pr:Optional[str]=None, cache:bool=False, hist:list=None,\n       ns:Optional[collections.abc.Mapping]=None)\n\nAnthropic chat client.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nOptional\nNone\nModel to use (leave empty if passing cli)\n\n\ncli\nOptional\nNone\nClient to use (leave empty if passing model)\n\n\nsp\nstr\n\nOptional system prompt\n\n\ntools\nOptional\nNone\nList of tools to make available to Claude\n\n\ntemp\nint\n0\nTemperature\n\n\ncont_pr\nOptional\nNone\nUser prompt to continue an assistant response\n\n\ncache\nbool\nFalse\nUse Claude cache?\n\n\nhist\nlist\nNone\nInitialize history\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\n\nThe class stores the Client that will provide the responses in c, and a history of messages in h.\n\nsp = \"Never mention what tools you use.\"\nchat = Chat(model, sp=sp)\nchat.c.use, chat.h\n\n(In: 0; Out: 0; Cache create: 0; Cache read: 0; Total Tokens: 0; Search: 0, [])\n\n\n\nchat.c.use.cost(pricing[model_types[chat.c.model]])\n\n0.0\n\n\nThis is clunky. Let’s add cost as a property for the Chat class. It will pass in the appropriate prices for the current model to the usage cost calculator.\n\nsource\n\n\nChat.cost\n\n Chat.cost ()\n\n\n\nExported source\n@patch(as_prop=True)\ndef cost(self: Chat) -&gt; float: return self.c.cost\n\n\n\nchat.cost\n\n0.0\n\n\n\nsource\n\n\nChat.__call__\n\n Chat.__call__ (pr=None, temp=None, maxtok=4096, maxthinktok=0,\n                stream=False, prefill='', tool_choice:Optional[dict]=None,\n                **kw)\n\nCall self as a function.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\nNoneType\nNone\nPrompt / message\n\n\ntemp\nNoneType\nNone\nTemperature\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nmaxthinktok\nint\n0\nMaximum thinking tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\nprefill\nstr\n\nOptional prefill to pass to Claude as start of its response\n\n\ntool_choice\nOptional\nNone\nOptionally force use of some tool\n\n\nkw\nVAR_KEYWORD\n\n\n\n\n\n\n\nExported source\n@patch\ndef _post_pr(self:Chat, pr, prev_role):\n    if pr is None and prev_role == 'assistant':\n        if self.cont_pr is None:\n            raise ValueError(\"Prompt must be given after completion, or use `self.cont_pr`.\")\n        pr = self.cont_pr # No user prompt, keep the chain\n    if pr: self.h.append(mk_msg(pr, cache=self.cache))\n\n\n\n\nExported source\n@patch\ndef _append_pr(self:Chat, pr=None):\n    prev_role = nested_idx(self.h, -1, 'role') if self.h else 'assistant' # First message should be 'user'\n    if pr and prev_role == 'user': self() # already user request pending\n    self._post_pr(pr, prev_role)\n\n\n\n\nExported source\n@patch\ndef __call__(self:Chat,\n             pr=None,  # Prompt / message\n             temp=None, # Temperature\n             maxtok=4096, # Maximum tokens\n             maxthinktok=0, # Maximum thinking tokens\n             stream=False, # Stream response?\n             prefill='', # Optional prefill to pass to Claude as start of its response\n             tool_choice:Optional[dict]=None, # Optionally force use of some tool\n             **kw):\n    if temp is None: temp=self.temp\n    self._append_pr(pr)\n    def _cb(v):\n        self.last = mk_toolres(v, ns=self.ns)\n        self.h += self.last\n    return self.c(self.h, stream=stream, prefill=prefill, sp=self.sp, temp=temp, maxtok=maxtok, maxthinktok=maxthinktok,\n                 tools=self.tools, tool_choice=tool_choice, cb=_cb, **kw)\n\n\nThe __call__ method just passes the request along to the Client, but rather than just passing in this one prompt, it appends it to the history and passes it all along. As a result, we now have state!\n\nchat = Chat(model, sp=sp)\n\n\nchat(\"I'm Jeremy\")\nchat(\"What's my name?\")\n\nYour name is Jeremy.\n\n\nid: msg_01Cz5fbwnwURf3DiUW7STPgS\ncontent: [{'citations': None, 'text': 'Your name is Jeremy.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 42, 'output_tokens': 8, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use, chat.cost\n\n(In: 59; Out: 25; Cache create: 0; Cache read: 0; Total Tokens: 84; Search: 0,\n 0.000552)\n\n\nLet’s try out prefill too:\n\nq = \"Very concisely, what is the meaning of life?\"\npref = 'According to Douglas Adams,'\n\n\nchat(q, prefill=pref)\n\nAccording to Douglas Adams,42. But seriously: to find purpose, connect with others, and create meaning through your choices and relationships.\n\n\nid: msg_01PWBjh7wapKWZMbnoyvZbEb\ncontent: [{'citations': None, 'text': 'According to Douglas Adams,42. But seriously: to find purpose, connect with others, and create meaning through your choices and relationships.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 70, 'output_tokens': 25, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nBy default messages must be in user, assistant, user format. If this isn’t followed (aka calling chat() without a user message) it will error out:\n\ntry: chat()\nexcept ValueError as e: print(\"Error:\", e)\n\nError: Prompt must be given after completion, or use `self.cont_pr`.\n\n\nSetting cont_pr allows a “default prompt” to be specified when a prompt isn’t specified. Usually used to prompt the model to continue.\n\nchat.cont_pr = \"Tell me a little more...\"\nchat()\n\nThe meaning of life is deeply personal and has been pondered for millennia. Some common perspectives:\nPhilosophical: Create your own meaning through authentic choices and taking responsibility for your existence (existentialism).\nReligious/Spiritual: Serve a higher purpose, grow spiritually, or fulfill your role in a divine plan.\nHumanistic: Reduce suffering, increase happiness, love others, and contribute to human flourishing.\nBiological: Survive, reproduce, and pass on your genes - though humans transcend this basic drive.\nPractical: Find what gives you a sense of purpose - whether that’s relationships, creativity, helping others, learning, or building something lasting.\nMost people find meaning through some combination: deep connections with others, work that feels worthwhile, personal growth, and leaving the world a bit better than they found it.\nWhat resonates with you, Jeremy?\n\n\nid: msg_014KKaRL4W2FwBkbmjQQtYpn\ncontent: [{'citations': None, 'text': \"The meaning of life is deeply personal and has been pondered for millennia. Some common perspectives:\\n\\n**Philosophical**: Create your own meaning through authentic choices and taking responsibility for your existence (existentialism).\\n\\n**Religious/Spiritual**: Serve a higher purpose, grow spiritually, or fulfill your role in a divine plan.\\n\\n**Humanistic**: Reduce suffering, increase happiness, love others, and contribute to human flourishing.\\n\\n**Biological**: Survive, reproduce, and pass on your genes - though humans transcend this basic drive.\\n\\n**Practical**: Find what gives you a sense of purpose - whether that's relationships, creativity, helping others, learning, or building something lasting.\\n\\nMost people find meaning through some combination: deep connections with others, work that feels worthwhile, personal growth, and leaving the world a bit better than they found it.\\n\\nWhat resonates with you, Jeremy?\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 104, 'output_tokens': 194, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nWe can also use streaming:\n\nchat = Chat(model, sp=sp)\nfor o in chat(\"I'm Jeremy\", stream=True): print(o, end='')\n\nHi Jeremy! Nice to meet you. How are you doing today?\n\n\n\nr = chat(q, prefill=pref, stream=True)\nfor o in r: print(o, end='')\nr.value\n\nAccording to Douglas Adams,it's 42. But seriously: to find purpose, connect with others, and create meaning through your choices and relationships.\n\n\nAccording to Douglas Adams,it’s 42. But seriously: to find purpose, connect with others, and create meaning through your choices and relationships.\n\n\nid: msg_01TFJ44h1JScyXQWbAHkHGnd\ncontent: [{'citations': None, 'text': \"According to Douglas Adams,it's 42. But seriously: to find purpose, connect with others, and create meaning through your choices and relationships.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 54, 'output_tokens': 28, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nYou can provide a history of messages to initialise Chat with:\n\nchat = Chat(model, sp=sp, hist=[\"Can you guess my name?\", \"Hmmm I really don't know. Is it 'Merlin G. Penfolds'?\"])\nchat('Wow how did you know?')\n\nI have to be honest - I was just making a playful, completely random guess! I actually have no way of knowing your real name unless you tell me directly. I don’t have access to any information about who you are beyond what you share in our conversation.\nSo if “Merlin G. Penfolds” actually is your name, that would be an absolutely incredible coincidence! But I suspect you might be playing along with my silly guess. Either way, it’s nice to meet you! What would you like me to call you?\n\n\nid: msg_016sRKuAyakwNnT9FUZfA9i3\ncontent: [{'citations': None, 'text': 'I have to be honest - I was just making a playful, completely random guess! I actually have no way of knowing your real name unless you tell me directly. I don\\'t have access to any information about who you are beyond what you share in our conversation.\\n\\nSo if \"Merlin G. Penfolds\" actually is your name, that would be an absolutely incredible coincidence! But I suspect you might be playing along with my silly guess. Either way, it\\'s nice to meet you! What would you like me to call you?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 58, 'output_tokens': 117, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\n\nChat tool use\nWe automagically get streamlined tool use as well:\n\npr = f\"What is {a}+{b}?\"\npr\n\n'What is 604542+6458932?'\n\n\n\nchat = Chat(model, sp=sp, tools=[sums])\nr = chat(pr)\nr\n\nFinding the sum of 604542 and 6458932\n\n\nToolUseBlock(id=‘toolu_01EbJ4kX6ZimASi9C8m89ww3’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\nid: msg_01VQTgrgdgQwBvLkRaMnydJs\ncontent: [{'id': 'toolu_01EbJ4kX6ZimASi9C8m89ww3', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 437, 'output_tokens': 72, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nNow we need to send this result to Claude—calling the object with no parameters tells it to return the tool result to Claude:\n\nchat()\n\n604542 + 6458932 = 7,063,474\n\n\nid: msg_01FVvhDSrqvEDYRWEYEwTEhr\ncontent: [{'citations': None, 'text': '604542 + 6458932 = 7,063,474', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 530, 'output_tokens': 19, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nIt should be correct, because it actually used our Python function to do the addition. Let’s check:\n\na+b\n\n7063474\n\n\nLet’s try the same thing with streaming:\n\nchat = Chat(model, sp=sp, tools=[sums])\nr = chat(pr, stream=True)\nfor o in r: print(o, end='')\n\nFinding the sum of 604542 and 6458932\n\n\nThe full message, including tool call details, are in value:\n\nr.value\n\nToolUseBlock(id=‘toolu_012mCCw17t3FTVFTtQXVLau7’, input={‘a’: 604542, ‘b’: 6458932}, name=‘sums’, type=‘tool_use’)\n\n\nid: msg_019saR1SeZrBxJZhZqKiWBEp\ncontent: [{'id': 'toolu_012mCCw17t3FTVFTtQXVLau7', 'input': {'a': 604542, 'b': 6458932}, 'name': 'sums', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 437, 'output_tokens': 72, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nr = chat(stream=True)\nfor o in r: print(o, end='')\n\n604542 + 6458932 = 7,063,474\n\n\n\nr.value\n\n604542 + 6458932 = 7,063,474\n\n\nid: msg_01FCdDxkwbtbjDEnAHY6vrAk\ncontent: [{'citations': None, 'text': '604542 + 6458932 = 7,063,474', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 530, 'output_tokens': 19, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nThe history shows both the tool_use and tool_result messages:\n\nchat.h\n\n[{'role': 'user', 'content': 'What is 604542+6458932?'},\n {'role': 'assistant',\n  'content': [{'id': 'toolu_012mCCw17t3FTVFTtQXVLau7',\n    'input': {'a': 604542, 'b': 6458932},\n    'name': 'sums',\n    'type': 'tool_use'}]},\n {'role': 'user',\n  'content': [{'type': 'tool_result',\n    'tool_use_id': 'toolu_012mCCw17t3FTVFTtQXVLau7',\n    'content': 'MySum(val=7063474)'}]},\n {'role': 'assistant',\n  'content': [{'citations': None,\n    'text': '604542 + 6458932 = 7,063,474',\n    'type': 'text'}]}]\n\n\nLet’s test a function with user defined types.\n\nchat = Chat(model, sp=sp, tools=[find_page])\nr = chat(\"How many pages is three quarters of the way through my 80 page edition of Tao Te Ching?\")\nr\n\nToolUseBlock(id=‘toolu_01BcnfcEPoNwPTFTGogcy1LL’, input={‘book’: {‘title’: ‘Tao Te Ching’, ‘pages’: 80}, ‘percent’: 75}, name=‘find_page’, type=‘tool_use’)\n\n\nid: msg_01JzFUZkSgQsBHy31mUH8858\ncontent: [{'id': 'toolu_01BcnfcEPoNwPTFTGogcy1LL', 'input': {'book': {'title': 'Tao Te Ching', 'pages': 80}, 'percent': 75}, 'name': 'find_page', 'type': 'tool_use'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: tool_use\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 547, 'output_tokens': 86, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat()\n\nThree quarters of the way through your 80-page edition of Tao Te Ching would be page 60.\n\n\nid: msg_01Fj7UTjewyJ82rVEWnFYVUa\ncontent: [{'citations': None, 'text': 'Three quarters of the way through your 80-page edition of Tao Te Ching would be page 60.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 647, 'output_tokens': 29, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\n\nExported source\n@patch\ndef _repr_markdown_(self:Chat):\n    if not hasattr(self.c, 'result'): return 'No results yet'\n    last_msg = contents(self.c.result)\n    \n    def fmt_msg(m):\n        t = contents(m)\n        if isinstance(t, dict): return t['content']\n        return t\n        \n    history = '\\n\\n'.join(f\"**{m['role']}**: {fmt_msg(m)}\" \n                         for m in self.h)\n    det = self.c._repr_markdown_().split('\\n\\n')[-1]\n    if history: history = f\"\"\"\n&lt;details&gt;\n&lt;summary&gt;► History&lt;/summary&gt;\n\n{history}\n\n&lt;/details&gt;\n\"\"\"\n\n    return f\"\"\"{last_msg}\n{history}\n{det}\"\"\"\n\n\n\n# TODO: fix history format\n\n\nchat\n\nThree quarters of the way through your 80-page edition of Tao Te Ching would be page 60.\n\n\n► History\n\nuser: H\nassistant: {‘id’: ‘toolu_01BcnfcEPoNwPTFTGogcy1LL’, ‘input’: {‘book’: {‘title’: ‘Tao Te Ching’, ‘pages’: 80}, ‘percent’: 75}, ‘name’: ‘find_page’, ‘type’: ‘tool_use’}\nuser: 60\nassistant: Three quarters of the way through your 80-page edition of Tao Te Ching would be page 60.\n\n\n\n\nMetric\nCount\nCost (USD)\n\n\n\n\nInput tokens\n1,194\n0.003582\n\n\nOutput tokens\n115\n0.001725\n\n\nCache tokens\n0\n0.000000\n\n\nServer tool use\n0\n0.000000\n\n\nTotal\n1,309\n$0.005307\n\n\n\n\n\n\nchat = Chat(model, tools=[text_editor_conf['sonnet']], ns=mk_ns(str_replace_based_edit_tool))\n\nWhen not providing tools directly as Python functions (like sum), you must create and pass a namespace dictionary (mapping the tool name string to the function object) using the ns parameter to methods like mk_toolres or toolloop. toolslm cannot automatically generate the namespace in this case. For schema-based tools (i.e., Python functions), claudette handles namespace creation automatically.\n\nr = chat('Please explain very concisely what my _quarto.yml does. It is in the current path. Use your tools')\nfind_block(r, ToolUseBlock)\n\nToolUseBlock(id='toolu_01WGRx87aQu2ipe4WaM7LP12', input={'command': 'view', 'path': '_quarto.yml'}, name='str_replace_based_edit_tool', type='tool_use')\n\n\n\nchat()\n\nYour _quarto.yml configures a Quarto website with:\n\nWebsite type with custom preview on port 3000\nHTML styling: Cosmo theme, custom CSS, table of contents, code tools, and wide layout (1800px body)\nNavigation: Primary navbar with search, floating sidebar\nSocial features: Twitter cards and Open Graph metadata\nResources: Includes .txt files and references nbdev.yml/sidebar.yml for additional configuration\nOutput: Keeps markdown files and supports CommonMark format\n\nIt’s set up for a documentation or blog website with code-friendly features and social media integration.\n\n\nid: msg_01NNsn9Vw9a7NP8KTw53DJRd\ncontent: [{'citations': None, 'text': \"Your_quarto.ymlconfigures a Quarto website with:\\n\\n- **Website type** with custom preview on port 3000\\n- **HTML styling**: Cosmo theme, custom CSS, table of contents, code tools, and wide layout (1800px body)\\n- **Navigation**: Primary navbar with search, floating sidebar\\n- **Social features**: Twitter cards and Open Graph metadata\\n- **Resources**: Includes .txt files and references nbdev.yml/sidebar.yml for additional configuration\\n- **Output**: Keeps markdown files and supports CommonMark format\\n\\nIt's set up for a documentation or blog website with code-friendly features and social media integration.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 1443, 'output_tokens': 147, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#images",
    "href": "core.html#images",
    "title": "Claudette’s source",
    "section": "Images",
    "text": "Images\nClaude can handle image data as well. As everyone knows, when testing image APIs you have to use a cute puppy.\n\n# Image is Cute_dog.jpg from Wikimedia\nfn = Path('samples/puppy.jpg')\nImage(filename=fn, width=200)\n\n\n\n\n\n\n\n\n\nimg = fn.read_bytes()\n\nClaude expects an image message to have the following structure\n{\n    'role': 'user', \n    'content': [\n        {'type':'text', 'text':'What is in the image?'},\n        {\n            'type':'image', \n            'source': {\n                'type':'base64', 'media_type':'media_type', 'data': 'data'\n            }\n        }\n    ]\n}\nmsglm automatically detects if a message is an image, encodes it, and generates the data structure above. All we need to do is a create a list containing our image and a query and then pass it to mk_msg.\nLet’s try it out…\n\nq = \"In brief, what color flowers are in this image?\"\nmsg = mk_msg([img, q])\n\n\nc([msg])\n\nThe flowers in this image are purple.\n\n\nid: msg_01KRZB363rveqCZQibBAsatS\ncontent: [{'citations': None, 'text': 'The flowers in this image are purple.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 110, 'output_tokens': 11, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nYou don’t need to call mk_msg on each individual message before passing them to the Chat class. Instead you can pass your messages in a list and the Chat class will automatically call mk_msgs in the background.\nc([\"How are you?\", r])\nFor messages that contain multiple content types (like an image with a question), you’ll need to enclose the message contents in a list as shown below:\nc([\"How are you?\", r, [img, q]])\n\nc = Chat(model)\nc([img, q])\n\nThe flowers in this image are purple.\n\n\nid: msg_016zRcMZZ1D468Vc9qhedpRS\ncontent: [{'citations': None, 'text': 'The flowers in this image are purple.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 110, 'output_tokens': 11, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\ndef contents(r):\n    \"Helper to get the contents from Claude response `r`.\"\n    blk = find_block(r)\n    if not blk and r.content: blk = r.content[0]\n    if hasattr(blk,'text'): return blk.text.strip()\n    elif hasattr(blk,'content'): return blk.content.strip()\n    elif hasattr(blk,'source'): return f'*Media Type - {blk.type}*'\n    return str(blk)\n\n\ncontents(c.h[0])\n\n'*Media Type - image*'\n\n\n\nc\n\nThe flowers in this image are purple.\n\n\n► History\n\nuser: Media Type - image\nassistant: The flowers in this image are purple.\n\n\n\n\nMetric\nCount\nCost (USD)\n\n\n\n\nInput tokens\n110\n0.000330\n\n\nOutput tokens\n11\n0.000165\n\n\nCache tokens\n0\n0.000000\n\n\nServer tool use\n0\n0.000000\n\n\nTotal\n121\n$0.000495\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnfortunately, not all Claude models support images 😞. This table summarizes the capabilities of each Claude model and the different modalities they support.",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#caching",
    "href": "core.html#caching",
    "title": "Claudette’s source",
    "section": "Caching",
    "text": "Caching\nClaude supports context caching by adding a cache_control header to the message content.\n{\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\", \n            \"text\": \"Please cache my message\", \n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ]\n}\nTo cache a message, we simply set cache=True when calling mk_msg.\n\nmk_msg(['hi', 'there'], cache=True)\n\n{ 'content': [ {'text': 'hi', 'type': 'text'},\n               { 'cache_control': {'type': 'ephemeral'},\n                 'text': 'there',\n                 'type': 'text'}],\n  'role': 'user'}\n\n\nClaude also now supports smart cache look-ups, so it’s very simple to keep an entire conversation in cache by constantly telling it to update the cache with the latest message. To do this, we just need to set cache=True when creating a Chat.\n\nchat = Chat(model, sp=sp, cache=True)\n\nCaching has a minimum token limit of 1024 tokens for Sonnet and Opus, and 2048 for Haiku. If your conversation is below this limit, it will not be cached.\n\nchat(\"Hi, I'm Jeremy.\")\n\nHi Jeremy! Nice to meet you. How are you doing today?\n\n\nid: msg_01DGxcxV4KVV9N4ksjvebajw\ncontent: [{'citations': None, 'text': 'Hi Jeremy! Nice to meet you. How are you doing today?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 20, 'output_tokens': 17, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 20; Out: 17; Cache create: 0; Cache read: 0; Total Tokens: 37; Search: 0\n\n\nNote the usage: no cache is created, nor used. Now, let’s send a long enough message to trigger caching.\n\nchat(\"\"\"Lorem ipsum dolor sit amet\"\"\" * 150)\n\nI see you’ve sent a very long block of “Lorem ipsum dolor sit amet” repeated many times! Lorem ipsum is that classic placeholder text that’s commonly used in design and publishing.\nWas this intentional, or did something go wrong with copy-pasting? Either way, no worries - happens to the best of us! Is there something specific you’d like to chat about, Jeremy?\n\n\nid: msg_019muc6q8xMKoo69HVXb1pD9\ncontent: [{'citations': None, 'text': 'I see you\\'ve sent a very long block of \"Lorem ipsum dolor sit amet\" repeated many times! Lorem ipsum is that classic placeholder text that\\'s commonly used in design and publishing.\\n\\nWas this intentional, or did something go wrong with copy-pasting? Either way, no worries - happens to the best of us! Is there something specific you\\'d like to chat about, Jeremy?', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 1084, 'cache_read_input_tokens': 0, 'input_tokens': 4, 'output_tokens': 84, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 24; Out: 101; Cache create: 1084; Cache read: 0; Total Tokens: 1209; Search: 0\n\n\nThe context is now long enough for cache to be used. All the conversation history has now been written to the temporary cache. Any subsequent message will read from it rather than re-processing the entire conversation history.\n\nchat(\"Oh thank you! Sorry, my lorem ipsum generator got out of control!\")\n\nHaha, no problem at all! Those lorem ipsum generators can definitely get a bit enthusiastic sometimes. It’s like they’re trying to fill every possible space with placeholder text!\nAre you working on some kind of design or layout project? Or were you just experimenting with text generation? I’m curious what you were up to that needed lorem ipsum in the first place.\n\n\nid: msg_01JRjrjQMh32VQRNAB5MvSxC\ncontent: [{'citations': None, 'text': \"Haha, no problem at all! Those lorem ipsum generators can definitely get a bit enthusiastic sometimes. It's like they're trying to fill every possible space with placeholder text!\\n\\nAre you working on some kind of design or layout project? Or were you just experimenting with text generation? I'm curious what you were up to that needed lorem ipsum in the first place.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 102, 'cache_read_input_tokens': 1084, 'input_tokens': 4, 'output_tokens': 80, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\n\nchat.use\n\nIn: 28; Out: 181; Cache create: 1186; Cache read: 1084; Total Tokens: 2479; Search: 0",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#extended-thinking",
    "href": "core.html#extended-thinking",
    "title": "Claudette’s source",
    "section": "Extended Thinking",
    "text": "Extended Thinking\nClaude &gt;=3.7 Sonnet & Opus have enhanced reasoning capabilities for complex tasks. See docs for more info.\nWe can enable extended thinking by passing a thinking param with the following structure.\nthinking={ \"type\": \"enabled\", \"budget_tokens\": 16000 }\nWhen extended thinking is enabled a thinking block is included in the response as shown below.\n{\n  \"content\": [\n    {\n      \"type\": \"thinking\",\n      \"thinking\": \"To approach this, let's think about...\",\n      \"signature\": \"Imtakcjsu38219c0.eyJoYXNoIjoiYWJjM0NTY3fQ....\"\n    },\n    {\n      \"type\": \"text\",\n      \"text\": \"Yes, there are infinitely many prime numbers such that...\"\n    }\n  ]\n}\nNote: When thinking is enabled prefill must be empty and the temp must be 1.\n\nsource\n\nthink_md\n\n think_md (txt, thk)\n\n\ndef contents(r, show_thk=True):\n    \"Helper to get the contents from Claude response `r`.\"\n    blk = find_block(r)\n    if show_thk:\n        tk_blk = find_block(r, blk_type=ThinkingBlock)\n        if tk_blk: return think_md(blk.text.strip(), tk_blk.thinking.strip())\n    if not blk and r.content: blk = r.content[0]\n    if hasattr(blk,'text'): return blk.text.strip()\n    elif hasattr(blk,'content'): return blk.content.strip()\n    elif hasattr(blk,'source'): return f'*Media Type - {blk.type}*'\n    return str(blk)\n\nLet’s call the model without extended thinking enabled.\n\nchat = Chat(model)\n\n\nchat(\"Write a sentence about Python!\")\n\nPython is a versatile, high-level programming language known for its clean syntax and readability, making it popular for everything from web development and data science to artificial intelligence and automation.\n\n\nid: msg_01114DSaRnGmBtCzygqtoUhN\ncontent: [{'citations': None, 'text': 'Python is a versatile, high-level programming language known for its clean syntax and readability, making it popular for everything from web development and data science to artificial intelligence and automation.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 13, 'output_tokens': 40, 'server_tool_use': None, 'service_tier': 'standard'}\n\n\n\n\nNow, let’s call the model with extended thinking enabled.\n\nchat(\"Write a sentence about Python!\", maxthinktok=1024)\n\nPython’s extensive library ecosystem and cross-platform compatibility have made it one of the most widely-used programming languages for both beginners learning to code and experienced developers building complex applications.\n\n\nThinking\n\nThe human is asking me to write a sentence about Python again. They might want a different sentence this time, or they might be testing if I give the same response. I should provide a new sentence about Python that highlights different aspects than my previous response.\n\n\n\nid: msg_01PKcPntFESWXzjK7GEjj9Zi\ncontent: [{'signature': 'ErcDCkYIBRgCKkBzg7pG5Kx4zDAzkJY4RNS1o81F8sgEmt3gOz0bcUhL0T5K6ZEcQJ/wxoRiwMzn9zEhZyxDzpJ6BDBbedmE64JlEgwQ8SBddgUbHQZKCHQaDAzA+qpkcTCPHcIfiiIw7xOn95vxyqbP3TZb6s7vssIptiHANeVGy9e+4z3XTaG0VKcjHowP+3BAkSWrYsXwKp4CblIPJ3w7Sz2fC3yU5M43f7O7mqZXuooFfTWLF8xiCZ9OKxuIyNjzO+MJbdNNxhcEmjLnV0nd8g7wzyzon516dFTxqIGOb6c2Ll3unOGeWmx3igx8ike5+4dAW2kUJffdT6zd+JC1Of+0oU8+mfNu91HvjLW7080r5d5smBQksoDjZSVCaSiUpz/JbLaZXZWGHCQBrxUZqhOlEK8rXcoTL94LedvTgCwCugZizZNuP2TfIxFf5qGMMAbfcKcSt2MPkjZOyUeDDzqG0U17HkxABPE884MC1ATbm7uEHifZZSPKCFzT3J/VG4AvqF/Pqp7YXrZSPRnOuqTf6nY2tEUNXZgdaFmTEGTCfk+u8ShxWg0vgbKvmwjJp3qkyWuMpRgB', 'thinking': 'The human is asking me to write a sentence about Python again. They might want a different sentence this time, or they might be testing if I give the same response. I should provide a new sentence about Python that highlights different aspects than my previous response.', 'type': 'thinking'}, {'citations': None, 'text': \"Python's extensive library ecosystem and cross-platform compatibility have made it one of the most widely-used programming languages for both beginners learning to code and experienced developers building complex applications.\", 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 90, 'output_tokens': 99, 'server_tool_use': None, 'service_tier': 'standard'}",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#server-tools-and-web-search",
    "href": "core.html#server-tools-and-web-search",
    "title": "Claudette’s source",
    "section": "Server Tools and Web Search",
    "text": "Server Tools and Web Search\nThe str_replace special tool type is a client side tool, i.e., one where we provide the implementation. However, Anthropic also supports server side tools. The current one available is their search tool, which you can find the documentation for here. When provided as a tool to claude, claude can decide to search the web in order to answer or solve the task at hand.\n\nsource\n\nsearch_conf\n\n search_conf (max_uses:int=None, allowed_domains:list=None,\n              blocked_domains:list=None, user_location:dict=None)\n\nLittle helper to create a search tool config\nSimilar to client side tools, you provide to the tools argument in the anthropic api a non-schema dictionary with the tool’s name, type, and any additional metadata specific to that tool. Here’s a function to make that process easier for the web search tool.\n\nsearch_conf()\n\n{'type': 'web_search_20250305', 'name': 'web_search'}\n\n\nThe web search tool returns a list of TextBlocks comprised of response text from the model, ServerToolUseBlock and server tool results block such as WebSearchToolResultBlock. Some of these TextBlocks will contain citations with references to the results of the web search tool. Here is what all this looks like:\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"I'll check the current weather in...\",\n    },\n    {\n      \"type\": \"server_tool_use\",\n      \"name\": \"web_search\",\n      \"input\": {\"query\": \"San Diego weather forecast today May 12 2025\"},\n      \"id\":\"srvtoolu_014t7fS449voTHRCVzi5jQGC\"\n    },\n    {\n      \"type\": \"web_search_tool_result\",\n      \"tool_use_id\": \"srvtoolu_014t7fS449voTHRCVzi5jQGC\",\n      \"content\": [\n        \"type\": \"web_search_result\",\n        \"title\": \"Heat Advisory issued May 9...\",\n        \"url\": \"https://kesq.com/weather/...\",\n        ...\n      ]\n    }\n    {\n      \"type\": \"text\",\n      \"citations\": [\n        {\n            \"cited_text\": 'The average temperature during this month...',\n            \"title\": \"Weather San Diego in May 2025:...\",\n            \"url\": \"https://en.climate-data.org/...\",\n            \"encrypted_index\": \"EpMBCioIAxgCIiQ4ODk4YTF...\"\n        }\n      ],\n      \"text\": \"The average temperature in San Diego during May is...\"\n    },\n    ...\n  ]\n}\nLet’s update our contents function to handle these cases. For handling citations, we will use the excellent reference syntax in markdown to make clickable citation links.\n\nsource\n\n\nfind_blocks\n\n find_blocks (r, blk_type=&lt;class 'anthropic.types.text_block.TextBlock'&gt;,\n              type='text')\n\nHelper to find all blocks of type blk_type in response r.\n\nsource\n\n\nblks2cited_txt\n\n blks2cited_txt (txt_blks)\n\nHelper to get the contents from a list of TextBlocks, with citations.\n\nsource\n\n\ncontents\n\n contents (r, show_thk=True)\n\nHelper to get the contents from Claude response r.\n\nchat = Chat(model, sp='Be concise in your responses.', tools=[search_conf()], cache=True)\npr = 'What is the weather in San Diego?'\nr = chat(pr)\nr\n\nBased on the search results, here’s the current weather information for San Diego:\nToday’s weather in San Diego features cloudy skies early, followed by partial clearing, with a high of 71°F and southwest winds at 5 to 10 mph. 1 Tonight will be cloudy with a low around 65°F. 2\nThe air quality is generally acceptable for most individuals, though sensitive groups may experience minor to moderate symptoms from long-term exposure. 3\nFor more detailed and up-to-date forecasts, you can check the National Weather Service or local San Diego weather sources for the most current conditions and extended forecasts.\n\n\nid: msg_01Pbeynbff5PBG8dkbHMMUz8\ncontent: [{'id': 'srvtoolu_01FZ6GitT4MtseTnQXyecch6', 'input': {'query': 'San Diego weather today'}, 'name': 'web_search', 'type': 'server_tool_use'}, {'content': [{'encrypted_content': 'EqcCCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDH+vJSlFVD+uWNtELRoMC8WqLtmu8ep/QP6YIjDXYWSzADJMvKvC5p1F7t+S7ead/IX8XkPSs7HF5lH1NG56kddNqm3CUa2tmC+9BpcqqgE7ITxhD1Ou8vCy1x+MAM1wwi5xedd6nbsCXybeCmBppwZeD3QO8wYiA8qow1W50A740cZNc9eioM7qVPwO5jTeW90xbj6tcUUqCXV3PUpEEdzb8o1X0azHBBNd1Bma4NCZat6tC9X1XNTSIghtIWtd/wf2iz4T0Yr3eTDMGmV5LgDhpJIYpQEt7wDgMEtHkHLhwEapTruEpFb3mGh3Du7gBGNXWee//g2aABgD', 'page_age': 'June 18, 2025', 'title': '10-Day Weather Forecast for San Diego, CA - The Weather Channel | weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/weather/tenday/l/San+Diego+CA?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'EtoLCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDIH23ZAFsKxY5LzTEBoMJyk5iA/nTe9cPFN0IjA+lJo9/GTUrp+rqc/PZ4K2jM0m1eFMlcDN2DPw7uN2uEWvB1Vb46LwurwVF1bioi4q3QrXgzDjIzigfLYxfhhK7ZlweDuXOPwx3j1DosoUxd3QMabtisnn/KNjRxopp0HjDGG4xz8rL0Gxpm3xSPdNbrp6oD5F470GtMy1OAxs+mgiK4FyHYdGEzHYNhMMXGK6cVZIwiER2OVFWOYm9KaPmWSwcZidQMtwQAVoSzGZ/lOpAGewphMyW/PehOMafjIUw221PtawCs/ot7s5ZIsXduCmcYwggLgMmOp2beBA1J4ryW8F/L6F6N3v1rcjh3hifLQsh3thFbMNtLlSUxIxQMtvbNGsONBLRy06gyMpRIgxjPaYaJ2TNXwZFWdveFpOSqS4FHW1QivoQnWzc7AYKzZ27VPOpZ9BWwPvXzjnE2lvhKYfXSIhoNxMcQVoSkFb9UUgSSzMZZ8pmoxoGcfa4C2+VSHuNDXbtEDXX1NOntZf4l4C0gsn5kE31mGS3pv/0FuOGVTA1ybIGe6/GgQN2FRw/k3y8IRxe1K/q6IBQV5/QmSndJAyTVGf3KAW41k8eELo5xAGLvjcERjyyiKJ+0FkL4b8+AXZSreeLHRAfUq4RNLADdJJy84t2CT6c2luWsu92DEEgCWdxdyMtGEunnR16WL5Ogbjzh7iq5E3Bh1kIloif8+sm7M7hrz+zG4iUgPtUj14cO8WPm2bugyZaljXUZRHq9gkZTXhSela22bUe0XQGqmnlk2RI//O2qLFxI4SWg+hvTfL3a6sBRyTb3VwsVKOPCp9HYa4fk/2UNTgmJSIN2YbqR0HLJycXP2rSkIkBw1likGpaya6i+LXmIsdln01HdNyAaQtp3xIipLnVM27q58G4NcaMpJ3NRWK8Qecp8UsB20UFgsYCl+zOs/LZePvn+IBur8pYMSt2o2T72lmA7UsFwGfzmj/sFJfcN4s2WrgCBjS9X/fY8+FQ+K3gBEbAgi4ObLmvdWW44Vc+lAYQm0iLL5MErN0mZIcWNPdraDFCul00l9/UHgzvyelxwSrDSpAxKC+Ps3Ulp79YCNkyeoiDn/Si81Hx5fPTqQyayWJkVPcvF16xU3h/69+9xFNN5uBMn+bWIONNxJTfZ4yZ8ZHjKqxW7g/8aO3veKy5zLj3ZmsFxE1CAcTyCd800IOwfxfapxKwwA8DrhEZF++1O894u3A7adFlMFg9IOtEc61slOikA5nAQQI1Act8UA0aMp0NggX7e/rZItR3yZk5fi6E+Xw4r4FW3cb8h5q4xDBzbGx14TFohDb9J1woMmO7w/u3LyTVjkxdeF/ZDnTTaroFmEqNyx0+HP2QUr3ojmutuAxT309KBpcvRR5g1l4tuUedz1+EoGkdURtkuuiF1cpoP37sQGMSWwCnGRHjQauDunIMOt1hPdLr8gcF1c0SXSkA4eLiA5WVR2n9FPzNJX+jbHh4iJr2hZcKDHBpRuX3Os3mn+vl3ZB5CTD09Pay65BqLgPWmg5iGzsx8gz62nybNClKEPolNx86YhD3PRy43UXH2z4VyvT7sVsuABezBHpEMDn3E7YinqSnuxCC3u6RKnME3hrwXXgYUnCmiZG6NyK6cl0cTR+V5WW6HKsXb6ZOolRic1pK8Cmyy/qgisolKpXve8QPoKBvQTVa5ffzwYrkFrbju2LjMwrHD+78IT0q0YwPiiUSLOaRoAtv2TN5u4lu8+cFB+uLiEi26oTK0du2txkjpHO8xSk/lGXXg8EmXrF13ZVvYF685Io4uAe0adoWxhSN6sXoVA6QowSGFYokrexZJqSiXF9pdTA6zQP5RkGR27XTLEDe7ieTC73NHJKgHxkIMoV82A224Ic5lj35Q6CC6xo5Nh2FaX5MxbHqOxx/RjnIBgD', 'page_age': 'June 18, 2025', 'title': 'San Diego, CA Weather Forecast | AccuWeather', 'type': 'web_search_result', 'url': 'https://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628'}, {'encrypted_content': 'EpcCCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDDUcPLkpzEu3pRIJBhoMxa3nhpUy/DX1dftLIjDbUHhKGSAmDV/SWQfasXVEoQzxQPIRlEbt6Y7S+QuqCybTk/P5wbrKQNjt+KugnAcqmgEOvvBtt/PC6BBEBEElwKARZXm4cgHdQ8xgXXbWWCaaHmU1Rb9xqlQqpcqX2LtsDiBBFx+GdYdpRYBqMv9TctMI1MIB1o6e5ft6DpoHnwI3Kwxcr3sFKwfqa+a4nBgZ3jafIYiAEYUce8CDuDKyNykrenNBACqCZWfz20GoAFfMkMTj3keAiIyvDTJ6IRFitJ9vDM9PeZbLrW5VGAM=', 'page_age': '5 days ago', 'title': 'Weather Forecast and Conditions for San Diego, CA - The Weather Channel | Weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/weather/today/l/San+Diego+CA?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'Er0ECioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDLceH9LHlRqne3xSyxoMhJNMEjH+lbV7t4ZbIjD48SUrVwHTXPpPxJmdsPlh9nOlo+/yq+S0x6yGdLQYhW35GcH/qZfCzNbCpqIbrLQqwAMi8AcxQwwO7GkGn6b+HTh/bXRIO8tRNYKA4zWZHEXA4DV5dYG9K4DVc3F2zQPMuJW4Mkpi4gICNyOgigW7llUGDsUc5Pk1SZLCJPyxm/l4R3yB4qxBXq63aXUUnTeGWnFGdQaCESmMHjaqh1IhhuO/lMadBXtSaaL+5NuiriMqqSYMfxcyhax8cUhO5y1jRmJXftLKulue1m8qaztEKHY0G+jRxkGbf/+PshQyVrLMJwO2gCx7SytoYvt+qtoQiP/Ia/9JbyjxrKsxLrLL1CIFa6M8mxJ7Scfxp3cCFESzaT98vavH6kxAvLdWN0a7uTAVmJ4xv4qGCwYBPJh3JFa4+ufMNoqNJ8evxAoOI1Agz9wX6aCr5a14aUH+/8EK1OK9W5JV+tc0WJSr1lr9SZoIR2jFtrgfYA4RzoAkqLJCiNK/5o9ZP3LUgXpVSQ2BB5qf1JMNwIX9OUqX0vrw058Ac9djDra5ZHGKK4EEKH/haeMw/zt8wu6h4hquM/ryVk6y6vMA7hUTOjrUODP7eu6KT0swBMC7zii5TtgDRHN+iyQ1X/tQYxSc3DXCyCEAGXSLsp9F7F33kNJ58zfaqaKuGAM=', 'page_age': '1 week ago', 'title': 'San Diego weather forecast – NBC 7 San Diego', 'type': 'web_search_result', 'url': 'https://www.nbcsandiego.com/weather/'}, {'encrypted_content': 'EsoCCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDG5ItqsRt847mp4EgBoMRhY/aLxuSU8QtcdNIjAUstjIEcSpFMJT49KpkFDkwEqgtk4W4wYs1mFQwtazx/H4H1ik6Y9fEtEoPyixAgMqzQEgPJSYTk9ti5hLrbatfIlDgBiYJxnMF3w6yADP7EFicF0Jf2OM0CmrIC4PzByH9LnOfBtUangs7eG931O+zmM+PcQ3zJeVIz6wVneQUF5YGs9Jy7zXhydB2DdosL7cD4PtohXY7KtNPiGmQKBcJ5wEf6LgIOZ91KEPTt77BFdT3UCrgQPXBzcaKqVMrOS2u7ZX6ifN4lRI/oC9ZOMSasOH19qACnGmZy5SE5nf5kdcysCinyMaCBDJQnZqq8DNcxYDh0ErIRZ2sQq9PvqJGAM=', 'page_age': '3 days ago', 'title': 'San Diego, CA', 'type': 'web_search_result', 'url': 'https://www.weather.gov/sgx/'}, {'encrypted_content': 'EoQHCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDEmG07vo2p+NY6fLKxoMPxNFlooXe0xGNYLAIjA/dzIglNWibDI3ZSGUqU3uj1lj87+x2HXMu2mD1cLGFXx+hTlWP9G+B0WqVk+vYwcqhwYr0Hj8xJ/y1LfZtB4vfUkVxfeNTK4PS1oApnZpXaz15EThACb4Jf+ZjT7QeWj0hYhvQJdraayVDsQaZLcg2UAdKeA8sPCiIodyLYb05y4IZl8jDYx8l4aQ4d1PUtFIgtm8iCoYGiqucMdMZqZy59Rw30O40IsVaDfh2gJh8B//rmUC9mRWhu7Yu1EJopuxduCW+ZayMFj0iKnPiKLp5Z3wael4IxEo5Ect/SSdTUO1PLhpkaAENxCyNgXoKMidSGZkrSxmAV6xfZL3rHPWlQAbrNnKM6CLnodbiO4l5omT+01IdrAJX2ghcwDz53I6WTarU4Orl/E1Qzen6uOk9ydBSp4Zc8Rn4QA/aCT2tsEwQ+1pyEASlba+rwkNOzd1DKixwpxJBydpXwxUoENqmc82G/V2fWiIarmztY5QizcrZlIn335Y+xd9PcBnbjxNbrM60f3DjT0q8Q0xaR89FlHBndOa7rQxkC+WfXHvXe6G3AneEseIyFP3jLGVx29LY2X8AvXZtTwGFL36ivtHWwxvewg0yH5wkoLO7SJQJ36D6CppdnZIHwUWxJAOU+QE382yubKt1RGMPv0+GJsXsrGUIE9oYZeNr6PemKEnz4S0umujoavJTAff6G41VjMcAUUN3zmreZ2UQZyfS1UgutzF9RDcUX7ZSwjHrsmAuv10Eo3XJKyW8/FAI68v5VIye3HqB5OCVS1vvZrfcEjRzG0vYnH2a3fhURRpVXZIGPclNZ8a04KeT5gyRMCB61GP6Sv/OXTsPJlPt8pIafXU11Zcu4SimPjgWRR5307iOI28dvLPNye80xzv/jt/qMDw4B1oLGe3xK7/tdUYSmh0jmqYYGn6VXdKRe/SolbSeRuF7qoJ3Z2Gy/4KgY0wF0duVO8UWHHs8+HuyVIDRjBf8lzRK4SkdNFWYn6+L5o8k3ChX0Me9MHlwMFHQgfk1BFQAGCTS1C6L3PIBlygOIoBBrZz/eiXbS/PNWsYIU2mRKymnn3sU3MMc+OlWhyXYw9N/g3f6WXnCWEnGAM=', 'page_age': None, 'title': 'San Diego, CA Hourly Weather Forecast | Weather Underground', 'type': 'web_search_result', 'url': 'https://www.wunderground.com/hourly/us/ca/san-diego'}, {'encrypted_content': 'Ev8CCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDN86qKKSUKj43EGulxoMw4Ts0wCZu7jwt9h6IjBB8kGPPDuiKodamMzyNcCWWjF7W30lX2DE19WWWYptCw0x4i+7KPIiWGZ6yyhLZbsqggKnqsf9AxKsr/gIHHQg1jVBCXpfQrsPT9dROO8Wxe7Y9EQP3+lO+nojzmuZLnGQ+w7UW+eIjvAShS3ARSJyWdN6ZjJWEzS52P/aw/nwocBwxD85McttN8wYH6ZvlnPlYS+SrgXKW56SZF53hV9ez6e6vJjsGpoLN4gaA/NARsCk73SeMSF59oTskN+oeql1SZ/mRmwtcLrLgi9/CoXywPQe/8AbEib7O30g0Bm4g4vC27Ns0r3DJs/pYNo9vj6T6vOEEN3tL8L05yCPA4IJ6TtOIH3J+qYjmdzh7xLUWnTmoONGQNs8AzaJ0bB1RaP+yEInypx00YJIMi1OAunxBGvyoaoYAw==', 'page_age': 'June 16, 2025', 'title': 'National Weather Service', 'type': 'web_search_result', 'url': 'https://forecast.weather.gov/zipcity.php?inputstring=San+Diego,CA/'}, {'encrypted_content': 'ErYCCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDMPaGJKo5gUcLcphghoMB0IFVaxhQyRrDi7mIjCnwfKZ1xqe+11CCN22f1shMDF/6lekueNPgphjtk3Jaie5w4hpYz5MLHh+7k1+K9MquQGupnVpMY53SVAGTPCLBQ/Xd6RZMAn1shTv+LzRJD65Foi+wWfHcG0Xo2PVocquorbKkgRARdqx+EpcxSvwlp5ivIO5srgIepZ2UGvZpFLRleD/klZOUYFKLbSBDw/AGdiz3h0XBcW2hueNUgYr/fQ4WhTGKbQIUZaYg5Lxza00I5yMhI6yUfV2C/uybE2vzlMDZOsw7WR2zyZGxjLxCq2wVfWPdyDhX+weA1V2OlQaulMqq6H5vv6soBgD', 'page_age': None, 'title': '10-day weather forecast for San Diego, CA, United States - The Weather Channel | weather.com', 'type': 'web_search_result', 'url': 'https://weather.com/en-GB/weather/tenday/l/San+Diego+CA+United+States?canonicalCityId=3b2b39ed755b459b725bf2a29c71d678'}, {'encrypted_content': 'Ev4LCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDBaVLg/Jgoat1fHuNhoMwMNxKdlRQRkZswH3IjCBcqdRO6TlecusfrHkTjZ3i7hMqqHupeObEhg5iMBdvp5B23KuPjHnREmi6U1VmJEqgQvs9lihYD5SI3yLUDzf7Ni1fOlsUw/vF9j2rrkxdDFN8C9lXq+3dJ44zHspzeem2GnybnIA4A+1+q0IQGG5Ko3SDIukHnqqTjq36zeBh9e15hMftcfEPEUIVxkr3Yq7yART4ge3utJwkrWYvNtMk8n43qZv0lSBAMbXFOKfwvQAbp5s+Uwo8Elm2+wTCY/L4zu8VeoYw23tatg2NacalueUN/6gOIHE82TT22El4K6R6lbhgi9Hie0BD7kIsCsEuwNKxpXRU4eeeYQeohhWvdahWAWuApFvx4vjOqJ0DrI9iecW9erB0Mq80fA1JWYMCpqRpY6gIO6WNSGUPMhlC2cXqT0b5xmcvXLjkW3rm3nHUDTPC6yfroQkS/iZ/P3QeZ1UHa8L4YTg9kn8Qd9moeN8FBJhoL3p5Bk+ltTvN93MAPEbaHTRT+XMs2IP42EzXidH4A6GF08xdkdFAkD9R3DaMQrTU4ev+LkV3waTtD7CDuIcn2fmL4Arq8Vj5N0uEB6fZsiMe7GZ4UpexUV8OsIjCgnsx3y0vnHun023oIqY0DYOx7NRiH53RtEUs8w5eWZ9n068GGpfJFP9gVanp/v87kbRiW2IPtB4Jhod4OXKh/yuGXGXz58xxDAdE1H6oKHDdpVS0EATiZuvDrs/dPNMgSgGy4yCwPJOss7bXrAXLbbuiAkyzxMNntxccsjACeLqsTbjUKr5RoTMVwl5afIdGhGp8Kj5qoBvXds98Z/Pv59IOyZ+UvnStlQUTNOUiwkfTi8KyS1e1YTHQ6wt3e3aW+i/tn7+oXM+5W25M7hnKwFdnUD9CWK9PqO4eziIu0258M0pWE3yk2LCemkVfjWsIAtiA3C4lf6vi6KC0ZuQKzGzW6cwqV/qDuuQZ2sq/hu2POi11MVH5BwY6gfjIFksJ44ZV1xWtA1BW7jg0hsf+boX0laGQHnI8HWJlld/+vh9Z4PCJnqWF1av2TtF9g9tPcWhg421fniNHW4l4ZnhGpVnY2/h6uJkhpFgBxB5UI+bDSC9Md1yrTvl/maXgcfjtdkpRKrjh10XlvFMGV1WoLXdR/H8ROIUqnb/09CmOyFASo2vDLwU6GsSQ1uMVyUr+26w2SBWdAHguBXaVszmqQXGg+TBdvvBIHntcbxmPd73jHRRqWhM1e5TP26v4SnL7MNEB8Sl/KXfGwa6g7QGYbw7arbptTrHxsr1BkAzkZ8DYXINl3OOAyt3IhoBUt39XPxeg+Mt1wTd31vdz1DZ1VpCRuhQcCpZJs1VP54Aq8bUyC8a9DvX8emk/71lzI98Iylb69gqeEDSDGy0bNVAtcQ2t8Rklh/rqVEfjjPpida/VIeZnS30Lo5TOV3XalMZtMAG9LQy3hil9Qx9r9PKm+IJjC0Lw/E3n/J94pUaPomb3Iy5SvlKdRg9uTUHQ2HPAc4ZUkasgX4wDTA0epqZBIp7ONKQ792ACJljpC1aB74UZRQGvpex4GsQa9p96yfpVQyym+CMLUwNn0aK+Wr2f/KPAxOqU0JF7ATg9RkLnc4ebFlfzb7jbta7b1UdaE+iijtpEETF+L1hbZU2rrWtEGfmj8LpAEKXY8SHSknqPLjYQSx88/XcEUcNq2UMSU5gCpgoAWCTzgsHWDaTUiLuT1e7Ug4WFPXmb9xKaxsZRGcz72aC9bOoBx68EPNyahWcO1UIhfsCIy8+kWc2tFP4JyxVLMDRy0PPAjsTC/5NIJSLRj9Ff7eWiGH+ZRR3M6kIyzALVNn0D7TLNFyCN0HOvewKQl7zfotihlWkiiQ5zF1Xsr+o/kfn9u1ZCMQih7N3RGjGu6HGJETMNrPRkFLcljjw4qUfNBb16Y9vT5MnaIaLo2OwIrvZ6MmQOCxEYOeQ3RgD', 'page_age': None, 'title': 'San Diego, CA 10-Day Weather Forecast | Weather Underground', 'type': 'web_search_result', 'url': 'https://www.wunderground.com/forecast/us/ca/san-diego'}, {'encrypted_content': 'EpkCCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDNaDICw+2Tu4mISGVxoMYyWbYKBGGJWCZIUBIjD4T9bVDtjKNbiwkjKMOWHiJfQ4SISexhXNVRtRcwSXX9B1R94qAa/5fOvyGw0lMA0qnAFofUaHvh8QIvPrW9nJGVHR5jM7L+zESeZ49U/pfKMTf5Hm5nk/idB09WjI9WkgBtQEPibCTERGZEL355HoPyI4WXxwm1JxlUqVal8UP5mNCMjIaKqsQhg+XGPdVJB4YYZyPMKLAa/70Xq0e288WiRdJTqbydIlhd867wsfBthdOFE6rql0vT5xKltE5kBI5u0p1JMyLkksiagCk4EYAw==', 'page_age': None, 'title': 'San Diego, CA Weather Forecast | KGTV | kgtv.com', 'type': 'web_search_result', 'url': 'https://www.10news.com/weather'}], 'tool_use_id': 'srvtoolu_01FZ6GitT4MtseTnQXyecch6', 'type': 'web_search_tool_result'}, {'citations': None, 'text': \"Based on the search results, here's the current weather information for San Diego:\\n\\n\", 'type': 'text'}, {'citations': [{'cited_text': 'zoom out ... Cloudy skies early, followed by partial clearing. High 71F. Winds SW at 5 to 10 mph. ', 'encrypted_index': 'EpIBCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDNjBgqnSvPNqSn4drhoMC6+kZClw5BYjVd8NIjA6fDgN1noG02jYw61wabO8fydLsv5zHsZZxrhDh0OdJwqlSvtrIdmYfYw0wtCJwlIqFj7hALu67qUa7K7MrhauADNMAzYyv9sYBA==', 'title': 'San Diego, CA Hourly Weather Forecast | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/hourly/us/ca/san-diego'}], 'text': \"Today's weather in San Diego features cloudy skies early, followed by partial clearing, with a high of 71°F and southwest winds at 5 to 10 mph.\", 'type': 'text'}, {'citations': None, 'text': ' ', 'type': 'text'}, {'citations': [{'cited_text': '... Cloudy. Low around 65F.', 'encrypted_index': 'EpMBCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDBhzQq0yxF6o/+Q0choM2dHtRqvNkUaeA4xwIjBy/SKmt+RS/kumqnx89kNao5ZaujjG/o0a5wMEkHK+dR2VpJDWMa4qfc6MpGR6HrgqF/VJyhvfPY5k/gsvGgONcjq4JYVX39MyGAQ=', 'title': 'San Diego, CA Hourly Weather Forecast | Weather Underground', 'type': 'web_search_result_location', 'url': 'https://www.wunderground.com/hourly/us/ca/san-diego'}], 'text': 'Tonight will be cloudy with a low around 65°F.', 'type': 'text'}, {'citations': None, 'text': '\\n\\n', 'type': 'text'}, {'citations': [{'cited_text': 'The air quality is generally acceptable for most individuals. However, sensitive groups may experience minor to moderate symptoms from long-term expos...', 'encrypted_index': 'EpEBCioIBRgCIiQ4ODk4YTFkYy0yMTNkLTRhNmYtOTljYi03ZTBlNTUzZDc0NWISDCClHXCaSIjS0Tq46hoM53gA8ca4Otbqc6PXIjDwu0g3MfveKcLfHPb+ziBL65IdHHjOOUgo+EtosYOJa4EiDqOazuQ7hiKRFD2RRs0qFZbxQCLaVCwiO4NWncjZF6q61c9vORgE', 'title': 'San Diego, CA Weather Forecast | AccuWeather', 'type': 'web_search_result_location', 'url': 'https://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628'}], 'text': 'The air quality is generally acceptable for most individuals, though sensitive groups may experience minor to moderate symptoms from long-term exposure.', 'type': 'text'}, {'citations': None, 'text': '\\n\\nFor more detailed and up-to-date forecasts, you can check the National Weather Service or local San Diego weather sources for the most current conditions and extended forecasts.', 'type': 'text'}]\nmodel: claude-sonnet-4-20250514\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 7220, 'input_tokens': 12, 'output_tokens': 255, 'server_tool_use': {'web_search_requests': 1}, 'service_tier': 'standard'}",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#third-party-providers",
    "href": "core.html#third-party-providers",
    "title": "Claudette’s source",
    "section": "Third party providers",
    "text": "Third party providers\nNB: The 3rd party model list is currently out of date–PRs to fix that would be welcome!\n\nAmazon Bedrock\nThese are Amazon’s current Claude models:\n\nmodels_aws\n\n['anthropic.claude-opus-4-1-20250805-v1:0',\n 'anthropic.claude-sonnet-4-20250514-v1:0',\n 'claude-3-5-haiku-20241022',\n 'claude-3-7-sonnet-20250219',\n 'anthropic.claude-3-opus-20240229-v1:0',\n 'anthropic.claude-3-5-sonnet-20241022-v2:0']\n\n\nProvided boto3 is installed, we otherwise don’t need any extra code to support Amazon Bedrock – we just have to set up the approach client:\n\nab = AnthropicBedrock(\n    aws_access_key=os.environ['AWS_ACCESS_KEY'],\n    aws_secret_key=os.environ['AWS_SECRET_KEY'],\n)\nclient = Client(models_aws[0], ab)\n\n\nchat = Chat(cli=client)\n\n\nchat(\"I'm Jeremy\")\n\n\n\nGoogle Vertex\n\nmodels_goog\n\n['claude-opus-4-1@20250805',\n 'anthropic.claude-3-sonnet-20240229-v1:0',\n 'anthropic.claude-3-haiku-20240307-v1:0',\n 'claude-3-opus@20240229',\n 'claude-3-5-sonnet-v2@20241022',\n 'claude-3-sonnet@20240229',\n 'claude-3-haiku@20240307']\n\n\n\nfrom anthropic import AnthropicVertex\nimport google.auth\n\n\nproject_id = google.auth.default()[1]\nregion = \"us-east5\"\ngv = AnthropicVertex(project_id=project_id, region=region)\nclient = Client(models_goog[-1], gv)\n\n\nchat = Chat(cli=client)\n\n\nchat(\"I'm Jeremy\")",
    "crumbs": [
      "Claudette's source"
    ]
  },
  {
    "objectID": "core.html#footnotes",
    "href": "core.html#footnotes",
    "title": "Claudette’s source",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.wunderground.com/hourly/us/ca/san-diego “zoom out … Cloudy skies early, followed by partial clearing. High 71F. Winds SW at 5 to 10 mph.”↩︎\nhttps://www.wunderground.com/hourly/us/ca/san-diego “… Cloudy. Low around 65F.”↩︎\nhttps://www.accuweather.com/en/us/san-diego/92101/weather-forecast/347628 “The air quality is generally acceptable for most individuals. However, sensitive groups may experience minor to moderate symptoms from long-term expos…”↩︎",
    "crumbs": [
      "Claudette's source"
    ]
  }
]